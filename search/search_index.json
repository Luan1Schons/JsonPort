{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JsonPort \ud83d\ude80","text":"<p>A high-performance Python library for seamless serialization and deserialization of complex Python objects to/from JSON format.</p> <p>JsonPort provides intelligent type handling, caching optimizations, and comprehensive support for dataclasses, enums, datetime objects, and collections with blazing fast performance! \u26a1</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"Feature Description \ud83d\ude80 High Performance Optimized with intelligent caching for type hints and optional type resolution \ud83c\udfaf Type Safety Full type hints support with automatic type conversion and validation \ud83d\udce6 Dataclass Support Native serialization/deserialization of dataclasses with zero configuration \ud83d\uddd3\ufe0f DateTime Handling Automatic ISO format conversion for datetime, date, and time objects \ud83d\udd04 Collection Support Lists, tuples, sets, and dictionaries with perfect type preservation \ud83d\udcc1 File Operations Direct file I/O with automatic gzip compression support \ud83c\udfa8 Enum Support Automatic enum value serialization with type safety \ud83d\udee1\ufe0f Error Handling Comprehensive error messages and validation with detailed feedback \ud83d\udd27 Zero Dependencies Pure Python implementation with no external dependencies"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install jsonport\n</code></pre>"},{"location":"#basic-example","title":"Basic Example","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nfrom enum import Enum\nfrom jsonport import dump, load\n\n# Define your data structures\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n\n@dataclass\nclass User:\n    name: str\n    age: int\n    role: UserRole\n    created_at: datetime\n    tags: list[str]\n\n# Create an instance\nuser = User(\n    name=\"John Doe\",\n    age=30,\n    role=UserRole.ADMIN,\n    created_at=datetime.now(),\n    tags=[\"developer\", \"python\"]\n)\n\n# Serialize to dictionary\ndata = dump(user)\nprint(data)\n# Output:\n# {\n#   \"name\": \"John Doe\",\n#   \"age\": 30,\n#   \"role\": \"admin\",\n#   \"created_at\": \"2025-07-14T10:30:00\",\n#   \"tags\": [\"developer\", \"python\"]\n# }\n\n# Deserialize back to object\nrestored_user = load(data, User)\nprint(restored_user.name)  # \"John Doe\"\n</code></pre>"},{"location":"#python-version-support","title":"\ud83d\udc0d Python Version Support","text":"<p>JsonPort supports Python 3.7+ with full feature compatibility across all versions:</p> Version Status Features Python 3.7 \u2705 Full Support All features (EOL - End of Life) Python 3.8 \u2705 Full Support All features Python 3.9 \u2705 Full Support All features Python 3.10 \u2705 Full Support All features Python 3.11 \u2705 Full Support All features Python 3.12 \u2705 Full Support All features Python 3.13 \u2705 Full Support All features"},{"location":"#performance","title":"\ud83d\udcca Performance","text":"<p>JsonPort is optimized for high performance with intelligent caching:</p> <ul> <li>Type hints caching (max 1024 entries)</li> <li>Optional type resolution (max 512 entries)</li> <li>Zero external dependencies</li> <li>Pure Python implementation</li> </ul>"},{"location":"#benchmark-results","title":"Benchmark Results","text":"<pre><code>--------------------------------------------------------------------------------------------- benchmark: 2 tests -----------------------------------------------------------------------------\nName (time in us)                       Min                 Max                Mean             StdDev              Median                IQR            Outliers  OPS (Kops/s)            Rounds  Iterations\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_deserialization_benchmark     110.3460 (1.0)      263.2940 (1.0)      120.8443 (1.0)      12.3452 (1.0)      118.4470 (1.0)       6.0770 (1.0)       386;464        8.2751 (1.0)        6829           1\ntest_serialization_benchmark       251.4210 (2.28)     522.7470 (1.99)     270.2584 (2.24)     16.9108 (1.37)     266.3670 (2.25)     12.2920 (2.02)      218;161        3.7002 (0.45)       2499           1\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n</code></pre>"},{"location":"#why-jsonport","title":"\ud83c\udfaf Why JsonPort?","text":""},{"location":"#vs-standard-json-module","title":"vs Standard <code>json</code> Module","text":"<ul> <li>Type Safety: Automatic type conversion and validation</li> <li>Complex Objects: Native support for dataclasses, enums, datetime</li> <li>Performance: Intelligent caching for repeated operations</li> <li>Error Handling: Detailed error messages and validation</li> </ul>"},{"location":"#vs-other-libraries","title":"vs Other Libraries","text":"<ul> <li>Zero Dependencies: Pure Python, no external libraries</li> <li>Type Hints: Full support for modern Python type hints</li> <li>Performance: Optimized for speed with intelligent caching</li> <li>Simplicity: Simple API, powerful features</li> </ul>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":""},{"location":"#user-guide","title":"User Guide","text":"<ul> <li>Quick Start - Get up and running in minutes</li> <li>Installation - Installation instructions</li> <li>Basic Usage - Core functionality</li> <li>Advanced Usage - Advanced features</li> <li>File Operations - Working with files</li> <li>Error Handling - Error handling patterns</li> <li>Performance - Performance optimization</li> <li>Best Practices - Recommended patterns</li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Dataclasses - Working with dataclasses</li> <li>Enums - Enum serialization</li> <li>Collections - Lists, sets, tuples, dicts</li> <li>DateTime - Date and time handling</li> <li>Complex Structures - Nested objects</li> <li>Custom Types - Custom type handling</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Core Functions - Main API functions</li> <li>Types - Supported types</li> <li>Exceptions - Error types</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Contributing - How to contribute</li> <li>Testing - Running tests</li> <li>Benchmarking - Performance testing</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>JsonPort - Making JSON serialization simple, fast, and type-safe! \ud83d\ude80 </p>"},{"location":"SUMMARY/","title":"Table of contents","text":"<p>Home</p>"},{"location":"SUMMARY/#user-guide","title":"User Guide","text":"<ul> <li>Quick Start</li> <li>Installation</li> <li>Basic Usage</li> <li>Advanced Usage</li> <li>File Operations</li> <li>Error Handling</li> <li>Performance</li> <li>Best Practices</li> </ul>"},{"location":"SUMMARY/#examples","title":"Examples","text":"<ul> <li>Dataclasses</li> <li>Enums</li> <li>Collections</li> <li>DateTime</li> <li>Complex Structures</li> <li>Custom Types</li> </ul>"},{"location":"SUMMARY/#api-reference","title":"API Reference","text":"<ul> <li>Core Functions</li> <li>Types</li> <li>Exceptions</li> </ul>"},{"location":"SUMMARY/#development","title":"Development","text":"<ul> <li>Contributing</li> <li>Testing</li> <li>Benchmarking</li> </ul>"},{"location":"api/core/","title":"Core Functions","text":""},{"location":"api/core/#jsonport.core","title":"<code>jsonport.core</code>","text":""},{"location":"api/core/#jsonport.core.JsonPortEncoder","title":"<code>JsonPortEncoder</code>","text":"<p>               Bases: <code>JSONEncoder</code></p> <p>Custom encoder for special types with improved performance.</p> Source code in <code>jsonport/core.py</code> <pre><code>class JsonPortEncoder(json.JSONEncoder):\n    \"\"\"Custom encoder for special types with improved performance.\"\"\"\n\n    def default(self, obj: Any) -&gt; Any:\n        \"\"\"\n        Convert special types to JSON-serializable format.\n\n        Args:\n            obj: Object to encode\n\n        Returns:\n            JSON-serializable representation of the object\n        \"\"\"\n        if isinstance(obj, (datetime.datetime, datetime.date, datetime.time)):\n            return obj.isoformat()\n        elif isinstance(obj, Enum):\n            return obj.value\n        elif is_dataclass(obj):\n            return asdict(obj)\n        elif isinstance(obj, set):\n            return list(obj)\n        return str(obj)\n</code></pre>"},{"location":"api/core/#jsonport.core.JsonPortEncoder.default","title":"<code>default(obj)</code>","text":"<p>Convert special types to JSON-serializable format.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to encode</p> required <p>Returns:</p> Type Description <code>Any</code> <p>JSON-serializable representation of the object</p> Source code in <code>jsonport/core.py</code> <pre><code>def default(self, obj: Any) -&gt; Any:\n    \"\"\"\n    Convert special types to JSON-serializable format.\n\n    Args:\n        obj: Object to encode\n\n    Returns:\n        JSON-serializable representation of the object\n    \"\"\"\n    if isinstance(obj, (datetime.datetime, datetime.date, datetime.time)):\n        return obj.isoformat()\n    elif isinstance(obj, Enum):\n        return obj.value\n    elif is_dataclass(obj):\n        return asdict(obj)\n    elif isinstance(obj, set):\n        return list(obj)\n    return str(obj)\n</code></pre>"},{"location":"api/core/#jsonport.core._get_cached_type_hints","title":"<code>_get_cached_type_hints(cls)</code>  <code>cached</code>","text":"<p>Cache type hints for better performance.</p> Source code in <code>jsonport/core.py</code> <pre><code>@lru_cache(maxsize=1024)\ndef _get_cached_type_hints(cls: Type) -&gt; Dict[str, Type]:\n    \"\"\"Cache type hints for better performance.\"\"\"\n    return get_type_hints(cls)\n</code></pre>"},{"location":"api/core/#jsonport.core._get_cached_optional_type","title":"<code>_get_cached_optional_type(target_type)</code>  <code>cached</code>","text":"<p>Cache optional type resolution for better performance.</p> Source code in <code>jsonport/core.py</code> <pre><code>@lru_cache(maxsize=512)\ndef _get_cached_optional_type(target_type: Type) -&gt; Type:\n    \"\"\"Cache optional type resolution for better performance.\"\"\"\n    if get_origin(target_type) is Union:\n        args = get_args(target_type)\n        if len(args) == 2 and type(None) in args:\n            return next(arg for arg in args if arg is not type(None))\n    return target_type\n</code></pre>"},{"location":"api/core/#jsonport.core.is_serializable","title":"<code>is_serializable(obj)</code>","text":"<p>Check if an object is serializable by jsonport.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to check for serializability</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if object can be serialized, False otherwise</p> Source code in <code>jsonport/core.py</code> <pre><code>def is_serializable(obj: Any) -&gt; bool:\n    \"\"\"\n    Check if an object is serializable by jsonport.\n\n    Args:\n        obj: Object to check for serializability\n\n    Returns:\n        bool: True if object can be serialized, False otherwise\n    \"\"\"\n    try:\n        dump(obj)\n        return True\n    except Exception:\n        return False\n</code></pre>"},{"location":"api/core/#jsonport.core._serialize_dataclass","title":"<code>_serialize_dataclass(obj)</code>","text":"<p>Serialize a dataclass object to dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Dataclass instance to serialize</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Serialized dataclass as dictionary</p> <p>Raises:</p> Type Description <code>JsonPortError</code> <p>If object is not a dataclass</p> Source code in <code>jsonport/core.py</code> <pre><code>def _serialize_dataclass(obj: Any) -&gt; dict:\n    \"\"\"\n    Serialize a dataclass object to dictionary.\n\n    Args:\n        obj: Dataclass instance to serialize\n\n    Returns:\n        dict: Serialized dataclass as dictionary\n\n    Raises:\n        JsonPortError: If object is not a dataclass\n    \"\"\"\n    if not is_dataclass(obj):\n        raise JsonPortError(\"Object must be a dataclass\")\n\n    result = {}\n    type_hints = _get_cached_type_hints(type(obj))\n\n    for field_name, field_value in obj.__dict__.items():\n        if field_name in type_hints:\n            result[field_name] = _serialize_value(field_value, type_hints[field_name])\n        else:\n            result[field_name] = _serialize_value(field_value)\n\n    return result\n</code></pre>"},{"location":"api/core/#jsonport.core._serialize_value","title":"<code>_serialize_value(value, expected_type=None)</code>","text":"<p>Serialize a value with type-aware conversion.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Value to serialize</p> required <code>expected_type</code> <code>Optional[Type]</code> <p>Expected type for proper serialization</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>Serialized value</p> Source code in <code>jsonport/core.py</code> <pre><code>def _serialize_value(value: Any, expected_type: Optional[Type] = None) -&gt; Any:\n    \"\"\"\n    Serialize a value with type-aware conversion.\n\n    Args:\n        value: Value to serialize\n        expected_type: Expected type for proper serialization\n\n    Returns:\n        Serialized value\n    Raises:\n        JsonPortError: If value is not serializable\n    \"\"\"\n    if value is None:\n        return None\n\n    # Handle collections with type information\n    if isinstance(value, list):\n        item_type = (\n            get_args(expected_type)[0]\n            if expected_type and get_origin(expected_type) is list\n            else None\n        )\n        return [_serialize_value(item, item_type) for item in value]\n\n    if isinstance(value, tuple):\n        if expected_type and get_origin(expected_type) is tuple:\n            args = get_args(expected_type)\n            if len(args) == len(value):\n                return [_serialize_value(item, args[i]) for i, item in enumerate(value)]\n        return [_serialize_value(item) for item in value]\n\n    if isinstance(value, set):\n        item_type = (\n            get_args(expected_type)[0]\n            if expected_type and get_origin(expected_type) is set\n            else None\n        )\n        return [_serialize_value(item, item_type) for item in value]\n\n    if isinstance(value, dict):\n        key_type, val_type = (None, None)\n        if expected_type and get_origin(expected_type) is dict:\n            key_type, val_type = get_args(expected_type)\n        return {\n            _serialize_value(k, key_type): _serialize_value(v, val_type)\n            for k, v in value.items()\n        }\n\n    # Handle special types\n    if is_dataclass(value):\n        return _serialize_dataclass(value)\n\n    if isinstance(value, (str, int, float, bool)):\n        return value\n\n    if isinstance(value, (datetime.datetime, datetime.date, datetime.time)):\n        return value.isoformat()\n\n    if isinstance(value, Enum):\n        return value.value\n\n    # If not serializable, raise error\n    raise JsonPortError(f\"Type {type(value).__name__} is not serializable by JsonPort\")\n</code></pre>"},{"location":"api/core/#jsonport.core._deserialize_value","title":"<code>_deserialize_value(value, target_type)</code>","text":"<p>Deserialize a value to the target type.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Value to deserialize</p> required <code>target_type</code> <code>Type</code> <p>Target type for deserialization</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Deserialized value of the target type</p> Source code in <code>jsonport/core.py</code> <pre><code>def _deserialize_value(value: Any, target_type: Type) -&gt; Any:\n    \"\"\"\n    Deserialize a value to the target type.\n\n    Args:\n        value: Value to deserialize\n        target_type: Target type for deserialization\n\n    Returns:\n        Deserialized value of the target type\n    \"\"\"\n    if value is None:\n        return None\n\n    base_type = _get_cached_optional_type(target_type)\n\n    # Handle primitive types\n    if base_type in (str, int, float, bool):\n        return base_type(value)\n\n    # Handle datetime types\n    if base_type == datetime.datetime:\n        if isinstance(value, str):\n            return datetime.datetime.fromisoformat(value.replace(\"Z\", \"+00:00\"))\n        return value\n\n    if base_type == datetime.date:\n        if isinstance(value, str):\n            return datetime.date.fromisoformat(value)\n        return value\n\n    if base_type == datetime.time:\n        if isinstance(value, str):\n            return datetime.time.fromisoformat(value)\n        return value\n\n    # Handle collections\n    if get_origin(base_type) is list:\n        item_type = get_args(base_type)[0]\n        return [_deserialize_value(item, item_type) for item in value]\n\n    if get_origin(base_type) is tuple:\n        args = get_args(base_type)\n        if len(args) == len(value):\n            return tuple(\n                _deserialize_value(item, args[i]) for i, item in enumerate(value)\n            )\n        return tuple(_deserialize_value(item, args[0]) for item in value)\n\n    if get_origin(base_type) is set:\n        item_type = get_args(base_type)[0]\n        return set(_deserialize_value(item, item_type) for item in value)\n\n    if get_origin(base_type) is dict:\n        key_type, val_type = get_args(base_type)\n        return {\n            _deserialize_value(k, key_type): _deserialize_value(v, val_type)\n            for k, v in value.items()\n        }\n\n    # Handle dataclasses and enums\n    if is_dataclass(base_type):\n        return _deserialize_dataclass(value, base_type)\n\n    if isinstance(base_type, type) and issubclass(base_type, Enum):\n        return base_type(value)\n\n    return value\n</code></pre>"},{"location":"api/core/#jsonport.core._deserialize_dataclass","title":"<code>_deserialize_dataclass(data, target_class)</code>","text":"<p>Deserialize a dictionary to a dataclass instance.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary data to deserialize</p> required <code>target_class</code> <code>Type[T]</code> <p>Target dataclass type</p> required <p>Returns:</p> Type Description <code>T</code> <p>Instance of the target dataclass</p> <p>Raises:</p> Type Description <code>JsonPortError</code> <p>If target class is not a dataclass</p> Source code in <code>jsonport/core.py</code> <pre><code>def _deserialize_dataclass(data: dict, target_class: Type[T]) -&gt; T:\n    \"\"\"\n    Deserialize a dictionary to a dataclass instance.\n\n    Args:\n        data: Dictionary data to deserialize\n        target_class: Target dataclass type\n\n    Returns:\n        Instance of the target dataclass\n\n    Raises:\n        JsonPortError: If target class is not a dataclass\n    \"\"\"\n    if not is_dataclass(target_class):\n        raise JsonPortError(\"Target class must be a dataclass\")\n\n    type_hints = _get_cached_type_hints(target_class)\n    kwargs = {}\n\n    for field_name, field_type in type_hints.items():\n        if field_name in data:\n            kwargs[field_name] = _deserialize_value(data[field_name], field_type)\n\n    return target_class(**kwargs)\n</code></pre>"},{"location":"api/core/#jsonport.core.dump","title":"<code>dump(obj)</code>","text":"<p>Serialize a Python object to a JSON-serializable dictionary.</p> <p>This function handles complex Python objects including dataclasses, collections, datetime objects, and enums, converting them to JSON-compatible formats.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to serialize (can be dataclass, list, tuple, set, dict, or primitive)</p> required <p>Returns:</p> Type Description <code>Any</code> <p>JSON-serializable dictionary, list, or primitive value</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class User:\n...     name: str\n...     age: int\n&gt;&gt;&gt; user = User(\"John\", 30)\n&gt;&gt;&gt; dump(user)\n{'name': 'John', 'age': 30}\n</code></pre> Source code in <code>jsonport/core.py</code> <pre><code>def dump(obj: Any) -&gt; Any:\n    \"\"\"\n    Serialize a Python object to a JSON-serializable dictionary.\n\n    This function handles complex Python objects including dataclasses,\n    collections, datetime objects, and enums, converting them to\n    JSON-compatible formats.\n\n    Args:\n        obj: Object to serialize (can be dataclass, list, tuple, set, dict, or primitive)\n\n    Returns:\n        JSON-serializable dictionary, list, or primitive value\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass\n        &gt;&gt;&gt; @dataclass\n        ... class User:\n        ...     name: str\n        ...     age: int\n        &gt;&gt;&gt; user = User(\"John\", 30)\n        &gt;&gt;&gt; dump(user)\n        {'name': 'John', 'age': 30}\n    \"\"\"\n    if is_dataclass(obj):\n        return _serialize_dataclass(obj)\n    elif isinstance(obj, (list, tuple, set)):\n        return [_serialize_value(item) for item in obj]\n    elif isinstance(obj, dict):\n        return {k: _serialize_value(v) for k, v in obj.items()}\n    else:\n        return _serialize_value(obj)\n</code></pre>"},{"location":"api/core/#jsonport.core.load","title":"<code>load(data, target_class)</code>","text":"<p>Deserialize a JSON dictionary/list to a Python object.</p> <p>This function reconstructs Python objects from JSON data, handling type conversion and nested structures.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Dictionary/list to deserialize</p> required <code>target_class</code> <code>Type[T]</code> <p>Target class for deserialization</p> required <p>Returns:</p> Type Description <code>T</code> <p>Instance of the target class</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class User:\n...     name: str\n...     age: int\n&gt;&gt;&gt; data = {'name': 'John', 'age': 30}\n&gt;&gt;&gt; user = load(data, User)\n&gt;&gt;&gt; user.name\n'John'\n</code></pre> Source code in <code>jsonport/core.py</code> <pre><code>def load(data: Any, target_class: Type[T]) -&gt; T:\n    \"\"\"\n    Deserialize a JSON dictionary/list to a Python object.\n\n    This function reconstructs Python objects from JSON data,\n    handling type conversion and nested structures.\n\n    Args:\n        data: Dictionary/list to deserialize\n        target_class: Target class for deserialization\n\n    Returns:\n        Instance of the target class\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass\n        &gt;&gt;&gt; @dataclass\n        ... class User:\n        ...     name: str\n        ...     age: int\n        &gt;&gt;&gt; data = {'name': 'John', 'age': 30}\n        &gt;&gt;&gt; user = load(data, User)\n        &gt;&gt;&gt; user.name\n        'John'\n    \"\"\"\n    if is_dataclass(target_class):\n        return _deserialize_dataclass(data, target_class)\n    else:\n        return _deserialize_value(data, target_class)\n</code></pre>"},{"location":"api/core/#jsonport.core.dump_file","title":"<code>dump_file(obj, path, overwrite=True)</code>","text":"<p>Serialize a Python object and save it to a JSON file.</p> <p>Creates directories if they don't exist and supports both regular JSON and gzipped JSON files (.gz extension).</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to serialize</p> required <code>path</code> <code>str</code> <p>Path to the JSON file</p> required <code>overwrite</code> <code>bool</code> <p>If False, raises error when file already exists</p> <code>True</code> <p>Raises:</p> Type Description <code>JsonPortError</code> <p>If file exists and overwrite=False, or if path is invalid</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class Config:\n...     api_key: str\n...     timeout: int\n&gt;&gt;&gt; config = Config(\"abc123\", 30)\n&gt;&gt;&gt; dump_file(config, \"config.json\")\n&gt;&gt;&gt; dump_file(config, \"config.json.gz\")  # Compressed file\n</code></pre> Source code in <code>jsonport/core.py</code> <pre><code>def dump_file(obj: Any, path: str, overwrite: bool = True) -&gt; None:\n    \"\"\"\n    Serialize a Python object and save it to a JSON file.\n\n    Creates directories if they don't exist and supports both regular JSON\n    and gzipped JSON files (.gz extension).\n\n    Args:\n        obj: Object to serialize\n        path: Path to the JSON file\n        overwrite: If False, raises error when file already exists\n\n    Raises:\n        JsonPortError: If file exists and overwrite=False, or if path is invalid\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass\n        &gt;&gt;&gt; @dataclass\n        ... class Config:\n        ...     api_key: str\n        ...     timeout: int\n        &gt;&gt;&gt; config = Config(\"abc123\", 30)\n        &gt;&gt;&gt; dump_file(config, \"config.json\")\n        &gt;&gt;&gt; dump_file(config, \"config.json.gz\")  # Compressed file\n    \"\"\"\n    data = dump(obj)\n\n    # Create directory if it doesn't exist (only if path has directory)\n    directory = os.path.dirname(path)\n    if directory:\n        os.makedirs(directory, exist_ok=True)\n\n    if not overwrite and os.path.exists(path):\n        raise JsonPortError(f\"File already exists: {path}\")\n\n    if path.endswith(\".gz\"):\n        with gzip.open(path, \"wt\", encoding=\"utf-8\") as f:\n            json.dump(data, f, ensure_ascii=False, indent=2)\n    else:\n        with open(path, \"w\", encoding=\"utf-8\") as f:\n            json.dump(data, f, ensure_ascii=False, indent=2)\n</code></pre>"},{"location":"api/core/#jsonport.core.load_file","title":"<code>load_file(path, target_class)</code>","text":"<p>Load a JSON file (or gzipped JSON) and deserialize to the desired type.</p> <p>Automatically detects gzipped files by .gz extension and handles decompression transparently.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the JSON file</p> required <code>target_class</code> <code>Type[T]</code> <p>Target class for deserialization</p> required <p>Returns:</p> Type Description <code>T</code> <p>Instance of the target class</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file doesn't exist</p> <code>JsonPortError</code> <p>If deserialization fails</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class Config:\n...     api_key: str\n...     timeout: int\n&gt;&gt;&gt; config = load_file(\"config.json\", Config)\n&gt;&gt;&gt; config = load_file(\"config.json.gz\", Config)  # Compressed file\n</code></pre> Source code in <code>jsonport/core.py</code> <pre><code>def load_file(path: str, target_class: Type[T]) -&gt; T:\n    \"\"\"\n    Load a JSON file (or gzipped JSON) and deserialize to the desired type.\n\n    Automatically detects gzipped files by .gz extension and handles\n    decompression transparently.\n\n    Args:\n        path: Path to the JSON file\n        target_class: Target class for deserialization\n\n    Returns:\n        Instance of the target class\n\n    Raises:\n        FileNotFoundError: If the file doesn't exist\n        JsonPortError: If deserialization fails\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass\n        &gt;&gt;&gt; @dataclass\n        ... class Config:\n        ...     api_key: str\n        ...     timeout: int\n        &gt;&gt;&gt; config = load_file(\"config.json\", Config)\n        &gt;&gt;&gt; config = load_file(\"config.json.gz\", Config)  # Compressed file\n    \"\"\"\n    if path.endswith(\".gz\"):\n        with gzip.open(path, \"rt\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n    else:\n        with open(path, \"r\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n\n    return load(data, target_class)\n</code></pre>"},{"location":"api/exceptions/","title":"Exceptions","text":"<p>JsonPort provides comprehensive exception handling with detailed error messages to help you debug serialization and deserialization issues.</p>"},{"location":"api/exceptions/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>JsonPortError (Base Exception)\n\u251c\u2500\u2500 SerializationError\n\u2514\u2500\u2500 DeserializationError\n</code></pre>"},{"location":"api/exceptions/#base-exception","title":"Base Exception","text":""},{"location":"api/exceptions/#jsonporterror","title":"JsonPortError","text":"<p>The base exception class for all JsonPort errors:</p> <pre><code>from jsonport import JsonPortError\n\nclass JsonPortError(Exception):\n    \"\"\"Base exception for all JsonPort errors.\"\"\"\n    pass\n</code></pre> <p>Usage: <pre><code>from jsonport import JsonPortError\n\ntry:\n    # Your serialization/deserialization code\n    pass\nexcept JsonPortError as e:\n    print(f\"JsonPort error: {e}\")\n</code></pre></p>"},{"location":"api/exceptions/#serialization-errors","title":"Serialization Errors","text":""},{"location":"api/exceptions/#serializationerror","title":"SerializationError","text":"<p>Raised when serialization fails:</p> <pre><code>from jsonport import SerializationError\n\nclass SerializationError(JsonPortError):\n    \"\"\"Raised when serialization fails.\"\"\"\n\n    def __init__(self, message: str, object_type: str = None, field: str = None):\n        self.message = message\n        self.object_type = object_type\n        self.field = field\n        super().__init__(message)\n</code></pre> <p>Usage: <pre><code>from jsonport import dump, SerializationError\n\ntry:\n    data = dump(complex_object)\nexcept SerializationError as e:\n    print(f\"Serialization failed: {e}\")\n    print(f\"Object type: {e.object_type}\")\n    print(f\"Field: {e.field}\")\n</code></pre></p> <p>Common Causes: - Circular references - Unsupported object types - Invalid enum values - Missing required fields</p> <p>Example: <pre><code>from dataclasses import dataclass\nfrom jsonport import dump, SerializationError\n\n# Circular reference example\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nnode1 = Node(1)\nnode2 = Node(2)\nnode1.next = node2\nnode2.next = node1  # Circular reference!\n\ntry:\n    data = dump(node1)\nexcept SerializationError as e:\n    print(f\"Error: {e}\")\n    # Output: Error: Cannot serialize object with circular references\n</code></pre></p>"},{"location":"api/exceptions/#deserialization-errors","title":"Deserialization Errors","text":""},{"location":"api/exceptions/#deserializationerror","title":"DeserializationError","text":"<p>Raised when deserialization fails:</p> <pre><code>from jsonport import DeserializationError\n\nclass DeserializationError(JsonPortError):\n    \"\"\"Raised when deserialization fails.\"\"\"\n\n    def __init__(self, message: str, expected_type: str = None, value: any = None, field: str = None):\n        self.message = message\n        self.expected_type = expected_type\n        self.value = value\n        self.field = field\n        super().__init__(message)\n</code></pre> <p>Usage: <pre><code>from jsonport import load, DeserializationError\n\ntry:\n    obj = load(data, TargetClass)\nexcept DeserializationError as e:\n    print(f\"Deserialization failed: {e}\")\n    print(f\"Expected type: {e.expected_type}\")\n    print(f\"Received value: {e.value}\")\n    print(f\"Field: {e.field}\")\n</code></pre></p> <p>Common Causes: - Type mismatches - Missing required fields - Invalid enum values - Malformed data structures</p>"},{"location":"api/exceptions/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"api/exceptions/#type-mismatch","title":"Type Mismatch","text":"<pre><code>from dataclasses import dataclass\nfrom jsonport import load, DeserializationError\n\n@dataclass\nclass User:\n    name: str\n    age: int\n\n# This will raise DeserializationError\ntry:\n    user = load({\"name\": \"John\", \"age\": \"thirty\"}, User)\nexcept DeserializationError as e:\n    print(f\"Type error: {e}\")\n    print(f\"Expected type: {e.expected_type}\")\n    print(f\"Received value: {e.value}\")\n    # Output:\n    # Type error: Cannot deserialize 'thirty' to int\n    # Expected type: int\n    # Received value: thirty\n</code></pre>"},{"location":"api/exceptions/#missing-required-fields","title":"Missing Required Fields","text":"<pre><code>from dataclasses import dataclass\nfrom jsonport import load, DeserializationError\n\n@dataclass\nclass User:\n    name: str\n    age: int\n    email: str\n\n# This will raise DeserializationError\ntry:\n    user = load({\"name\": \"John\", \"age\": 30}, User)\nexcept DeserializationError as e:\n    print(f\"Missing field: {e}\")\n    # Output: Missing field: Required field 'email' not found\n</code></pre>"},{"location":"api/exceptions/#invalid-enum-values","title":"Invalid Enum Values","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\nfrom jsonport import load, DeserializationError\n\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n\n@dataclass\nclass User:\n    name: str\n    role: UserRole\n\n# This will raise DeserializationError\ntry:\n    user = load({\"name\": \"John\", \"role\": \"moderator\"}, User)\nexcept DeserializationError as e:\n    print(f\"Invalid enum: {e}\")\n    print(f\"Expected type: {e.expected_type}\")\n    print(f\"Received value: {e.value}\")\n    # Output:\n    # Invalid enum: Cannot deserialize 'moderator' to UserRole\n    # Expected type: UserRole\n    # Received value: moderator\n</code></pre>"},{"location":"api/exceptions/#circular-references","title":"Circular References","text":"<pre><code>from jsonport import dump, SerializationError\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n# Create circular reference\nnode1 = Node(1)\nnode2 = Node(2)\nnode1.next = node2\nnode2.next = node1\n\n# This will raise SerializationError\ntry:\n    data = dump(node1)\nexcept SerializationError as e:\n    print(f\"Circular reference: {e}\")\n    # Output: Circular reference: Cannot serialize object with circular references\n</code></pre>"},{"location":"api/exceptions/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"api/exceptions/#1-basic-error-handling","title":"1. Basic Error Handling","text":"<pre><code>from jsonport import dump, load, JsonPortError, SerializationError, DeserializationError\n\ndef safe_serialize(obj):\n    \"\"\"Safely serialize an object with error handling.\"\"\"\n    try:\n        return dump(obj)\n    except SerializationError as e:\n        print(f\"Serialization failed: {e}\")\n        return None\n    except JsonPortError as e:\n        print(f\"Unexpected JsonPort error: {e}\")\n        return None\n\ndef safe_deserialize(data, target_class):\n    \"\"\"Safely deserialize data with error handling.\"\"\"\n    try:\n        return load(data, target_class)\n    except DeserializationError as e:\n        print(f\"Deserialization failed: {e}\")\n        return None\n    except JsonPortError as e:\n        print(f\"Unexpected JsonPort error: {e}\")\n        return None\n</code></pre>"},{"location":"api/exceptions/#2-validation-before-deserialization","title":"2. Validation Before Deserialization","text":"<pre><code>from jsonport import load, DeserializationError\n\ndef validate_user_data(data):\n    \"\"\"Validate user data before deserialization.\"\"\"\n    if not isinstance(data, dict):\n        raise ValueError(\"Data must be a dictionary\")\n\n    required_fields = [\"name\", \"age\", \"email\"]\n    for field in required_fields:\n        if field not in data:\n            raise ValueError(f\"Missing required field: {field}\")\n\n    # Validate age\n    if not isinstance(data[\"age\"], int) or data[\"age\"] &lt; 0:\n        raise ValueError(\"Age must be a positive integer\")\n\n    # Validate email format\n    if \"@\" not in data[\"email\"]:\n        raise ValueError(\"Invalid email format\")\n\ndef safe_load_user(data):\n    \"\"\"Load user with validation.\"\"\"\n    try:\n        validate_user_data(data)\n        return load(data, User)\n    except (ValueError, DeserializationError) as e:\n        print(f\"Failed to load user: {e}\")\n        raise\n</code></pre>"},{"location":"api/exceptions/#3-partial-failure-handling","title":"3. Partial Failure Handling","text":"<pre><code>from jsonport import load, DeserializationError\nfrom typing import List, Tuple\n\ndef load_users_with_errors(users_data: List[dict]) -&gt; Tuple[List[User], List[str]]:\n    \"\"\"Load users and collect errors for failed ones.\"\"\"\n    users = []\n    errors = []\n\n    for i, user_data in enumerate(users_data):\n        try:\n            user = load(user_data, User)\n            users.append(user)\n        except DeserializationError as e:\n            errors.append(f\"User {i}: {e}\")\n\n    return users, errors\n\n# Usage\nusers_data = [\n    {\"name\": \"John\", \"age\": 30, \"email\": \"john@example.com\"},\n    {\"name\": \"Jane\", \"age\": \"twenty-five\", \"email\": \"jane@example.com\"},  # Invalid age\n    {\"name\": \"Bob\", \"age\": 35, \"email\": \"bob@example.com\"}\n]\n\nusers, errors = load_users_with_errors(users_data)\nprint(f\"Successfully loaded {len(users)} users\")\nprint(f\"Failed to load {len(errors)} users:\")\nfor error in errors:\n    print(f\"  - {error}\")\n</code></pre>"},{"location":"api/exceptions/#4-custom-error-messages","title":"4. Custom Error Messages","text":"<pre><code>from jsonport import load, DeserializationError\n\ndef load_with_context(data, target_class, context=\"\"):\n    \"\"\"Load object with contextual error messages.\"\"\"\n    try:\n        return load(data, target_class)\n    except DeserializationError as e:\n        raise DeserializationError(\n            f\"{context}: {e.message}\",\n            expected_type=e.expected_type,\n            value=e.value,\n            field=e.field\n        )\n\n# Usage\ntry:\n    user = load_with_context(user_data, User, \"Loading user from API\")\nexcept DeserializationError as e:\n    print(f\"Failed to load user: {e}\")\n    # Output: Failed to load user: Loading user from API: Cannot deserialize 'thirty' to int\n</code></pre>"},{"location":"api/exceptions/#5-fallback-values","title":"5. Fallback Values","text":"<pre><code>from jsonport import load, DeserializationError\n\ndef load_with_fallback(data, target_class, fallback_value=None):\n    \"\"\"Load object with fallback value on failure.\"\"\"\n    try:\n        return load(data, target_class)\n    except DeserializationError:\n        return fallback_value\n\n# Usage\nuser = load_with_fallback(invalid_data, User, User(\"Default\", 0, \"default@example.com\"))\n</code></pre>"},{"location":"api/exceptions/#6-retry-with-different-types","title":"6. Retry with Different Types","text":"<pre><code>from jsonport import load, DeserializationError\nfrom typing import Union\n\ndef load_flexible(data, target_class, alternative_class=None):\n    \"\"\"Try to load with target class, fallback to alternative if specified.\"\"\"\n    try:\n        return load(data, target_class)\n    except DeserializationError as e:\n        if alternative_class:\n            try:\n                return load(data, alternative_class)\n            except DeserializationError:\n                raise e\n        raise\n\n# Usage\ntry:\n    # Try to load as User, fallback to BasicUser if needed\n    user = load_flexible(data, User, BasicUser)\nexcept DeserializationError as e:\n    print(f\"Failed to load user: {e}\")\n</code></pre>"},{"location":"api/exceptions/#debugging-tips","title":"Debugging Tips","text":""},{"location":"api/exceptions/#1-enable-debug-logging","title":"1. Enable Debug Logging","text":"<pre><code>import logging\n\n# Enable debug logging for JsonPort\nlogging.getLogger('jsonport').setLevel(logging.DEBUG)\n\n# This will show detailed information about serialization/deserialization\n</code></pre>"},{"location":"api/exceptions/#2-inspect-object-structure","title":"2. Inspect Object Structure","text":"<pre><code>from jsonport import dump\n\ndef debug_object(obj):\n    \"\"\"Debug object serialization.\"\"\"\n    try:\n        data = dump(obj)\n        print(\"Serialization successful\")\n        print(f\"Result: {data}\")\n    except Exception as e:\n        print(f\"Serialization failed: {e}\")\n        print(f\"Object type: {type(obj)}\")\n        print(f\"Object attributes: {dir(obj)}\")\n        if hasattr(obj, '__dict__'):\n            print(f\"Object dict: {obj.__dict__}\")\n</code></pre>"},{"location":"api/exceptions/#3-validate-type-hints","title":"3. Validate Type Hints","text":"<pre><code>from typing import get_type_hints\n\ndef validate_dataclass(cls):\n    \"\"\"Validate dataclass type hints.\"\"\"\n    hints = get_type_hints(cls)\n    print(f\"Type hints for {cls.__name__}:\")\n    for field, hint in hints.items():\n        print(f\"  {field}: {hint}\")\n</code></pre>"},{"location":"api/exceptions/#4-check-data-structure","title":"4. Check Data Structure","text":"<pre><code>def inspect_data_structure(data, indent=0):\n    \"\"\"Recursively inspect data structure.\"\"\"\n    prefix = \"  \" * indent\n\n    if isinstance(data, dict):\n        print(f\"{prefix}Dict with {len(data)} keys:\")\n        for key, value in data.items():\n            print(f\"{prefix}  {key}: {type(value).__name__}\")\n            inspect_data_structure(value, indent + 2)\n    elif isinstance(data, list):\n        print(f\"{prefix}List with {len(data)} items:\")\n        for i, item in enumerate(data):\n            print(f\"{prefix}  [{i}]: {type(item).__name__}\")\n            inspect_data_structure(item, indent + 2)\n    else:\n        print(f\"{prefix}Value: {type(data).__name__} = {data}\")\n\n# Usage\ninspect_data_structure(user_data)\n</code></pre>"},{"location":"api/exceptions/#error-recovery-strategies","title":"Error Recovery Strategies","text":""},{"location":"api/exceptions/#1-partial-deserialization","title":"1. Partial Deserialization","text":"<pre><code>from jsonport import load, DeserializationError\nfrom dataclasses import fields\n\ndef load_partial(data, target_class):\n    \"\"\"Load object with only valid fields.\"\"\"\n    result = {}\n\n    for field in fields(target_class):\n        if field.name in data:\n            try:\n                result[field.name] = load(data[field.name], field.type)\n            except DeserializationError:\n                # Skip invalid field\n                continue\n\n    return target_class(**result)\n\n# Usage\ntry:\n    user = load_partial(invalid_data, User)\n    print(f\"Loaded user with {len(user.__dict__)} fields\")\nexcept Exception as e:\n    print(f\"Failed to load even partially: {e}\")\n</code></pre>"},{"location":"api/exceptions/#2-data-cleaning","title":"2. Data Cleaning","text":"<pre><code>def clean_data_for_loading(data, target_class):\n    \"\"\"Clean data to make it compatible with target class.\"\"\"\n    cleaned_data = {}\n\n    for field in fields(target_class):\n        field_name = field.name\n        if field_name in data:\n            value = data[field_name]\n\n            # Handle type conversions\n            if field.type == int and isinstance(value, str):\n                try:\n                    cleaned_data[field_name] = int(value)\n                except ValueError:\n                    continue  # Skip invalid conversion\n\n            elif field.type == float and isinstance(value, str):\n                try:\n                    cleaned_data[field_name] = float(value)\n                except ValueError:\n                    continue\n\n            else:\n                cleaned_data[field_name] = value\n\n    return cleaned_data\n\n# Usage\ncleaned_data = clean_data_for_loading(raw_data, User)\nuser = load(cleaned_data, User)\n</code></pre> <p>This comprehensive guide covers all the exception types in JsonPort, common error scenarios, error handling patterns, debugging tips, and recovery strategies. </p>"},{"location":"api/reference/","title":"API Reference","text":""},{"location":"api/reference/#jsonport","title":"<code>jsonport</code>","text":""},{"location":"api/reference/#jsonport.JsonPortEncoder","title":"<code>JsonPortEncoder</code>","text":"<p>               Bases: <code>JSONEncoder</code></p> <p>Custom encoder for special types with improved performance.</p> Source code in <code>jsonport/core.py</code> <pre><code>class JsonPortEncoder(json.JSONEncoder):\n    \"\"\"Custom encoder for special types with improved performance.\"\"\"\n\n    def default(self, obj: Any) -&gt; Any:\n        \"\"\"\n        Convert special types to JSON-serializable format.\n\n        Args:\n            obj: Object to encode\n\n        Returns:\n            JSON-serializable representation of the object\n        \"\"\"\n        if isinstance(obj, (datetime.datetime, datetime.date, datetime.time)):\n            return obj.isoformat()\n        elif isinstance(obj, Enum):\n            return obj.value\n        elif is_dataclass(obj):\n            return asdict(obj)\n        elif isinstance(obj, set):\n            return list(obj)\n        return str(obj)\n</code></pre>"},{"location":"api/reference/#jsonport.JsonPortEncoder.default","title":"<code>default(obj)</code>","text":"<p>Convert special types to JSON-serializable format.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to encode</p> required <p>Returns:</p> Type Description <code>Any</code> <p>JSON-serializable representation of the object</p> Source code in <code>jsonport/core.py</code> <pre><code>def default(self, obj: Any) -&gt; Any:\n    \"\"\"\n    Convert special types to JSON-serializable format.\n\n    Args:\n        obj: Object to encode\n\n    Returns:\n        JSON-serializable representation of the object\n    \"\"\"\n    if isinstance(obj, (datetime.datetime, datetime.date, datetime.time)):\n        return obj.isoformat()\n    elif isinstance(obj, Enum):\n        return obj.value\n    elif is_dataclass(obj):\n        return asdict(obj)\n    elif isinstance(obj, set):\n        return list(obj)\n    return str(obj)\n</code></pre>"},{"location":"api/reference/#jsonport.JsonPortError","title":"<code>JsonPortError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Custom error for the jsonport library.</p> Source code in <code>jsonport/core.py</code> <pre><code>class JsonPortError(Exception):\n    \"\"\"Custom error for the jsonport library.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/reference/#jsonport.dump","title":"<code>dump(obj)</code>","text":"<p>Serialize a Python object to a JSON-serializable dictionary.</p> <p>This function handles complex Python objects including dataclasses, collections, datetime objects, and enums, converting them to JSON-compatible formats.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to serialize (can be dataclass, list, tuple, set, dict, or primitive)</p> required <p>Returns:</p> Type Description <code>Any</code> <p>JSON-serializable dictionary, list, or primitive value</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class User:\n...     name: str\n...     age: int\n&gt;&gt;&gt; user = User(\"John\", 30)\n&gt;&gt;&gt; dump(user)\n{'name': 'John', 'age': 30}\n</code></pre> Source code in <code>jsonport/core.py</code> <pre><code>def dump(obj: Any) -&gt; Any:\n    \"\"\"\n    Serialize a Python object to a JSON-serializable dictionary.\n\n    This function handles complex Python objects including dataclasses,\n    collections, datetime objects, and enums, converting them to\n    JSON-compatible formats.\n\n    Args:\n        obj: Object to serialize (can be dataclass, list, tuple, set, dict, or primitive)\n\n    Returns:\n        JSON-serializable dictionary, list, or primitive value\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass\n        &gt;&gt;&gt; @dataclass\n        ... class User:\n        ...     name: str\n        ...     age: int\n        &gt;&gt;&gt; user = User(\"John\", 30)\n        &gt;&gt;&gt; dump(user)\n        {'name': 'John', 'age': 30}\n    \"\"\"\n    if is_dataclass(obj):\n        return _serialize_dataclass(obj)\n    elif isinstance(obj, (list, tuple, set)):\n        return [_serialize_value(item) for item in obj]\n    elif isinstance(obj, dict):\n        return {k: _serialize_value(v) for k, v in obj.items()}\n    else:\n        return _serialize_value(obj)\n</code></pre>"},{"location":"api/reference/#jsonport.dump_file","title":"<code>dump_file(obj, path, overwrite=True)</code>","text":"<p>Serialize a Python object and save it to a JSON file.</p> <p>Creates directories if they don't exist and supports both regular JSON and gzipped JSON files (.gz extension).</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to serialize</p> required <code>path</code> <code>str</code> <p>Path to the JSON file</p> required <code>overwrite</code> <code>bool</code> <p>If False, raises error when file already exists</p> <code>True</code> <p>Raises:</p> Type Description <code>JsonPortError</code> <p>If file exists and overwrite=False, or if path is invalid</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class Config:\n...     api_key: str\n...     timeout: int\n&gt;&gt;&gt; config = Config(\"abc123\", 30)\n&gt;&gt;&gt; dump_file(config, \"config.json\")\n&gt;&gt;&gt; dump_file(config, \"config.json.gz\")  # Compressed file\n</code></pre> Source code in <code>jsonport/core.py</code> <pre><code>def dump_file(obj: Any, path: str, overwrite: bool = True) -&gt; None:\n    \"\"\"\n    Serialize a Python object and save it to a JSON file.\n\n    Creates directories if they don't exist and supports both regular JSON\n    and gzipped JSON files (.gz extension).\n\n    Args:\n        obj: Object to serialize\n        path: Path to the JSON file\n        overwrite: If False, raises error when file already exists\n\n    Raises:\n        JsonPortError: If file exists and overwrite=False, or if path is invalid\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass\n        &gt;&gt;&gt; @dataclass\n        ... class Config:\n        ...     api_key: str\n        ...     timeout: int\n        &gt;&gt;&gt; config = Config(\"abc123\", 30)\n        &gt;&gt;&gt; dump_file(config, \"config.json\")\n        &gt;&gt;&gt; dump_file(config, \"config.json.gz\")  # Compressed file\n    \"\"\"\n    data = dump(obj)\n\n    # Create directory if it doesn't exist (only if path has directory)\n    directory = os.path.dirname(path)\n    if directory:\n        os.makedirs(directory, exist_ok=True)\n\n    if not overwrite and os.path.exists(path):\n        raise JsonPortError(f\"File already exists: {path}\")\n\n    if path.endswith(\".gz\"):\n        with gzip.open(path, \"wt\", encoding=\"utf-8\") as f:\n            json.dump(data, f, ensure_ascii=False, indent=2)\n    else:\n        with open(path, \"w\", encoding=\"utf-8\") as f:\n            json.dump(data, f, ensure_ascii=False, indent=2)\n</code></pre>"},{"location":"api/reference/#jsonport.load","title":"<code>load(data, target_class)</code>","text":"<p>Deserialize a JSON dictionary/list to a Python object.</p> <p>This function reconstructs Python objects from JSON data, handling type conversion and nested structures.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Dictionary/list to deserialize</p> required <code>target_class</code> <code>Type[T]</code> <p>Target class for deserialization</p> required <p>Returns:</p> Type Description <code>T</code> <p>Instance of the target class</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class User:\n...     name: str\n...     age: int\n&gt;&gt;&gt; data = {'name': 'John', 'age': 30}\n&gt;&gt;&gt; user = load(data, User)\n&gt;&gt;&gt; user.name\n'John'\n</code></pre> Source code in <code>jsonport/core.py</code> <pre><code>def load(data: Any, target_class: Type[T]) -&gt; T:\n    \"\"\"\n    Deserialize a JSON dictionary/list to a Python object.\n\n    This function reconstructs Python objects from JSON data,\n    handling type conversion and nested structures.\n\n    Args:\n        data: Dictionary/list to deserialize\n        target_class: Target class for deserialization\n\n    Returns:\n        Instance of the target class\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass\n        &gt;&gt;&gt; @dataclass\n        ... class User:\n        ...     name: str\n        ...     age: int\n        &gt;&gt;&gt; data = {'name': 'John', 'age': 30}\n        &gt;&gt;&gt; user = load(data, User)\n        &gt;&gt;&gt; user.name\n        'John'\n    \"\"\"\n    if is_dataclass(target_class):\n        return _deserialize_dataclass(data, target_class)\n    else:\n        return _deserialize_value(data, target_class)\n</code></pre>"},{"location":"api/reference/#jsonport.load_file","title":"<code>load_file(path, target_class)</code>","text":"<p>Load a JSON file (or gzipped JSON) and deserialize to the desired type.</p> <p>Automatically detects gzipped files by .gz extension and handles decompression transparently.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the JSON file</p> required <code>target_class</code> <code>Type[T]</code> <p>Target class for deserialization</p> required <p>Returns:</p> Type Description <code>T</code> <p>Instance of the target class</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file doesn't exist</p> <code>JsonPortError</code> <p>If deserialization fails</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class Config:\n...     api_key: str\n...     timeout: int\n&gt;&gt;&gt; config = load_file(\"config.json\", Config)\n&gt;&gt;&gt; config = load_file(\"config.json.gz\", Config)  # Compressed file\n</code></pre> Source code in <code>jsonport/core.py</code> <pre><code>def load_file(path: str, target_class: Type[T]) -&gt; T:\n    \"\"\"\n    Load a JSON file (or gzipped JSON) and deserialize to the desired type.\n\n    Automatically detects gzipped files by .gz extension and handles\n    decompression transparently.\n\n    Args:\n        path: Path to the JSON file\n        target_class: Target class for deserialization\n\n    Returns:\n        Instance of the target class\n\n    Raises:\n        FileNotFoundError: If the file doesn't exist\n        JsonPortError: If deserialization fails\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass\n        &gt;&gt;&gt; @dataclass\n        ... class Config:\n        ...     api_key: str\n        ...     timeout: int\n        &gt;&gt;&gt; config = load_file(\"config.json\", Config)\n        &gt;&gt;&gt; config = load_file(\"config.json.gz\", Config)  # Compressed file\n    \"\"\"\n    if path.endswith(\".gz\"):\n        with gzip.open(path, \"rt\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n    else:\n        with open(path, \"r\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n\n    return load(data, target_class)\n</code></pre>"},{"location":"api/types/","title":"Types","text":"<p>JsonPort supports a comprehensive set of Python types for serialization and deserialization with full type safety and automatic conversion.</p>"},{"location":"api/types/#basic-types","title":"Basic Types","text":""},{"location":"api/types/#primitive-types","title":"Primitive Types","text":"<p>JsonPort supports all Python primitive types:</p> <pre><code>from jsonport import dump, load\nfrom dataclasses import dataclass\n\n@dataclass\nclass BasicTypes:\n    string_field: str\n    int_field: int\n    float_field: float\n    bool_field: bool\n    none_field: None\n\n# Create object with basic types\nobj = BasicTypes(\n    string_field=\"Hello World\",\n    int_field=42,\n    float_field=3.14,\n    bool_field=True,\n    none_field=None\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"string_field\": \"Hello World\",\n#   \"int_field\": 42,\n#   \"float_field\": 3.14,\n#   \"bool_field\": true,\n#   \"none_field\": null\n# }\n\n# Deserialize\nrestored = load(data, BasicTypes)\nprint(restored.string_field)  # \"Hello World\"\nprint(restored.int_field)  # 42\nprint(restored.float_field)  # 3.14\nprint(restored.bool_field)  # True\nprint(restored.none_field)  # None\n</code></pre>"},{"location":"api/types/#collection-types","title":"Collection Types","text":""},{"location":"api/types/#lists","title":"Lists","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass ListTypes:\n    string_list: List[str]\n    int_list: List[int]\n    mixed_list: List[any]\n    nested_list: List[List[int]]\n\n# Create object with lists\nobj = ListTypes(\n    string_list=[\"apple\", \"banana\", \"cherry\"],\n    int_list=[1, 2, 3, 4, 5],\n    mixed_list=[\"text\", 42, True, None],\n    nested_list=[[1, 2], [3, 4], [5, 6]]\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"string_list\": [\"apple\", \"banana\", \"cherry\"],\n#   \"int_list\": [1, 2, 3, 4, 5],\n#   \"mixed_list\": [\"text\", 42, true, null],\n#   \"nested_list\": [[1, 2], [3, 4], [5, 6]]\n# }\n\n# Deserialize\nrestored = load(data, ListTypes)\nprint(restored.string_list)  # [\"apple\", \"banana\", \"cherry\"]\nprint(restored.nested_list[0])  # [1, 2]\n</code></pre>"},{"location":"api/types/#tuples","title":"Tuples","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Tuple\n\n@dataclass\nclass TupleTypes:\n    simple_tuple: Tuple[int, str]\n    mixed_tuple: Tuple[str, int, bool, float]\n    nested_tuple: Tuple[Tuple[int, int], Tuple[str, str]]\n\n# Create object with tuples\nobj = TupleTypes(\n    simple_tuple=(42, \"answer\"),\n    mixed_tuple=(\"text\", 123, True, 3.14),\n    nested_tuple=((1, 2), (\"a\", \"b\"))\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"simple_tuple\": [42, \"answer\"],\n#   \"mixed_tuple\": [\"text\", 123, true, 3.14],\n#   \"nested_tuple\": [[1, 2], [\"a\", \"b\"]]\n# }\n\n# Deserialize\nrestored = load(data, TupleTypes)\nprint(restored.simple_tuple)  # (42, \"answer\")\nprint(restored.nested_tuple[0])  # (1, 2)\n</code></pre>"},{"location":"api/types/#sets","title":"Sets","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Set\n\n@dataclass\nclass SetTypes:\n    string_set: Set[str]\n    int_set: Set[int]\n    mixed_set: Set[any]\n\n# Create object with sets\nobj = SetTypes(\n    string_set={\"apple\", \"banana\", \"cherry\"},\n    int_set={1, 2, 3, 4, 5},\n    mixed_set={\"text\", 42, True}\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"string_set\": [\"apple\", \"banana\", \"cherry\"],\n#   \"int_set\": [1, 2, 3, 4, 5],\n#   \"mixed_set\": [\"text\", 42, true]\n# }\n\n# Deserialize\nrestored = load(data, SetTypes)\nprint(restored.string_set)  # {\"apple\", \"banana\", \"cherry\"}\nprint(42 in restored.mixed_set)  # True\n</code></pre>"},{"location":"api/types/#dictionaries","title":"Dictionaries","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Dict, Any\n\n@dataclass\nclass DictTypes:\n    string_dict: Dict[str, str]\n    mixed_dict: Dict[str, Any]\n    nested_dict: Dict[str, Dict[str, int]]\n\n# Create object with dictionaries\nobj = DictTypes(\n    string_dict={\"name\": \"John\", \"city\": \"New York\"},\n    mixed_dict={\"count\": 42, \"active\": True, \"score\": 95.5},\n    nested_dict={\n        \"group1\": {\"a\": 1, \"b\": 2},\n        \"group2\": {\"x\": 10, \"y\": 20}\n    }\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"string_dict\": {\n#     \"name\": \"John\",\n#     \"city\": \"New York\"\n#   },\n#   \"mixed_dict\": {\n#     \"count\": 42,\n#     \"active\": true,\n#     \"score\": 95.5\n#   },\n#   \"nested_dict\": {\n#     \"group1\": {\"a\": 1, \"b\": 2},\n#     \"group2\": {\"x\": 10, \"y\": 20}\n#   }\n# }\n\n# Deserialize\nrestored = load(data, DictTypes)\nprint(restored.string_dict[\"name\"])  # \"John\"\nprint(restored.nested_dict[\"group1\"][\"a\"])  # 1\n</code></pre>"},{"location":"api/types/#datetime-types","title":"Datetime Types","text":""},{"location":"api/types/#datetime-objects","title":"DateTime Objects","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime, date, time\n\n@dataclass\nclass DateTimeTypes:\n    datetime_field: datetime\n    date_field: date\n    time_field: time\n    optional_datetime: datetime = None\n\n# Create object with datetime types\nobj = DateTimeTypes(\n    datetime_field=datetime(2025, 1, 14, 10, 30, 0),\n    date_field=date(2025, 1, 14),\n    time_field=time(10, 30, 0)\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"datetime_field\": \"2025-01-14T10:30:00\",\n#   \"date_field\": \"2025-01-14\",\n#   \"time_field\": \"10:30:00\",\n#   \"optional_datetime\": null\n# }\n\n# Deserialize\nrestored = load(data, DateTimeTypes)\nprint(restored.datetime_field)  # 2025-01-14 10:30:00\nprint(restored.date_field)  # 2025-01-14\nprint(restored.time_field)  # 10:30:00\n</code></pre>"},{"location":"api/types/#timezone-aware-datetime","title":"Timezone-Aware DateTime","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nimport pytz\n\n@dataclass\nclass TimezoneTypes:\n    utc_datetime: datetime\n    local_datetime: datetime\n\n# Create timezone-aware datetimes\nutc_tz = pytz.UTC\nlocal_tz = pytz.timezone('America/New_York')\n\nobj = TimezoneTypes(\n    utc_datetime=datetime(2025, 1, 14, 15, 0, 0, tzinfo=utc_tz),\n    local_datetime=local_tz.localize(datetime(2025, 1, 14, 10, 0, 0))\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"utc_datetime\": \"2025-01-14T15:00:00+00:00\",\n#   \"local_datetime\": \"2025-01-14T10:00:00-05:00\"\n# }\n\n# Deserialize\nrestored = load(data, TimezoneTypes)\nprint(restored.utc_datetime.tzinfo)  # UTC\nprint(restored.local_datetime.tzinfo)  # America/New_York\n</code></pre>"},{"location":"api/types/#enum-types","title":"Enum Types","text":""},{"location":"api/types/#basic-enums","title":"Basic Enums","text":"<pre><code>from dataclasses import dataclass\nfrom enum import Enum\n\nclass Status(Enum):\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n    PENDING = \"pending\"\n\nclass Priority(Enum):\n    LOW = 1\n    MEDIUM = 2\n    HIGH = 3\n\n@dataclass\nclass EnumTypes:\n    status: Status\n    priority: Priority\n    optional_status: Status = None\n\n# Create object with enums\nobj = EnumTypes(\n    status=Status.ACTIVE,\n    priority=Priority.HIGH\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"status\": \"active\",\n#   \"priority\": 3,\n#   \"optional_status\": null\n# }\n\n# Deserialize\nrestored = load(data, EnumTypes)\nprint(restored.status)  # Status.ACTIVE\nprint(restored.priority)  # Priority.HIGH\n</code></pre>"},{"location":"api/types/#intenum","title":"IntEnum","text":"<pre><code>from dataclasses import dataclass\nfrom enum import IntEnum\n\nclass StatusCode(IntEnum):\n    OK = 200\n    CREATED = 201\n    BAD_REQUEST = 400\n    NOT_FOUND = 404\n    INTERNAL_ERROR = 500\n\n@dataclass\nclass StatusCodeTypes:\n    code: StatusCode\n    message: str\n\n# Create object with IntEnum\nobj = StatusCodeTypes(\n    code=StatusCode.OK,\n    message=\"Success\"\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"code\": 200,\n#   \"message\": \"Success\"\n# }\n\n# Deserialize\nrestored = load(data, StatusCodeTypes)\nprint(restored.code)  # StatusCode.OK\nprint(restored.code.value)  # 200\n</code></pre>"},{"location":"api/types/#optional-types","title":"Optional Types","text":""},{"location":"api/types/#optional-fields","title":"Optional Fields","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Optional, List, Dict\n\n@dataclass\nclass OptionalTypes:\n    required_field: str\n    optional_string: Optional[str] = None\n    optional_int: Optional[int] = None\n    optional_list: Optional[List[str]] = None\n    optional_dict: Optional[Dict[str, any]] = None\n\n# Create object with optional fields\nobj1 = OptionalTypes(\"required\")\nobj2 = OptionalTypes(\n    \"required\",\n    optional_string=\"optional\",\n    optional_int=42,\n    optional_list=[\"item1\", \"item2\"],\n    optional_dict={\"key\": \"value\"}\n)\n\n# Serialize\ndata1 = dump(obj1)\ndata2 = dump(obj2)\nprint(data1)\n# Output:\n# {\n#   \"required_field\": \"required\",\n#   \"optional_string\": null,\n#   \"optional_int\": null,\n#   \"optional_list\": null,\n#   \"optional_dict\": null\n# }\n\nprint(data2)\n# Output:\n# {\n#   \"required_field\": \"required\",\n#   \"optional_string\": \"optional\",\n#   \"optional_int\": 42,\n#   \"optional_list\": [\"item1\", \"item2\"],\n#   \"optional_dict\": {\"key\": \"value\"}\n# }\n\n# Deserialize\nrestored1 = load(data1, OptionalTypes)\nrestored2 = load(data2, OptionalTypes)\nprint(restored1.optional_string)  # None\nprint(restored2.optional_string)  # \"optional\"\n</code></pre>"},{"location":"api/types/#union-types","title":"Union Types","text":""},{"location":"api/types/#union-with-multiple-types","title":"Union with Multiple Types","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Union, List\n\n# Define union types\nStringOrInt = Union[str, int]\nStringOrNone = Union[str, None]\nFlexibleType = Union[str, int, float, bool, None]\n\n@dataclass\nclass UnionTypes:\n    string_or_int: StringOrInt\n    string_or_none: StringOrNone\n    flexible_field: FlexibleType\n    union_list: List[StringOrInt]\n\n# Create object with union types\nobj = UnionTypes(\n    string_or_int=42,\n    string_or_none=\"text\",\n    flexible_field=True,\n    union_list=[\"text\", 123, \"another\", 456]\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"string_or_int\": 42,\n#   \"string_or_none\": \"text\",\n#   \"flexible_field\": true,\n#   \"union_list\": [\"text\", 123, \"another\", 456]\n# }\n\n# Deserialize\nrestored = load(data, UnionTypes)\nprint(type(restored.string_or_int))  # &lt;class 'int'&gt;\nprint(restored.flexible_field)  # True\nprint(restored.union_list[1])  # 123\n</code></pre>"},{"location":"api/types/#newtype-aliases","title":"NewType Aliases","text":""},{"location":"api/types/#type-safe-aliases","title":"Type-Safe Aliases","text":"<pre><code>from dataclasses import dataclass\nfrom typing import NewType, List\n\n# Define NewType aliases\nUserId = NewType('UserId', int)\nEmail = NewType('Email', str)\nUsername = NewType('Username', str)\n\n@dataclass\nclass NewTypeTypes:\n    user_id: UserId\n    email: Email\n    username: Username\n    user_ids: List[UserId]\n\n# Create object with NewType aliases\nobj = NewTypeTypes(\n    user_id=UserId(1),\n    email=Email(\"john@example.com\"),\n    username=Username(\"john_doe\"),\n    user_ids=[UserId(1), UserId(2), UserId(3)]\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"user_id\": 1,\n#   \"email\": \"john@example.com\",\n#   \"username\": \"john_doe\",\n#   \"user_ids\": [1, 2, 3]\n# }\n\n# Deserialize\nrestored = load(data, NewTypeTypes)\nprint(restored.user_id)  # 1 (type: int, but semantically UserId)\nprint(restored.email)  # \"john@example.com\"\n</code></pre>"},{"location":"api/types/#literal-types","title":"Literal Types","text":""},{"location":"api/types/#string-literals","title":"String Literals","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Literal\n\n# Define literal types\nStatus = Literal[\"active\", \"inactive\", \"pending\"]\nEnvironment = Literal[\"development\", \"staging\", \"production\"]\nLogLevel = Literal[\"debug\", \"info\", \"warning\", \"error\"]\n\n@dataclass\nclass LiteralTypes:\n    status: Status\n    environment: Environment\n    log_level: LogLevel\n\n# Create object with literal types\nobj = LiteralTypes(\n    status=\"active\",\n    environment=\"development\",\n    log_level=\"debug\"\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"status\": \"active\",\n#   \"environment\": \"development\",\n#   \"log_level\": \"debug\"\n# }\n\n# Deserialize\nrestored = load(data, LiteralTypes)\nprint(restored.status)  # \"active\"\nprint(restored.environment)  # \"development\"\n</code></pre>"},{"location":"api/types/#generic-types","title":"Generic Types","text":""},{"location":"api/types/#generic-containers","title":"Generic Containers","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Generic, TypeVar, List, Dict\n\n# Define type variables\nT = TypeVar('T')\nK = TypeVar('K')\nV = TypeVar('V')\n\n@dataclass\nclass Container(Generic[T]):\n    data: T\n    metadata: Dict[str, str]\n\n@dataclass\nclass KeyValuePair(Generic[K, V]):\n    key: K\n    value: V\n\n@dataclass\nclass DataCollection(Generic[T]):\n    items: List[T]\n    total: int\n\n# Create generic objects\nstring_container = Container(\"Hello\", {\"type\": \"string\"})\nint_container = Container(42, {\"type\": \"integer\"})\nkv_pair = KeyValuePair(\"name\", \"John\")\ncollection = DataCollection([1, 2, 3, 4, 5], 5)\n\n# Serialize\nstring_data = dump(string_container)\nint_data = dump(int_container)\nkv_data = dump(kv_pair)\ncollection_data = dump(collection)\n\nprint(string_data)\n# Output:\n# {\n#   \"data\": \"Hello\",\n#   \"metadata\": {\"type\": \"string\"}\n# }\n\nprint(kv_data)\n# Output:\n# {\n#   \"key\": \"name\",\n#   \"value\": \"John\"\n# }\n\n# Deserialize\nrestored_string = load(string_data, Container[str])\nrestored_kv = load(kv_data, KeyValuePair)\nrestored_collection = load(collection_data, DataCollection[int])\n\nprint(restored_string.data)  # \"Hello\"\nprint(restored_kv.key)  # \"name\"\nprint(restored_collection.total)  # 5\n</code></pre>"},{"location":"api/types/#complex-nested-types","title":"Complex Nested Types","text":""},{"location":"api/types/#mixed-type-structures","title":"Mixed Type Structures","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict, Optional, Union\nfrom datetime import datetime\nfrom enum import Enum\n\nclass Status(Enum):\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n\n# Complex union type\nValueType = Union[str, int, float, bool, None]\n\n@dataclass\nclass ComplexTypes:\n    # Basic types\n    name: str\n    count: int\n    is_valid: bool\n\n    # Collections\n    tags: List[str]\n    metadata: Dict[str, ValueType]\n\n    # Optional fields\n    description: Optional[str] = None\n    created_at: Optional[datetime] = None\n\n    # Enum\n    status: Status = Status.ACTIVE\n\n    # Nested structures\n    nested_data: Optional[Dict[str, List[Dict[str, any]]]] = None\n\n# Create complex object\nobj = ComplexTypes(\n    name=\"Complex Object\",\n    count=42,\n    is_valid=True,\n    tags=[\"python\", \"json\", \"complex\"],\n    metadata={\n        \"version\": \"1.0\",\n        \"score\": 95.5,\n        \"enabled\": True,\n        \"description\": None\n    },\n    description=\"A complex type example\",\n    created_at=datetime.now(),\n    nested_data={\n        \"group1\": [\n            {\"id\": 1, \"value\": \"A\"},\n            {\"id\": 2, \"value\": \"B\"}\n        ],\n        \"group2\": [\n            {\"id\": 3, \"value\": \"C\"}\n        ]\n    }\n)\n\n# Serialize\ndata = dump(obj)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Complex Object\",\n#   \"count\": 42,\n#   \"is_valid\": true,\n#   \"tags\": [\"python\", \"json\", \"complex\"],\n#   \"metadata\": {\n#     \"version\": \"1.0\",\n#     \"score\": 95.5,\n#     \"enabled\": true,\n#     \"description\": null\n#   },\n#   \"description\": \"A complex type example\",\n#   \"created_at\": \"2025-01-14T10:30:00\",\n#   \"status\": \"active\",\n#   \"nested_data\": {\n#     \"group1\": [\n#       {\"id\": 1, \"value\": \"A\"},\n#       {\"id\": 2, \"value\": \"B\"}\n#     ],\n#     \"group2\": [\n#       {\"id\": 3, \"value\": \"C\"}\n#     ]\n#   }\n# }\n\n# Deserialize\nrestored = load(data, ComplexTypes)\nprint(restored.name)  # \"Complex Object\"\nprint(restored.status)  # Status.ACTIVE\nprint(restored.nested_data[\"group1\"][0][\"value\"])  # \"A\"\n</code></pre>"},{"location":"api/types/#type-validation","title":"Type Validation","text":""},{"location":"api/types/#type-checking","title":"Type Checking","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict\nfrom jsonport import load, DeserializationError\n\n@dataclass\nclass ValidationTest:\n    name: str\n    age: int\n    scores: List[float]\n    metadata: Dict[str, str]\n\n# Valid data\nvalid_data = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"scores\": [95.5, 87.2, 92.1],\n    \"metadata\": {\"department\": \"engineering\"}\n}\n\n# Invalid data (wrong types)\ninvalid_data = {\n    \"name\": \"John\",\n    \"age\": \"thirty\",  # Should be int\n    \"scores\": [95.5, 87.2, 92.1],\n    \"metadata\": {\"department\": \"engineering\"}\n}\n\n# Load valid data\ntry:\n    valid_obj = load(valid_data, ValidationTest)\n    print(\"Valid data loaded successfully\")\nexcept DeserializationError as e:\n    print(f\"Error loading valid data: {e}\")\n\n# Load invalid data\ntry:\n    invalid_obj = load(invalid_data, ValidationTest)\nexcept DeserializationError as e:\n    print(f\"Error loading invalid data: {e}\")\n    # Output: Error loading invalid data: Cannot deserialize 'thirty' to int\n</code></pre> <p>This comprehensive guide covers all the types supported by JsonPort, including basic types, collections, datetime objects, enums, optional types, union types, and complex nested structures. </p>"},{"location":"development/benchmarking/","title":"Benchmarking","text":"<p>Learn how to measure and optimize JsonPort performance.</p>"},{"location":"development/benchmarking/#how-to-run-benchmarks","title":"How to Run Benchmarks","text":""},{"location":"development/benchmarking/#running-benchmarks-with-pytest-benchmark","title":"Running benchmarks with pytest-benchmark","text":"<pre><code>pytest --benchmark-only -v\n</code></pre>"},{"location":"development/benchmarking/#running-specific-benchmarks","title":"Running specific benchmarks","text":"<pre><code>pytest --benchmark-only tests/test_jsonport.py::test_serialization_benchmark -v\n</code></pre>"},{"location":"development/benchmarking/#benchmark-examples","title":"Benchmark Examples","text":""},{"location":"development/benchmarking/#serialization-benchmark","title":"Serialization Benchmark","text":"<pre><code>import pytest\nfrom dataclasses import dataclass\nfrom jsonport import dump\n\n@dataclass\nclass BenchmarkData:\n    id: int\n    name: str\n    values: list[float]\n    metadata: dict[str, str]\n\n@pytest.mark.slow\ndef test_serialization_benchmark(benchmark):\n    test_data = BenchmarkData(\n        id=1,\n        name=\"test\",\n        values=[1.1, 2.2, 3.3] * 1000,\n        metadata={\"key1\": \"value1\", \"key2\": \"value2\"}\n    )\n    result = benchmark(dump, test_data)\n    assert isinstance(result, dict)\n</code></pre>"},{"location":"development/benchmarking/#deserialization-benchmark","title":"Deserialization Benchmark","text":"<pre><code>@pytest.mark.slow\ndef test_deserialization_benchmark(benchmark):\n    test_data = BenchmarkData(\n        id=1,\n        name=\"test\",\n        values=[1.1, 2.2, 3.3] * 1000,\n        metadata={\"key1\": \"value1\", \"key2\": \"value2\"}\n    )\n    data = dump(test_data)\n    result = benchmark(load, data, BenchmarkData)\n    assert isinstance(result, BenchmarkData)\n</code></pre>"},{"location":"development/benchmarking/#file-operations-benchmark","title":"File Operations Benchmark","text":"<pre><code>import tempfile\nimport os\n\n@pytest.mark.slow\ndef test_file_operations_benchmark(benchmark):\n    test_data = BenchmarkData(\n        id=1,\n        name=\"test\",\n        values=[1.1, 2.2, 3.3] * 100,\n        metadata={\"key1\": \"value1\", \"key2\": \"value2\"}\n    )\n    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:\n        temp_file = f.name\n    try:\n        benchmark(dump_file, test_data, temp_file)\n        benchmark(load_file, temp_file, BenchmarkData)\n    finally:\n        if os.path.exists(temp_file):\n            os.unlink(temp_file)\n</code></pre>"},{"location":"development/benchmarking/#interpreting-results","title":"Interpreting Results","text":"<pre><code>--------------------------------------------------------------------------------------------- benchmark: 2 tests -----------------------------------------------------------------------------\nName (time in us)                       Min                 Max                Mean             StdDev              Median                IQR            Outliers  OPS (Kops/s)            Rounds  Iterations\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_deserialization_benchmark     110.3460 (1.0)      263.2940 (1.0)      120.8443 (1.0)      12.3452 (1.0)      118.4470 (1.0)       6.0770 (1.0)       386;464        8.2751 (1.0)        6829           1\ntest_serialization_benchmark       251.4210 (2.28)     522.7470 (1.99)     270.2584 (2.24)     16.9108 (1.37)     266.3670 (2.25)     12.2920 (2.02)      218;161        3.7002 (0.45)       2499           1\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n</code></pre> <ul> <li>OPS: operations per second (higher is better)</li> <li>Mean: average time per operation</li> <li>StdDev: variation in times</li> <li>Outliers: runs outside the normal range</li> </ul>"},{"location":"development/benchmarking/#benchmarking-tips","title":"Benchmarking Tips","text":"<ul> <li>Always run benchmarks on the same hardware for fair comparison</li> <li>Use multiple runs for more reliable results</li> <li>Compare with other methods (e.g., <code>json</code>, <code>pickle</code>) to evaluate gains</li> </ul>"},{"location":"development/benchmarking/#next-steps","title":"Next Steps","text":"<ul> <li>Testing - How to run and write tests</li> <li>Contributing - How to contribute to the project</li> <li>Performance - Performance optimization techniques </li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>We welcome contributions to JsonPort! This guide will help you get started.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7 or higher</li> <li>Git</li> <li>pip</li> </ul>"},{"location":"development/contributing/#setup-development-environment","title":"Setup Development Environment","text":"<ol> <li> <p>Fork the repository <pre><code># Fork on GitHub, then clone your fork\ngit clone https://github.com/YOUR_USERNAME/JsonPort.git\ncd JsonPort\n</code></pre></p> </li> <li> <p>Install in development mode <pre><code>pip install -e \".[dev,test,docs]\"\n</code></pre></p> </li> <li> <p>Verify installation <pre><code>python -c \"import jsonport; print(jsonport.__version__)\"\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#1-create-a-feature-branch","title":"1. Create a Feature Branch","text":"<pre><code>git checkout -b feature/amazing-feature\n</code></pre>"},{"location":"development/contributing/#2-make-your-changes","title":"2. Make Your Changes","text":"<ul> <li>Write your code</li> <li>Add tests for new functionality</li> <li>Update documentation if needed</li> </ul>"},{"location":"development/contributing/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Run all tests\npytest -v\n\n# Run with coverage\npytest --cov=jsonport\n\n# Run specific test file\npytest tests/test_specific.py -v\n</code></pre>"},{"location":"development/contributing/#4-check-code-quality","title":"4. Check Code Quality","text":"<pre><code># Format code\nblack jsonport/ tests/\n\n# Check code style\nflake8 jsonport/ tests/ --max-line-length=88 --extend-ignore=E203,W503,E501,F401,F811,F841,E731\n\n# Type checking\nmypy jsonport/\n</code></pre>"},{"location":"development/contributing/#5-commit-your-changes","title":"5. Commit Your Changes","text":"<pre><code>git add .\ngit commit -m \"Add amazing feature\"\n</code></pre>"},{"location":"development/contributing/#6-push-and-create-pull-request","title":"6. Push and Create Pull Request","text":"<pre><code>git push origin feature/amazing-feature\n# Create PR on GitHub\n</code></pre>"},{"location":"development/contributing/#code-style","title":"Code Style","text":""},{"location":"development/contributing/#python-code","title":"Python Code","text":"<p>We follow these style guidelines:</p> <ul> <li>Black: Code formatting (line length: 88)</li> <li>Flake8: Code linting</li> <li>MyPy: Type checking</li> <li>Type hints: Required for all functions</li> </ul>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<ul> <li>Docstrings: Use Google style docstrings</li> <li>README: Keep updated with new features</li> <li>Examples: Add examples for new functionality</li> </ul>"},{"location":"development/contributing/#commit-messages","title":"Commit Messages","text":"<p>Use conventional commit format:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Examples: <pre><code>feat(core): add support for custom encoders\nfix(serialization): handle None values in collections\ndocs(api): update function documentation\ntest(core): add tests for edge cases\n</code></pre></p>"},{"location":"development/contributing/#testing","title":"Testing","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># All tests\npytest -v\n\n# With coverage\npytest --cov=jsonport --cov-report=html\n\n# Only unit tests\npytest -m \"not slow and not integration\" -v\n\n# Only performance tests\npytest -m slow -v\n\n# Only integration tests\npytest -m integration -v\n</code></pre>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":"<ol> <li>Test file naming: <code>test_*.py</code></li> <li>Test function naming: <code>test_*</code></li> <li>Test class naming: <code>Test*</code></li> </ol> <p>Example test:</p> <pre><code>import pytest\nfrom jsonport import dump, load\nfrom dataclasses import dataclass\n\n@dataclass\nclass TestUser:\n    name: str\n    age: int\n\ndef test_basic_serialization():\n    user = TestUser(\"John\", 30)\n    data = dump(user)\n    assert data[\"name\"] == \"John\"\n    assert data[\"age\"] == 30\n\ndef test_basic_deserialization():\n    data = {\"name\": \"John\", \"age\": 30}\n    user = load(data, TestUser)\n    assert user.name == \"John\"\n    assert user.age == 30\n</code></pre>"},{"location":"development/contributing/#test-categories","title":"Test Categories","text":"<ul> <li>Unit tests: Test individual functions</li> <li>Integration tests: Test complete workflows</li> <li>Performance tests: Benchmark critical operations</li> </ul>"},{"location":"development/contributing/#documentation_1","title":"Documentation","text":""},{"location":"development/contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Build docs\nmkdocs build\n\n# Serve docs locally\nmkdocs serve\n</code></pre>"},{"location":"development/contributing/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>User Guide: How to use JsonPort</li> <li>Examples: Practical examples</li> <li>API Reference: Complete API documentation</li> <li>Development: Contributing and development guides</li> </ul>"},{"location":"development/contributing/#performance","title":"Performance","text":""},{"location":"development/contributing/#benchmarks","title":"Benchmarks","text":"<p>Run performance benchmarks:</p> <pre><code>pytest --benchmark-only -v\n</code></pre>"},{"location":"development/contributing/#performance-guidelines","title":"Performance Guidelines","text":"<ul> <li>Caching: Leverage JsonPort's built-in caching</li> <li>Type hints: Always use type hints for optimal performance</li> <li>Batch operations: Process multiple objects together</li> </ul>"},{"location":"development/contributing/#release-process","title":"Release Process","text":""},{"location":"development/contributing/#version-management","title":"Version Management","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update changelog in <code>CHANGELOG.md</code></li> <li>Create release on GitHub</li> <li>Publish to PyPI</li> </ol>"},{"location":"development/contributing/#release-checklist","title":"Release Checklist","text":"<ul> <li> All tests pass</li> <li> Documentation is updated</li> <li> Changelog is updated</li> <li> Version is bumped</li> <li> Release notes are written</li> </ul>"},{"location":"development/contributing/#issue-reporting","title":"Issue Reporting","text":""},{"location":"development/contributing/#bug-reports","title":"Bug Reports","text":"<p>When reporting bugs, include:</p> <ol> <li>Python version</li> <li>JsonPort version</li> <li>Operating system</li> <li>Minimal reproduction code</li> <li>Expected vs actual behavior</li> </ol>"},{"location":"development/contributing/#feature-requests","title":"Feature Requests","text":"<p>When requesting features, include:</p> <ol> <li>Use case description</li> <li>Expected API</li> <li>Benefits</li> <li>Implementation suggestions (if any)</li> </ol>"},{"location":"development/contributing/#code-review","title":"Code Review","text":""},{"location":"development/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass</li> <li>Code review by maintainers</li> <li>Tests must be included</li> <li>Documentation must be updated</li> </ol>"},{"location":"development/contributing/#review-guidelines","title":"Review Guidelines","text":"<ul> <li>Functionality: Does it work as expected?</li> <li>Performance: Is it efficient?</li> <li>Maintainability: Is the code clean and readable?</li> <li>Testing: Are there adequate tests?</li> <li>Documentation: Is it well documented?</li> </ul>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#questions-and-discussion","title":"Questions and Discussion","text":"<ul> <li>GitHub Issues: For bugs and feature requests</li> <li>GitHub Discussions: For questions and general discussion</li> </ul>"},{"location":"development/contributing/#resources","title":"Resources","text":"<ul> <li>Documentation: https://luan1schons.github.io/JsonPort/</li> <li>Source Code: https://github.com/Luan1Schons/JsonPort</li> <li>PyPI: https://pypi.org/project/jsonport/</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>Contributors will be recognized in:</p> <ul> <li>README.md: Major contributors</li> <li>CHANGELOG.md: All contributors</li> <li>GitHub: Commit history and PRs</li> </ul> <p>Thank you for contributing to JsonPort! \ud83d\ude80 </p>"},{"location":"development/testing/","title":"Testing","text":"<p>Learn how to run and write tests for JsonPort.</p>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\npytest\n\n# Run with verbose output\npytest -v\n\n# Run with coverage\npytest --cov=jsonport\n\n# Run specific test file\npytest tests/test_jsonport.py -v\n\n# Run specific test function\npytest tests/test_jsonport.py::test_basic_serialization -v\n</code></pre>"},{"location":"development/testing/#test-categories","title":"Test Categories","text":"<pre><code># Run only unit tests (fast)\npytest -m \"not slow and not integration\" -v\n\n# Run only performance tests\npytest -m slow -v\n\n# Run only integration tests\npytest -m integration -v\n\n# Run all tests except performance\npytest -m \"not slow\" -v\n</code></pre>"},{"location":"development/testing/#coverage-reports","title":"Coverage Reports","text":"<pre><code># Terminal coverage report\npytest --cov=jsonport --cov-report=term-missing\n\n# HTML coverage report\npytest --cov=jsonport --cov-report=html\n\n# XML coverage report (for CI)\npytest --cov=jsonport --cov-report=xml\n</code></pre>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":""},{"location":"development/testing/#test-files","title":"Test Files","text":"<p>Tests are organized in the <code>tests/</code> directory:</p> <pre><code>tests/\n\u251c\u2500\u2500 test_jsonport.py      # Main test file\n\u251c\u2500\u2500 conftest.py           # Pytest configuration\n\u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"development/testing/#test-naming-convention","title":"Test Naming Convention","text":"<ul> <li>Test files: <code>test_*.py</code></li> <li>Test functions: <code>test_*</code></li> <li>Test classes: <code>Test*</code></li> </ul>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#basic-test-example","title":"Basic Test Example","text":"<pre><code>import pytest\nfrom jsonport import dump, load\nfrom dataclasses import dataclass\n\n@dataclass\nclass TestUser:\n    name: str\n    age: int\n\ndef test_basic_serialization():\n    \"\"\"Test basic object serialization.\"\"\"\n    user = TestUser(\"John\", 30)\n    data = dump(user)\n\n    assert data[\"name\"] == \"John\"\n    assert data[\"age\"] == 30\n    assert isinstance(data, dict)\n\ndef test_basic_deserialization():\n    \"\"\"Test basic object deserialization.\"\"\"\n    data = {\"name\": \"John\", \"age\": 30}\n    user = load(data, TestUser)\n\n    assert user.name == \"John\"\n    assert user.age == 30\n    assert isinstance(user, TestUser)\n</code></pre>"},{"location":"development/testing/#test-with-fixtures","title":"Test with Fixtures","text":"<pre><code>import pytest\nfrom dataclasses import dataclass\n\n@dataclass\nclass TestProduct:\n    id: int\n    name: str\n    price: float\n\n@pytest.fixture\ndef sample_product():\n    \"\"\"Provide a sample product for testing.\"\"\"\n    return TestProduct(1, \"Laptop\", 999.99)\n\n@pytest.fixture\ndef sample_product_data():\n    \"\"\"Provide sample product data for testing.\"\"\"\n    return {\"id\": 1, \"name\": \"Laptop\", \"price\": 999.99}\n\ndef test_product_serialization(sample_product):\n    \"\"\"Test product serialization using fixture.\"\"\"\n    data = dump(sample_product)\n\n    assert data[\"id\"] == 1\n    assert data[\"name\"] == \"Laptop\"\n    assert data[\"price\"] == 999.99\n\ndef test_product_deserialization(sample_product_data):\n    \"\"\"Test product deserialization using fixture.\"\"\"\n    product = load(sample_product_data, TestProduct)\n\n    assert product.id == 1\n    assert product.name == \"Laptop\"\n    assert product.price == 999.99\n</code></pre>"},{"location":"development/testing/#test-with-parameters","title":"Test with Parameters","text":"<pre><code>import pytest\nfrom datetime import datetime, date\n\n@pytest.mark.parametrize(\"input_date,expected_str\", [\n    (date(2024, 1, 1), \"2024-01-01\"),\n    (date(2023, 12, 31), \"2023-12-31\"),\n    (date(2020, 2, 29), \"2020-02-29\"),  # Leap year\n])\ndef test_date_serialization(input_date, expected_str):\n    \"\"\"Test date serialization with different inputs.\"\"\"\n    data = dump(input_date)\n    assert data == expected_str\n\n@pytest.mark.parametrize(\"input_datetime,expected_str\", [\n    (datetime(2024, 1, 1, 12, 0, 0), \"2024-01-01T12:00:00\"),\n    (datetime(2024, 1, 1, 0, 0, 0), \"2024-01-01T00:00:00\"),\n    (datetime(2024, 1, 1, 23, 59, 59), \"2024-01-01T23:59:59\"),\n])\ndef test_datetime_serialization(input_datetime, expected_str):\n    \"\"\"Test datetime serialization with different inputs.\"\"\"\n    data = dump(input_datetime)\n    assert data == expected_str\n</code></pre>"},{"location":"development/testing/#test-error-cases","title":"Test Error Cases","text":"<pre><code>import pytest\nfrom jsonport import JsonPortError\n\ndef test_invalid_type_serialization():\n    \"\"\"Test serialization of unsupported types.\"\"\"\n    unsupported_object = lambda x: x  # Function objects are not serializable\n\n    with pytest.raises(JsonPortError):\n        dump(unsupported_object)\n\ndef test_invalid_data_deserialization():\n    \"\"\"Test deserialization of invalid data.\"\"\"\n    invalid_data = {\"name\": \"John\", \"age\": \"invalid_age\"}  # age should be int\n\n    with pytest.raises(JsonPortError):\n        load(invalid_data, TestUser)\n\ndef test_missing_field_deserialization():\n    \"\"\"Test deserialization with missing required fields.\"\"\"\n    incomplete_data = {\"name\": \"John\"}  # missing age field\n\n    with pytest.raises(JsonPortError):\n        load(incomplete_data, TestUser)\n</code></pre>"},{"location":"development/testing/#test-file-operations","title":"Test File Operations","text":"<pre><code>import pytest\nimport tempfile\nimport os\nfrom jsonport import dump_file, load_file\n\ndef test_file_operations():\n    \"\"\"Test saving and loading objects to/from files.\"\"\"\n    user = TestUser(\"John\", 30)\n\n    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:\n        temp_file = f.name\n\n    try:\n        # Save to file\n        dump_file(user, temp_file)\n\n        # Verify file exists and has content\n        assert os.path.exists(temp_file)\n        assert os.path.getsize(temp_file) &gt; 0\n\n        # Load from file\n        loaded_user = load_file(temp_file, TestUser)\n\n        # Verify data integrity\n        assert loaded_user.name == user.name\n        assert loaded_user.age == user.age\n        assert isinstance(loaded_user, TestUser)\n\n    finally:\n        # Clean up\n        if os.path.exists(temp_file):\n            os.unlink(temp_file)\n\ndef test_compressed_file_operations():\n    \"\"\"Test saving and loading compressed files.\"\"\"\n    user = TestUser(\"John\", 30)\n\n    with tempfile.NamedTemporaryFile(mode='w', suffix='.json.gz', delete=False) as f:\n        temp_file = f.name\n\n    try:\n        # Save compressed file\n        dump_file(user, temp_file)\n\n        # Verify file exists and is compressed\n        assert os.path.exists(temp_file)\n\n        # Load compressed file\n        loaded_user = load_file(temp_file, TestUser)\n\n        # Verify data integrity\n        assert loaded_user.name == user.name\n        assert loaded_user.age == user.age\n\n    finally:\n        # Clean up\n        if os.path.exists(temp_file):\n            os.unlink(temp_file)\n</code></pre>"},{"location":"development/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"development/testing/#benchmark-tests","title":"Benchmark Tests","text":"<pre><code>import pytest\nimport time\nfrom dataclasses import dataclass\n\n@dataclass\nclass BenchmarkData:\n    id: int\n    name: str\n    values: list[float]\n    metadata: dict[str, str]\n\n@pytest.mark.slow\ndef test_serialization_benchmark(benchmark):\n    \"\"\"Benchmark serialization performance.\"\"\"\n    test_data = BenchmarkData(\n        id=1,\n        name=\"test\",\n        values=[1.1, 2.2, 3.3] * 1000,\n        metadata={\"key1\": \"value1\", \"key2\": \"value2\"}\n    )\n\n    result = benchmark(dump, test_data)\n    assert isinstance(result, dict)\n\n@pytest.mark.slow\ndef test_deserialization_benchmark(benchmark):\n    \"\"\"Benchmark deserialization performance.\"\"\"\n    test_data = BenchmarkData(\n        id=1,\n        name=\"test\",\n        values=[1.1, 2.2, 3.3] * 1000,\n        metadata={\"key1\": \"value1\", \"key2\": \"value2\"}\n    )\n\n    data = dump(test_data)\n    result = benchmark(load, data, BenchmarkData)\n    assert isinstance(result, BenchmarkData)\n</code></pre>"},{"location":"development/testing/#memory-tests","title":"Memory Tests","text":"<pre><code>import pytest\nimport psutil\nimport os\n\n@pytest.mark.slow\ndef test_memory_usage():\n    \"\"\"Test memory usage during large operations.\"\"\"\n    process = psutil.Process(os.getpid())\n    initial_memory = process.memory_info().rss\n\n    # Create large dataset\n    large_objects = [\n        TestUser(f\"user{i}\", i) \n        for i in range(10000)\n    ]\n\n    # Serialize all objects\n    data_list = [dump(obj) for obj in large_objects]\n\n    # Check memory usage\n    final_memory = process.memory_info().rss\n    memory_increase = final_memory - initial_memory\n\n    # Memory increase should be reasonable (less than 100MB)\n    assert memory_increase &lt; 100 * 1024 * 1024  # 100MB\n</code></pre>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"development/testing/#end-to-end-workflows","title":"End-to-End Workflows","text":"<pre><code>@pytest.mark.integration\ndef test_complete_workflow():\n    \"\"\"Test complete serialization/deserialization workflow.\"\"\"\n    # Create complex nested structure\n    @dataclass\n    class Address:\n        street: str\n        city: str\n\n    @dataclass\n    class Company:\n        name: str\n        address: Address\n        employees: list[str]\n\n    company = Company(\n        name=\"TechCorp\",\n        address=Address(\"123 Tech St\", \"San Francisco\"),\n        employees=[\"Alice\", \"Bob\", \"Charlie\"]\n    )\n\n    # Complete workflow\n    data = dump(company)\n    restored_company = load(data, Company)\n\n    # Verify complete restoration\n    assert restored_company.name == company.name\n    assert restored_company.address.street == company.address.street\n    assert restored_company.address.city == company.address.city\n    assert restored_company.employees == company.employees\n</code></pre>"},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":""},{"location":"development/testing/#pytest-configuration","title":"Pytest Configuration","text":"<p>The project uses <code>pyproject.toml</code> for pytest configuration:</p> <pre><code>[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\naddopts = [\n    \"--strict-markers\",\n    \"--strict-config\",\n    \"--verbose\",\n    \"--tb=short\",\n    \"--cov=jsonport\",\n    \"--cov-report=term-missing\",\n    \"--cov-report=html\",\n]\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"integration: marks tests as integration tests\",\n    \"unit: marks tests as unit tests\",\n]\n</code></pre>"},{"location":"development/testing/#coverage-configuration","title":"Coverage Configuration","text":"<pre><code>[tool.coverage.run]\nsource = [\"jsonport\"]\nomit = [\n    \"*/tests/*\",\n    \"*/test_*\",\n    \"setup.py\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug:\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n    \"if 0:\",\n    \"if __name__ == .__main__.:\",\n    \"class .*\\\\bProtocol\\\\):\",\n    \"@(abc\\\\.)?abstractmethod\",\n]\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development/testing/#github-actions","title":"GitHub Actions","text":"<p>Tests run automatically on:</p> <ul> <li>Push to main: Full test suite</li> <li>Pull requests: Full test suite</li> <li>Multiple Python versions: 3.8, 3.9, 3.10, 3.11, 3.12, 3.13</li> </ul>"},{"location":"development/testing/#local-development","title":"Local Development","text":"<p>Before committing:</p> <pre><code># Run all checks\npytest -v --cov=jsonport\nblack jsonport/ tests/\nflake8 jsonport/ tests/\nmypy jsonport/\n</code></pre>"},{"location":"development/testing/#best-practices","title":"Best Practices","text":"<ol> <li>Test coverage: Aim for &gt;80% coverage</li> <li>Test isolation: Each test should be independent</li> <li>Meaningful assertions: Test specific behavior, not implementation</li> <li>Error testing: Test both success and failure cases</li> <li>Performance testing: Include benchmarks for critical operations</li> <li>Documentation: Write clear test docstrings</li> </ol>"},{"location":"development/testing/#next-steps","title":"Next Steps","text":"<ul> <li>Contributing Guide - How to contribute to JsonPort</li> <li>Benchmarking - Performance testing guide</li> <li>API Reference - Complete API documentation </li> </ul>"},{"location":"examples/collections/","title":"Collections","text":"<p>JsonPort provides comprehensive support for Python collections including lists, tuples, sets, and dictionaries with full type preservation and nested structure handling.</p>"},{"location":"examples/collections/#lists","title":"Lists","text":""},{"location":"examples/collections/#basic-lists","title":"Basic Lists","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List\nfrom jsonport import dump, load\n\n@dataclass\nclass User:\n    name: str\n    tags: List[str]\n\n# Create user with list\nuser = User(\"John Doe\", [\"developer\", \"python\", \"json\"])\n\n# Serialize\ndata = dump(user)\nprint(data)\n# Output:\n# {\n#   \"name\": \"John Doe\",\n#   \"tags\": [\"developer\", \"python\", \"json\"]\n# }\n\n# Deserialize\nrestored_user = load(data, User)\nprint(restored_user.tags)  # [\"developer\", \"python\", \"json\"]\n</code></pre>"},{"location":"examples/collections/#lists-of-complex-objects","title":"Lists of Complex Objects","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List\nfrom datetime import datetime\n\n@dataclass\nclass Comment:\n    text: str\n    author: str\n    created_at: datetime\n\n@dataclass\nclass Post:\n    title: str\n    content: str\n    comments: List[Comment]\n\n# Create post with comments\npost = Post(\n    title=\"JsonPort Tutorial\",\n    content=\"Learn how to use JsonPort...\",\n    comments=[\n        Comment(\"Great tutorial!\", \"Alice\", datetime.now()),\n        Comment(\"Very helpful\", \"Bob\", datetime.now())\n    ]\n)\n\n# Serialize\ndata = dump(post)\nprint(data)\n# Output:\n# {\n#   \"title\": \"JsonPort Tutorial\",\n#   \"content\": \"Learn how to use JsonPort...\",\n#   \"comments\": [\n#     {\n#       \"text\": \"Great tutorial!\",\n#       \"author\": \"Alice\",\n#       \"created_at\": \"2025-01-14T10:30:00\"\n#     },\n#     {\n#       \"text\": \"Very helpful\",\n#       \"author\": \"Bob\",\n#       \"created_at\": \"2025-01-14T10:31:00\"\n#     }\n#   ]\n# }\n\n# Deserialize\nrestored_post = load(data, Post)\nprint(len(restored_post.comments))  # 2\nprint(restored_post.comments[0].author)  # \"Alice\"\n</code></pre>"},{"location":"examples/collections/#nested-lists","title":"Nested Lists","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Matrix:\n    data: List[List[int]]\n\n# Create matrix\nmatrix = Matrix([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n])\n\n# Serialize\ndata = dump(matrix)\nprint(data)\n# Output:\n# {\n#   \"data\": [\n#     [1, 2, 3],\n#     [4, 5, 6],\n#     [7, 8, 9]\n#   ]\n# }\n\n# Deserialize\nrestored_matrix = load(data, Matrix)\nprint(restored_matrix.data[1][1])  # 5\n</code></pre>"},{"location":"examples/collections/#tuples","title":"Tuples","text":""},{"location":"examples/collections/#basic-tuples","title":"Basic Tuples","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Tuple\nfrom jsonport import dump, load\n\n@dataclass\nclass Point:\n    coordinates: Tuple[int, int]\n    color: str\n\n# Create point\npoint = Point((10, 20), \"red\")\n\n# Serialize\ndata = dump(point)\nprint(data)\n# Output:\n# {\n#   \"coordinates\": [10, 20],\n#   \"color\": \"red\"\n# }\n\n# Deserialize\nrestored_point = load(data, Point)\nprint(restored_point.coordinates)  # (10, 20)\n</code></pre>"},{"location":"examples/collections/#tuples-with-different-types","title":"Tuples with Different Types","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Tuple\nfrom datetime import datetime\n\n@dataclass\nclass UserInfo:\n    details: Tuple[str, int, datetime]\n    metadata: Tuple[str, bool]\n\n# Create user info\nuser_info = UserInfo(\n    (\"John Doe\", 30, datetime.now()),\n    (\"active\", True)\n)\n\n# Serialize\ndata = dump(user_info)\nprint(data)\n# Output:\n# {\n#   \"details\": [\"John Doe\", 30, \"2025-01-14T10:30:00\"],\n#   \"metadata\": [\"active\", true]\n# }\n\n# Deserialize\nrestored_info = load(data, UserInfo)\nprint(restored_info.details[0])  # \"John Doe\"\nprint(restored_info.details[1])  # 30\n</code></pre>"},{"location":"examples/collections/#sets","title":"Sets","text":""},{"location":"examples/collections/#basic-sets","title":"Basic Sets","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Set\nfrom jsonport import dump, load\n\n@dataclass\nclass User:\n    name: str\n    permissions: Set[str]\n\n# Create user with permissions\nuser = User(\"Admin\", {\"read\", \"write\", \"delete\", \"admin\"})\n\n# Serialize\ndata = dump(user)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Admin\",\n#   \"permissions\": [\"admin\", \"delete\", \"read\", \"write\"]\n# }\n\n# Deserialize\nrestored_user = load(data, User)\nprint(restored_user.permissions)  # {\"admin\", \"delete\", \"read\", \"write\"}\nprint(\"read\" in restored_user.permissions)  # True\n</code></pre>"},{"location":"examples/collections/#sets-of-complex-objects","title":"Sets of Complex Objects","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Set\nfrom enum import Enum\n\nclass Tag(Enum):\n    PYTHON = \"python\"\n    JSON = \"json\"\n    API = \"api\"\n\n@dataclass\nclass Article:\n    title: str\n    tags: Set[Tag]\n\n# Create article\narticle = Article(\"JsonPort Guide\", {Tag.PYTHON, Tag.JSON, Tag.API})\n\n# Serialize\ndata = dump(article)\nprint(data)\n# Output:\n# {\n#   \"title\": \"JsonPort Guide\",\n#   \"tags\": [\"api\", \"json\", \"python\"]\n# }\n\n# Deserialize\nrestored_article = load(data, Article)\nprint(restored_article.tags)  # {Tag.API, Tag.JSON, Tag.PYTHON}\n</code></pre>"},{"location":"examples/collections/#dictionaries","title":"Dictionaries","text":""},{"location":"examples/collections/#basic-dictionaries","title":"Basic Dictionaries","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Dict\nfrom jsonport import dump, load\n\n@dataclass\nclass Configuration:\n    settings: Dict[str, str]\n    metadata: Dict[str, int]\n\n# Create configuration\nconfig = Configuration(\n    settings={\"host\": \"localhost\", \"port\": \"8080\"},\n    metadata={\"version\": 1, \"max_connections\": 100}\n)\n\n# Serialize\ndata = dump(config)\nprint(data)\n# Output:\n# {\n#   \"settings\": {\n#     \"host\": \"localhost\",\n#     \"port\": \"8080\"\n#   },\n#   \"metadata\": {\n#     \"version\": 1,\n#     \"max_connections\": 100\n#   }\n# }\n\n# Deserialize\nrestored_config = load(data, Configuration)\nprint(restored_config.settings[\"host\"])  # \"localhost\"\nprint(restored_config.metadata[\"max_connections\"])  # 100\n</code></pre>"},{"location":"examples/collections/#dictionaries-with-complex-values","title":"Dictionaries with Complex Values","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Dict, List\nfrom datetime import datetime\n\n@dataclass\nclass UserProfile:\n    name: str\n    preferences: Dict[str, List[str]]\n    timestamps: Dict[str, datetime]\n\n# Create user profile\nprofile = UserProfile(\n    name=\"John Doe\",\n    preferences={\n        \"languages\": [\"Python\", \"JavaScript\"],\n        \"frameworks\": [\"Django\", \"React\"]\n    },\n    timestamps={\n        \"created\": datetime.now(),\n        \"last_login\": datetime.now()\n    }\n)\n\n# Serialize\ndata = dump(profile)\nprint(data)\n# Output:\n# {\n#   \"name\": \"John Doe\",\n#   \"preferences\": {\n#     \"languages\": [\"Python\", \"JavaScript\"],\n#     \"frameworks\": [\"Django\", \"React\"]\n#   },\n#   \"timestamps\": {\n#     \"created\": \"2025-01-14T10:30:00\",\n#     \"last_login\": \"2025-01-14T10:30:00\"\n#   }\n# }\n\n# Deserialize\nrestored_profile = load(data, UserProfile)\nprint(restored_profile.preferences[\"languages\"])  # [\"Python\", \"JavaScript\"]\n</code></pre>"},{"location":"examples/collections/#dictionaries-with-enum-keys","title":"Dictionaries with Enum Keys","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Dict\nfrom enum import Enum\n\nclass ConfigKey(Enum):\n    HOST = \"host\"\n    PORT = \"port\"\n    DEBUG = \"debug\"\n\n@dataclass\nclass AppConfig:\n    config: Dict[ConfigKey, str]\n\n# Create config\napp_config = AppConfig({\n    ConfigKey.HOST: \"localhost\",\n    ConfigKey.PORT: \"8080\",\n    ConfigKey.DEBUG: \"true\"\n})\n\n# Serialize\ndata = dump(app_config)\nprint(data)\n# Output:\n# {\n#   \"config\": {\n#     \"host\": \"localhost\",\n#     \"port\": \"8080\",\n#     \"debug\": \"true\"\n#   }\n# }\n\n# Deserialize\nrestored_config = load(data, AppConfig)\nprint(restored_config.config[ConfigKey.HOST])  # \"localhost\"\n</code></pre>"},{"location":"examples/collections/#complex-nested-collections","title":"Complex Nested Collections","text":""},{"location":"examples/collections/#mixed-collection-types","title":"Mixed Collection Types","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict, Set, Tuple\nfrom datetime import datetime\n\n@dataclass\nclass ComplexData:\n    users: List[Dict[str, str]]\n    tags: Set[str]\n    coordinates: Tuple[float, float]\n    metadata: Dict[str, List[int]]\n\n# Create complex data\ncomplex_data = ComplexData(\n    users=[\n        {\"name\": \"Alice\", \"role\": \"admin\"},\n        {\"name\": \"Bob\", \"role\": \"user\"}\n    ],\n    tags={\"python\", \"json\", \"serialization\"},\n    coordinates=(10.5, 20.3),\n    metadata={\n        \"scores\": [95, 87, 92],\n        \"counts\": [1, 2, 3, 4, 5]\n    }\n)\n\n# Serialize\ndata = dump(complex_data)\nprint(data)\n# Output:\n# {\n#   \"users\": [\n#     {\"name\": \"Alice\", \"role\": \"admin\"},\n#     {\"name\": \"Bob\", \"role\": \"user\"}\n#   ],\n#   \"tags\": [\"json\", \"python\", \"serialization\"],\n#   \"coordinates\": [10.5, 20.3],\n#   \"metadata\": {\n#     \"scores\": [95, 87, 92],\n#     \"counts\": [1, 2, 3, 4, 5]\n#   }\n# }\n\n# Deserialize\nrestored_data = load(data, ComplexData)\nprint(len(restored_data.users))  # 2\nprint(\"python\" in restored_data.tags)  # True\nprint(restored_data.coordinates[0])  # 10.5\n</code></pre>"},{"location":"examples/collections/#deeply-nested-structures","title":"Deeply Nested Structures","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict, Optional\n\n@dataclass\nclass Node:\n    value: str\n    children: List['Node']\n    metadata: Optional[Dict[str, str]] = None\n\n@dataclass\nclass Tree:\n    root: Node\n    node_count: int\n\n# Create tree structure\ntree = Tree(\n    root=Node(\n        value=\"root\",\n        children=[\n            Node(\n                value=\"child1\",\n                children=[\n                    Node(\"grandchild1\", []),\n                    Node(\"grandchild2\", [])\n                ],\n                metadata={\"type\": \"branch\"}\n            ),\n            Node(\n                value=\"child2\",\n                children=[],\n                metadata={\"type\": \"leaf\"}\n            )\n        ],\n        metadata={\"type\": \"root\"}\n    ),\n    node_count=5\n)\n\n# Serialize\ndata = dump(tree)\nprint(data)\n# Output:\n# {\n#   \"root\": {\n#     \"value\": \"root\",\n#     \"children\": [\n#       {\n#         \"value\": \"child1\",\n#         \"children\": [\n#           {\"value\": \"grandchild1\", \"children\": [], \"metadata\": null},\n#           {\"value\": \"grandchild2\", \"children\": [], \"metadata\": null}\n#         ],\n#         \"metadata\": {\"type\": \"branch\"}\n#       },\n#       {\n#         \"value\": \"child2\",\n#         \"children\": [],\n#         \"metadata\": {\"type\": \"leaf\"}\n#       }\n#     ],\n#     \"metadata\": {\"type\": \"root\"}\n#   },\n#   \"node_count\": 5\n# }\n\n# Deserialize\nrestored_tree = load(data, Tree)\nprint(restored_tree.root.value)  # \"root\"\nprint(len(restored_tree.root.children))  # 2\n</code></pre>"},{"location":"examples/collections/#collection-operations","title":"Collection Operations","text":""},{"location":"examples/collections/#list-operations","title":"List Operations","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List\nfrom jsonport import dump, load\n\n@dataclass\nclass ShoppingList:\n    items: List[str]\n    quantities: List[int]\n\n# Create shopping list\nshopping = ShoppingList(\n    items=[\"apples\", \"bananas\", \"milk\"],\n    quantities=[5, 3, 2]\n)\n\n# Serialize\ndata = dump(shopping)\n\n# Deserialize and perform operations\nrestored_shopping = load(data, ShoppingList)\n\n# List operations work normally\nprint(len(restored_shopping.items))  # 3\nprint(restored_shopping.items[0])  # \"apples\"\nrestored_shopping.items.append(\"bread\")\nrestored_shopping.quantities.append(1)\n\n# Re-serialize\nupdated_data = dump(restored_shopping)\n</code></pre>"},{"location":"examples/collections/#set-operations","title":"Set Operations","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Set\nfrom jsonport import dump, load\n\n@dataclass\nclass UserGroups:\n    user_id: str\n    groups: Set[str]\n\n# Create user groups\nuser_groups = UserGroups(\"user123\", {\"admin\", \"developers\", \"testers\"})\n\n# Serialize\ndata = dump(user_groups)\n\n# Deserialize and perform set operations\nrestored_groups = load(data, UserGroups)\n\n# Set operations work normally\nprint(\"admin\" in restored_groups.groups)  # True\nrestored_groups.groups.add(\"moderators\")\nrestored_groups.groups.remove(\"testers\")\n\n# Re-serialize\nupdated_data = dump(restored_groups)\n</code></pre>"},{"location":"examples/collections/#dictionary-operations","title":"Dictionary Operations","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Dict\nfrom jsonport import dump, load\n\n@dataclass\nclass Cache:\n    data: Dict[str, str]\n    max_size: int\n\n# Create cache\ncache = Cache({\"key1\": \"value1\", \"key2\": \"value2\"}, 100)\n\n# Serialize\ndata = dump(cache)\n\n# Deserialize and perform dict operations\nrestored_cache = load(data, Cache)\n\n# Dictionary operations work normally\nprint(restored_cache.data[\"key1\"])  # \"value1\"\nrestored_cache.data[\"key3\"] = \"value3\"\ndel restored_cache.data[\"key2\"]\n\n# Re-serialize\nupdated_data = dump(restored_cache)\n</code></pre>"},{"location":"examples/collections/#performance-considerations","title":"Performance Considerations","text":""},{"location":"examples/collections/#large-collections","title":"Large Collections","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict\nimport time\n\n@dataclass\nclass LargeDataset:\n    items: List[Dict[str, str]]\n    metadata: Dict[str, int]\n\n# Create large dataset\nlarge_data = LargeDataset(\n    items=[{\"id\": f\"item_{i}\", \"value\": f\"value_{i}\"} for i in range(10000)],\n    metadata={f\"key_{i}\": i for i in range(1000)}\n)\n\n# Measure serialization time\nstart_time = time.time()\ndata = dump(large_data)\nserialization_time = time.time() - start_time\n\n# Measure deserialization time\nstart_time = time.time()\nrestored_data = load(data, LargeDataset)\ndeserialization_time = time.time() - start_time\n\nprint(f\"Serialization time: {serialization_time:.3f}s\")\nprint(f\"Deserialization time: {deserialization_time:.3f}s\")\nprint(f\"Items count: {len(restored_data.items)}\")\n</code></pre>"},{"location":"examples/collections/#memory-usage","title":"Memory Usage","text":"<pre><code>import sys\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass MemoryTest:\n    data: List[str]\n\n# Test memory usage\noriginal_data = MemoryTest([\"item\"] * 10000)\nprint(f\"Original size: {sys.getsizeof(original_data)} bytes\")\n\nserialized = dump(original_data)\nprint(f\"Serialized size: {sys.getsizeof(serialized)} bytes\")\n\nrestored = load(serialized, MemoryTest)\nprint(f\"Restored size: {sys.getsizeof(restored)} bytes\")\n</code></pre> <p>This comprehensive guide demonstrates how to effectively use Python collections with JsonPort, including complex nested structures, operations, and performance considerations. </p>"},{"location":"examples/complex-structures/","title":"Complex Structures","text":"<p>JsonPort excels at handling complex nested data structures with full type preservation and automatic serialization/deserialization.</p>"},{"location":"examples/complex-structures/#nested-dataclasses","title":"Nested Dataclasses","text":""},{"location":"examples/complex-structures/#simple-nesting","title":"Simple Nesting","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Optional\nfrom datetime import datetime\nfrom jsonport import dump, load\n\n@dataclass\nclass Address:\n    street: str\n    city: str\n    state: str\n    zip_code: str\n\n@dataclass\nclass Contact:\n    email: str\n    phone: str\n    website: Optional[str] = None\n\n@dataclass\nclass Company:\n    name: str\n    address: Address\n    contact: Contact\n    founded_year: int\n\n# Create nested structure\ncompany = Company(\n    name=\"TechCorp\",\n    address=Address(\"123 Main St\", \"San Francisco\", \"CA\", \"94105\"),\n    contact=Contact(\"info@techcorp.com\", \"+1-555-0123\", \"https://techcorp.com\"),\n    founded_year=2020\n)\n\n# Serialize\ndata = dump(company)\nprint(data)\n# Output:\n# {\n#   \"name\": \"TechCorp\",\n#   \"address\": {\n#     \"street\": \"123 Main St\",\n#     \"city\": \"San Francisco\",\n#     \"state\": \"CA\",\n#     \"zip_code\": \"94105\"\n#   },\n#   \"contact\": {\n#     \"email\": \"info@techcorp.com\",\n#     \"phone\": \"+1-555-0123\",\n#     \"website\": \"https://techcorp.com\"\n#   },\n#   \"founded_year\": 2020\n# }\n\n# Deserialize\nrestored_company = load(data, Company)\nprint(restored_company.address.city)  # \"San Francisco\"\nprint(restored_company.contact.email)  # \"info@techcorp.com\"\n</code></pre>"},{"location":"examples/complex-structures/#deep-nesting","title":"Deep Nesting","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Optional\nfrom datetime import datetime\n\n@dataclass\nclass Skill:\n    name: str\n    level: str\n    years_experience: int\n\n@dataclass\nclass Education:\n    degree: str\n    institution: str\n    graduation_year: int\n    gpa: Optional[float] = None\n\n@dataclass\nclass WorkExperience:\n    company: str\n    position: str\n    start_date: datetime\n    end_date: Optional[datetime] = None\n    responsibilities: List[str]\n\n@dataclass\nclass Resume:\n    personal_info: dict\n    skills: List[Skill]\n    education: List[Education]\n    experience: List[WorkExperience]\n    created_at: datetime\n\n# Create complex resume\nresume = Resume(\n    personal_info={\n        \"name\": \"John Doe\",\n        \"email\": \"john@example.com\",\n        \"phone\": \"+1-555-0123\"\n    },\n    skills=[\n        Skill(\"Python\", \"Advanced\", 5),\n        Skill(\"JavaScript\", \"Intermediate\", 3),\n        Skill(\"SQL\", \"Advanced\", 4)\n    ],\n    education=[\n        Education(\"BS Computer Science\", \"University of Tech\", 2020, 3.8),\n        Education(\"MS Data Science\", \"Tech Institute\", 2022, 3.9)\n    ],\n    experience=[\n        WorkExperience(\n            \"TechCorp\",\n            \"Senior Developer\",\n            datetime(2022, 1, 1),\n            None,\n            [\"Lead development team\", \"Architect solutions\", \"Mentor junior developers\"]\n        ),\n        WorkExperience(\n            \"StartupXYZ\",\n            \"Developer\",\n            datetime(2020, 6, 1),\n            datetime(2021, 12, 31),\n            [\"Full-stack development\", \"API design\", \"Database optimization\"]\n        )\n    ],\n    created_at=datetime.now()\n)\n\n# Serialize\ndata = dump(resume)\nprint(data)\n# Output:\n# {\n#   \"personal_info\": {\n#     \"name\": \"John Doe\",\n#     \"email\": \"john@example.com\",\n#     \"phone\": \"+1-555-0123\"\n#   },\n#   \"skills\": [\n#     {\n#       \"name\": \"Python\",\n#       \"level\": \"Advanced\",\n#       \"years_experience\": 5\n#     },\n#     {\n#       \"name\": \"JavaScript\",\n#       \"level\": \"Intermediate\",\n#       \"years_experience\": 3\n#     },\n#     {\n#       \"name\": \"SQL\",\n#       \"level\": \"Advanced\",\n#       \"years_experience\": 4\n#     }\n#   ],\n#   \"education\": [\n#     {\n#       \"degree\": \"BS Computer Science\",\n#       \"institution\": \"University of Tech\",\n#       \"graduation_year\": 2020,\n#       \"gpa\": 3.8\n#     },\n#     {\n#       \"degree\": \"MS Data Science\",\n#       \"institution\": \"Tech Institute\",\n#       \"graduation_year\": 2022,\n#       \"gpa\": 3.9\n#     }\n#   ],\n#   \"experience\": [\n#     {\n#       \"company\": \"TechCorp\",\n#       \"position\": \"Senior Developer\",\n#       \"start_date\": \"2022-01-01T00:00:00\",\n#       \"end_date\": null,\n#       \"responsibilities\": [\n#         \"Lead development team\",\n#         \"Architect solutions\",\n#         \"Mentor junior developers\"\n#       ]\n#     },\n#     {\n#       \"company\": \"StartupXYZ\",\n#       \"position\": \"Developer\",\n#       \"start_date\": \"2020-06-01T00:00:00\",\n#       \"end_date\": \"2021-12-31T00:00:00\",\n#       \"responsibilities\": [\n#         \"Full-stack development\",\n#         \"API design\",\n#         \"Database optimization\"\n#       ]\n#     }\n#   ],\n#   \"created_at\": \"2025-01-14T10:30:00\"\n# }\n\n# Deserialize\nrestored_resume = load(data, Resume)\nprint(len(restored_resume.skills))  # 3\nprint(restored_resume.experience[0].company)  # \"TechCorp\"\n</code></pre>"},{"location":"examples/complex-structures/#self-referencing-structures","title":"Self-Referencing Structures","text":""},{"location":"examples/complex-structures/#tree-structures","title":"Tree Structures","text":"<pre><code>from dataclasses import dataclass, field\nfrom typing import List, Optional\n\n@dataclass\nclass TreeNode:\n    value: str\n    children: List['TreeNode'] = field(default_factory=list)\n    parent: Optional['TreeNode'] = None\n\n@dataclass\nclass Tree:\n    root: TreeNode\n    node_count: int\n\n# Create tree structure\nroot = TreeNode(\"Root\")\nchild1 = TreeNode(\"Child 1\")\nchild2 = TreeNode(\"Child 2\")\ngrandchild1 = TreeNode(\"Grandchild 1\")\ngrandchild2 = TreeNode(\"Grandchild 2\")\n\n# Build relationships\nroot.children = [child1, child2]\nchild1.children = [grandchild1, grandchild2]\nchild1.parent = root\nchild2.parent = root\ngrandchild1.parent = child1\ngrandchild2.parent = child1\n\ntree = Tree(root, 5)\n\n# Serialize\ndata = dump(tree)\nprint(data)\n# Output:\n# {\n#   \"root\": {\n#     \"value\": \"Root\",\n#     \"children\": [\n#       {\n#         \"value\": \"Child 1\",\n#         \"children\": [\n#           {\n#             \"value\": \"Grandchild 1\",\n#             \"children\": [],\n#             \"parent\": null\n#           },\n#           {\n#             \"value\": \"Grandchild 2\",\n#             \"children\": [],\n#             \"parent\": null\n#           }\n#         ],\n#         \"parent\": null\n#       },\n#       {\n#         \"value\": \"Child 2\",\n#         \"children\": [],\n#         \"parent\": null\n#       }\n#     ],\n#     \"parent\": null\n#   },\n#   \"node_count\": 5\n# }\n\n# Deserialize\nrestored_tree = load(data, Tree)\nprint(restored_tree.root.value)  # \"Root\"\nprint(len(restored_tree.root.children))  # 2\nprint(restored_tree.root.children[0].value)  # \"Child 1\"\n</code></pre>"},{"location":"examples/complex-structures/#graph-structures","title":"Graph Structures","text":"<pre><code>from dataclasses import dataclass, field\nfrom typing import List, Set, Dict\n\n@dataclass\nclass GraphNode:\n    id: str\n    data: dict\n    neighbors: List[str] = field(default_factory=list)\n\n@dataclass\nclass Graph:\n    nodes: Dict[str, GraphNode]\n    edges: List[tuple]\n\n# Create graph\ngraph = Graph(\n    nodes={\n        \"A\": GraphNode(\"A\", {\"name\": \"Node A\"}, [\"B\", \"C\"]),\n        \"B\": GraphNode(\"B\", {\"name\": \"Node B\"}, [\"A\", \"D\"]),\n        \"C\": GraphNode(\"C\", {\"name\": \"Node C\"}, [\"A\", \"D\"]),\n        \"D\": GraphNode(\"D\", {\"name\": \"Node D\"}, [\"B\", \"C\"])\n    },\n    edges=[(\"A\", \"B\"), (\"A\", \"C\"), (\"B\", \"D\"), (\"C\", \"D\")]\n)\n\n# Serialize\ndata = dump(graph)\nprint(data)\n# Output:\n# {\n#   \"nodes\": {\n#     \"A\": {\n#       \"id\": \"A\",\n#       \"data\": {\"name\": \"Node A\"},\n#       \"neighbors\": [\"B\", \"C\"]\n#     },\n#     \"B\": {\n#       \"id\": \"B\",\n#       \"data\": {\"name\": \"Node B\"},\n#       \"neighbors\": [\"A\", \"D\"]\n#     },\n#     \"C\": {\n#       \"id\": \"C\",\n#       \"data\": {\"name\": \"Node C\"},\n#       \"neighbors\": [\"A\", \"D\"]\n#     },\n#     \"D\": {\n#       \"id\": \"D\",\n#       \"data\": {\"name\": \"Node D\"},\n#       \"neighbors\": [\"B\", \"C\"]\n#     }\n#   },\n#   \"edges\": [[\"A\", \"B\"], [\"A\", \"C\"], [\"B\", \"D\"], [\"C\", \"D\"]]\n# }\n\n# Deserialize\nrestored_graph = load(data, Graph)\nprint(len(restored_graph.nodes))  # 4\nprint(restored_graph.nodes[\"A\"].neighbors)  # [\"B\", \"C\"]\n</code></pre>"},{"location":"examples/complex-structures/#mixed-data-types","title":"Mixed Data Types","text":""},{"location":"examples/complex-structures/#complex-collections","title":"Complex Collections","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict, Set, Tuple, Optional\nfrom datetime import datetime\nfrom enum import Enum\n\nclass Status(Enum):\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n    PENDING = \"pending\"\n\n@dataclass\nclass ComplexData:\n    # Basic types\n    name: str\n    count: int\n    is_valid: bool\n    score: float\n\n    # Collections\n    tags: Set[str]\n    coordinates: Tuple[float, float]\n    metadata: Dict[str, str]\n    items: List[Dict[str, any]]\n\n    # Optional fields\n    description: Optional[str] = None\n    created_at: Optional[datetime] = None\n    status: Optional[Status] = None\n\n    # Nested structures\n    nested_data: Optional[Dict[str, List[Dict[str, any]]]] = None\n\n# Create complex data structure\ncomplex_data = ComplexData(\n    name=\"Complex Object\",\n    count=42,\n    is_valid=True,\n    score=95.5,\n    tags={\"python\", \"json\", \"complex\"},\n    coordinates=(10.5, 20.3),\n    metadata={\"version\": \"1.0\", \"author\": \"John Doe\"},\n    items=[\n        {\"id\": 1, \"name\": \"Item 1\", \"active\": True},\n        {\"id\": 2, \"name\": \"Item 2\", \"active\": False},\n        {\"id\": 3, \"name\": \"Item 3\", \"active\": True}\n    ],\n    description=\"A complex data structure example\",\n    created_at=datetime.now(),\n    status=Status.ACTIVE,\n    nested_data={\n        \"group1\": [\n            {\"sub_id\": 1, \"value\": \"A\"},\n            {\"sub_id\": 2, \"value\": \"B\"}\n        ],\n        \"group2\": [\n            {\"sub_id\": 3, \"value\": \"C\"}\n        ]\n    }\n)\n\n# Serialize\ndata = dump(complex_data)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Complex Object\",\n#   \"count\": 42,\n#   \"is_valid\": true,\n#   \"score\": 95.5,\n#   \"tags\": [\"complex\", \"json\", \"python\"],\n#   \"coordinates\": [10.5, 20.3],\n#   \"metadata\": {\n#     \"version\": \"1.0\",\n#     \"author\": \"John Doe\"\n#   },\n#   \"items\": [\n#     {\"id\": 1, \"name\": \"Item 1\", \"active\": true},\n#     {\"id\": 2, \"name\": \"Item 2\", \"active\": false},\n#     {\"id\": 3, \"name\": \"Item 3\", \"active\": true}\n#   ],\n#   \"description\": \"A complex data structure example\",\n#   \"created_at\": \"2025-01-14T10:30:00\",\n#   \"status\": \"active\",\n#   \"nested_data\": {\n#     \"group1\": [\n#       {\"sub_id\": 1, \"value\": \"A\"},\n#       {\"sub_id\": 2, \"value\": \"B\"}\n#     ],\n#     \"group2\": [\n#       {\"sub_id\": 3, \"value\": \"C\"}\n#     ]\n#   }\n# }\n\n# Deserialize\nrestored_data = load(data, ComplexData)\nprint(restored_data.name)  # \"Complex Object\"\nprint(len(restored_data.items))  # 3\nprint(restored_data.status)  # Status.ACTIVE\nprint(restored_data.nested_data[\"group1\"][0][\"value\"])  # \"A\"\n</code></pre>"},{"location":"examples/complex-structures/#api-response-structures","title":"API Response Structures","text":""},{"location":"examples/complex-structures/#rest-api-response","title":"REST API Response","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict, Optional, Any\nfrom datetime import datetime\n\n@dataclass\nclass Pagination:\n    page: int\n    per_page: int\n    total: int\n    total_pages: int\n\n@dataclass\nclass ApiError:\n    code: str\n    message: str\n    details: Optional[Dict[str, Any]] = None\n\n@dataclass\nclass ApiResponse:\n    success: bool\n    data: Optional[Any] = None\n    error: Optional[ApiError] = None\n    pagination: Optional[Pagination] = None\n    timestamp: datetime = None\n    version: str = \"1.0\"\n\n# Success response\nsuccess_response = ApiResponse(\n    success=True,\n    data={\n        \"users\": [\n            {\"id\": 1, \"name\": \"John\", \"email\": \"john@example.com\"},\n            {\"id\": 2, \"name\": \"Jane\", \"email\": \"jane@example.com\"}\n        ]\n    },\n    pagination=Pagination(page=1, per_page=10, total=2, total_pages=1),\n    timestamp=datetime.now()\n)\n\n# Error response\nerror_response = ApiResponse(\n    success=False,\n    error=ApiError(\n        code=\"VALIDATION_ERROR\",\n        message=\"Invalid input data\",\n        details={\"field\": \"email\", \"issue\": \"Invalid email format\"}\n    ),\n    timestamp=datetime.now()\n)\n\n# Serialize success response\nsuccess_data = dump(success_response)\nprint(success_data)\n# Output:\n# {\n#   \"success\": true,\n#   \"data\": {\n#     \"users\": [\n#       {\"id\": 1, \"name\": \"John\", \"email\": \"john@example.com\"},\n#       {\"id\": 2, \"name\": \"Jane\", \"email\": \"jane@example.com\"}\n#     ]\n#   },\n#   \"error\": null,\n#   \"pagination\": {\n#     \"page\": 1,\n#     \"per_page\": 10,\n#     \"total\": 2,\n#     \"total_pages\": 1\n#   },\n#   \"timestamp\": \"2025-01-14T10:30:00\",\n#   \"version\": \"1.0\"\n# }\n\n# Serialize error response\nerror_data = dump(error_response)\nprint(error_data)\n# Output:\n# {\n#   \"success\": false,\n#   \"data\": null,\n#   \"error\": {\n#     \"code\": \"VALIDATION_ERROR\",\n#     \"message\": \"Invalid input data\",\n#     \"details\": {\n#       \"field\": \"email\",\n#       \"issue\": \"Invalid email format\"\n#     }\n#   },\n#   \"pagination\": null,\n#   \"timestamp\": \"2025-01-14T10:30:00\",\n#   \"version\": \"1.0\"\n# }\n\n# Deserialize\nrestored_success = load(success_data, ApiResponse)\nrestored_error = load(error_data, ApiResponse)\n\nprint(restored_success.success)  # True\nprint(restored_error.error.code)  # \"VALIDATION_ERROR\"\n</code></pre>"},{"location":"examples/complex-structures/#configuration-structures","title":"Configuration Structures","text":""},{"location":"examples/complex-structures/#application-configuration","title":"Application Configuration","text":"<pre><code>from dataclasses import dataclass, field\nfrom typing import Dict, List, Optional\nfrom enum import Enum\n\nclass LogLevel(Enum):\n    DEBUG = \"debug\"\n    INFO = \"info\"\n    WARNING = \"warning\"\n    ERROR = \"error\"\n\nclass DatabaseType(Enum):\n    SQLITE = \"sqlite\"\n    POSTGRESQL = \"postgresql\"\n    MYSQL = \"mysql\"\n\n@dataclass\nclass DatabaseConfig:\n    type: DatabaseType\n    host: str\n    port: int\n    database: str\n    username: str\n    password: str\n    pool_size: int = 10\n    timeout: int = 30\n\n@dataclass\nclass LoggingConfig:\n    level: LogLevel\n    file_path: str\n    max_size: int\n    backup_count: int\n    format: str = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\n@dataclass\nclass SecurityConfig:\n    secret_key: str\n    allowed_hosts: List[str]\n    cors_origins: List[str]\n    session_timeout: int = 3600\n    max_login_attempts: int = 5\n\n@dataclass\nclass AppConfig:\n    name: str\n    version: str\n    debug: bool\n    database: DatabaseConfig\n    logging: LoggingConfig\n    security: SecurityConfig\n    features: Dict[str, bool] = field(default_factory=dict)\n    metadata: Optional[Dict[str, str]] = None\n\n# Create configuration\nconfig = AppConfig(\n    name=\"MyApp\",\n    version=\"1.0.0\",\n    debug=True,\n    database=DatabaseConfig(\n        type=DatabaseType.POSTGRESQL,\n        host=\"localhost\",\n        port=5432,\n        database=\"myapp\",\n        username=\"admin\",\n        password=\"secret123\"\n    ),\n    logging=LoggingConfig(\n        level=LogLevel.INFO,\n        file_path=\"/var/log/myapp.log\",\n        max_size=10485760,  # 10MB\n        backup_count=5\n    ),\n    security=SecurityConfig(\n        secret_key=\"super-secret-key-123\",\n        allowed_hosts=[\"localhost\", \"127.0.0.1\"],\n        cors_origins=[\"http://localhost:3000\", \"https://myapp.com\"]\n    ),\n    features={\n        \"api\": True,\n        \"websocket\": True,\n        \"caching\": False,\n        \"monitoring\": True\n    },\n    metadata={\n        \"environment\": \"development\",\n        \"deployment\": \"local\"\n    }\n)\n\n# Serialize\ndata = dump(config)\nprint(data)\n# Output:\n# {\n#   \"name\": \"MyApp\",\n#   \"version\": \"1.0.0\",\n#   \"debug\": true,\n#   \"database\": {\n#     \"type\": \"postgresql\",\n#     \"host\": \"localhost\",\n#     \"port\": 5432,\n#     \"database\": \"myapp\",\n#     \"username\": \"admin\",\n#     \"password\": \"secret123\",\n#     \"pool_size\": 10,\n#     \"timeout\": 30\n#   },\n#   \"logging\": {\n#     \"level\": \"info\",\n#     \"file_path\": \"/var/log/myapp.log\",\n#     \"max_size\": 10485760,\n#     \"backup_count\": 5,\n#     \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n#   },\n#   \"security\": {\n#     \"secret_key\": \"super-secret-key-123\",\n#     \"allowed_hosts\": [\"localhost\", \"127.0.0.1\"],\n#     \"cors_origins\": [\"http://localhost:3000\", \"https://myapp.com\"],\n#     \"session_timeout\": 3600,\n#     \"max_login_attempts\": 5\n#   },\n#   \"features\": {\n#     \"api\": true,\n#     \"websocket\": true,\n#     \"caching\": false,\n#     \"monitoring\": true\n#   },\n#   \"metadata\": {\n#     \"environment\": \"development\",\n#     \"deployment\": \"local\"\n#   }\n# }\n\n# Deserialize\nrestored_config = load(data, AppConfig)\nprint(restored_config.name)  # \"MyApp\"\nprint(restored_config.database.type)  # DatabaseType.POSTGRESQL\nprint(restored_config.features[\"api\"])  # True\n</code></pre>"},{"location":"examples/complex-structures/#performance-considerations","title":"Performance Considerations","text":""},{"location":"examples/complex-structures/#large-complex-structures","title":"Large Complex Structures","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict\nimport time\n\n@dataclass\nclass LargeStructure:\n    items: List[Dict[str, any]]\n    metadata: Dict[str, any]\n\n# Create large structure\nlarge_data = LargeStructure(\n    items=[{\"id\": i, \"data\": f\"item_{i}\", \"value\": i * 1.5} for i in range(10000)],\n    metadata={f\"key_{i}\": f\"value_{i}\" for i in range(1000)}\n)\n\n# Measure performance\nstart_time = time.time()\ndata = dump(large_data)\nserialization_time = time.time() - start_time\n\nstart_time = time.time()\nrestored_data = load(data, LargeStructure)\ndeserialization_time = time.time() - start_time\n\nprint(f\"Serialization time: {serialization_time:.3f}s\")\nprint(f\"Deserialization time: {deserialization_time:.3f}s\")\nprint(f\"Items count: {len(restored_data.items)}\")\nprint(f\"Metadata keys: {len(restored_data.metadata)}\")\n</code></pre> <p>This comprehensive guide demonstrates how to work with complex data structures in JsonPort, including nested objects, self-referencing structures, mixed data types, and real-world examples like API responses and configuration management. </p>"},{"location":"examples/custom-types/","title":"Custom Types","text":"<p>JsonPort provides support for custom types through type hints and can be extended to handle specialized data structures and domain-specific types.</p>"},{"location":"examples/custom-types/#newtype-aliases","title":"NewType Aliases","text":""},{"location":"examples/custom-types/#domain-specific-types","title":"Domain-Specific Types","text":"<pre><code>from dataclasses import dataclass\nfrom typing import NewType, List\nfrom jsonport import dump, load\n\n# Define domain-specific types\nUserId = NewType('UserId', int)\nEmail = NewType('Email', str)\nUsername = NewType('Username', str)\nPassword = NewType('Password', str)\n\n@dataclass\nclass User:\n    id: UserId\n    username: Username\n    email: Email\n    password: Password\n\n# Create user with custom types\nuser = User(\n    id=UserId(1),\n    username=Username(\"john_doe\"),\n    email=Email(\"john@example.com\"),\n    password=Password(\"secret123\")\n)\n\n# Serialize\ndata = dump(user)\nprint(data)\n# Output:\n# {\n#   \"id\": 1,\n#   \"username\": \"john_doe\",\n#   \"email\": \"john@example.com\",\n#   \"password\": \"secret123\"\n# }\n\n# Deserialize\nrestored_user = load(data, User)\nprint(type(restored_user.id))  # &lt;class 'int'&gt; (NewType is transparent)\nprint(restored_user.username)  # \"john_doe\"\n</code></pre>"},{"location":"examples/custom-types/#type-safe-identifiers","title":"Type-Safe Identifiers","text":"<pre><code>from dataclasses import dataclass\nfrom typing import NewType, Dict, List\n\n# Type-safe identifiers\nOrderId = NewType('OrderId', str)\nProductId = NewType('ProductId', str)\nCustomerId = NewType('CustomerId', str)\n\n@dataclass\nclass OrderItem:\n    product_id: ProductId\n    quantity: int\n    price: float\n\n@dataclass\nclass Order:\n    order_id: OrderId\n    customer_id: CustomerId\n    items: List[OrderItem]\n    total: float\n\n# Create order with type-safe IDs\norder = Order(\n    order_id=OrderId(\"ORD-2025-001\"),\n    customer_id=CustomerId(\"CUST-123\"),\n    items=[\n        OrderItem(ProductId(\"PROD-001\"), 2, 29.99),\n        OrderItem(ProductId(\"PROD-002\"), 1, 49.99)\n    ],\n    total=109.97\n)\n\n# Serialize\ndata = dump(order)\nprint(data)\n# Output:\n# {\n#   \"order_id\": \"ORD-2025-001\",\n#   \"customer_id\": \"CUST-123\",\n#   \"items\": [\n#     {\n#       \"product_id\": \"PROD-001\",\n#       \"quantity\": 2,\n#       \"price\": 29.99\n#     },\n#     {\n#       \"product_id\": \"PROD-002\",\n#       \"quantity\": 1,\n#       \"price\": 49.99\n#     }\n#   ],\n#   \"total\": 109.97\n# }\n\n# Deserialize\nrestored_order = load(data, Order)\nprint(restored_order.order_id)  # \"ORD-2025-001\"\nprint(len(restored_order.items))  # 2\n</code></pre>"},{"location":"examples/custom-types/#literal-types","title":"Literal Types","text":""},{"location":"examples/custom-types/#status-enums","title":"Status Enums","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Literal, List\n\n# Define literal types for status\nOrderStatus = Literal[\"pending\", \"processing\", \"shipped\", \"delivered\", \"cancelled\"]\nPaymentStatus = Literal[\"pending\", \"paid\", \"failed\", \"refunded\"]\n\n@dataclass\nclass Order:\n    id: str\n    status: OrderStatus\n    payment_status: PaymentStatus\n    items: List[str]\n\n# Create orders with literal types\norder1 = Order(\"ORD-001\", \"pending\", \"pending\", [\"item1\", \"item2\"])\norder2 = Order(\"ORD-002\", \"shipped\", \"paid\", [\"item3\"])\n\n# Serialize\ndata1 = dump(order1)\ndata2 = dump(order2)\nprint(data1)\n# Output:\n# {\n#   \"id\": \"ORD-001\",\n#   \"status\": \"pending\",\n#   \"payment_status\": \"pending\",\n#   \"items\": [\"item1\", \"item2\"]\n# }\n\nprint(data2)\n# Output:\n# {\n#   \"id\": \"ORD-002\",\n#   \"status\": \"shipped\",\n#   \"payment_status\": \"paid\",\n#   \"items\": [\"item3\"]\n# }\n\n# Deserialize\nrestored_order1 = load(data1, Order)\nrestored_order2 = load(data2, Order)\nprint(restored_order1.status)  # \"pending\"\nprint(restored_order2.status)  # \"shipped\"\n</code></pre>"},{"location":"examples/custom-types/#configuration-literals","title":"Configuration Literals","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Literal, Dict\n\n# Environment and mode literals\nEnvironment = Literal[\"development\", \"staging\", \"production\"]\nLogLevel = Literal[\"debug\", \"info\", \"warning\", \"error\"]\nDatabaseType = Literal[\"sqlite\", \"postgresql\", \"mysql\"]\n\n@dataclass\nclass AppConfig:\n    environment: Environment\n    log_level: LogLevel\n    database_type: DatabaseType\n    settings: Dict[str, str]\n\n# Create configuration\nconfig = AppConfig(\n    environment=\"development\",\n    log_level=\"debug\",\n    database_type=\"sqlite\",\n    settings={\"host\": \"localhost\", \"port\": \"8080\"}\n)\n\n# Serialize\ndata = dump(config)\nprint(data)\n# Output:\n# {\n#   \"environment\": \"development\",\n#   \"log_level\": \"debug\",\n#   \"database_type\": \"sqlite\",\n#   \"settings\": {\n#     \"host\": \"localhost\",\n#     \"port\": \"8080\"\n#   }\n# }\n\n# Deserialize\nrestored_config = load(data, AppConfig)\nprint(restored_config.environment)  # \"development\"\nprint(restored_config.log_level)  # \"debug\"\n</code></pre>"},{"location":"examples/custom-types/#union-types","title":"Union Types","text":""},{"location":"examples/custom-types/#flexible-data-types","title":"Flexible Data Types","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Union, List, Optional\nfrom datetime import datetime\n\n# Union types for flexible data\nValueType = Union[str, int, float, bool, None]\nTimestamp = Union[datetime, str, None]\n\n@dataclass\nclass DataPoint:\n    name: str\n    value: ValueType\n    timestamp: Timestamp\n    metadata: Optional[Dict[str, ValueType]] = None\n\n# Create data points with different types\ndata_points = [\n    DataPoint(\"temperature\", 25.5, datetime.now()),\n    DataPoint(\"status\", \"active\", \"2025-01-14T10:30:00\"),\n    DataPoint(\"enabled\", True, None),\n    DataPoint(\"count\", 42, datetime.now(), {\"unit\": \"items\"})\n]\n\n# Serialize\ndata = dump(data_points)\nprint(data)\n# Output:\n# [\n#   {\n#     \"name\": \"temperature\",\n#     \"value\": 25.5,\n#     \"timestamp\": \"2025-01-14T10:30:00\",\n#     \"metadata\": null\n#   },\n#   {\n#     \"name\": \"status\",\n#     \"value\": \"active\",\n#     \"timestamp\": \"2025-01-14T10:30:00\",\n#     \"metadata\": null\n#   },\n#   {\n#     \"name\": \"enabled\",\n#     \"value\": true,\n#     \"timestamp\": null,\n#     \"metadata\": null\n#   },\n#   {\n#     \"name\": \"count\",\n#     \"value\": 42,\n#     \"timestamp\": \"2025-01-14T10:30:00\",\n#     \"metadata\": {\"unit\": \"items\"}\n#   }\n# ]\n\n# Deserialize\nrestored_points = load(data, List[DataPoint])\nprint(len(restored_points))  # 4\nprint(restored_points[0].value)  # 25.5\nprint(restored_points[1].value)  # \"active\"\n</code></pre>"},{"location":"examples/custom-types/#optional-fields-with-unions","title":"Optional Fields with Unions","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Union, Optional, List\n\n# Union types for optional fields\nStringOrInt = Union[str, int]\nStringOrNone = Optional[str]\n\n@dataclass\nclass FlexibleObject:\n    id: StringOrInt\n    name: str\n    description: StringOrNone\n    tags: List[StringOrInt]\n\n# Create flexible objects\nobj1 = FlexibleObject(1, \"Object 1\", \"Description\", [\"tag1\", 2, \"tag3\"])\nobj2 = FlexibleObject(\"OBJ-002\", \"Object 2\", None, [1, \"important\", 3])\n\n# Serialize\ndata1 = dump(obj1)\ndata2 = dump(obj2)\nprint(data1)\n# Output:\n# {\n#   \"id\": 1,\n#   \"name\": \"Object 1\",\n#   \"description\": \"Description\",\n#   \"tags\": [\"tag1\", 2, \"tag3\"]\n# }\n\nprint(data2)\n# Output:\n# {\n#   \"id\": \"OBJ-002\",\n#   \"name\": \"Object 2\",\n#   \"description\": null,\n#   \"tags\": [1, \"important\", 3]\n# }\n\n# Deserialize\nrestored_obj1 = load(data1, FlexibleObject)\nrestored_obj2 = load(data2, FlexibleObject)\nprint(type(restored_obj1.id))  # &lt;class 'int'&gt;\nprint(type(restored_obj2.id))  # &lt;class 'str'&gt;\n</code></pre>"},{"location":"examples/custom-types/#generic-types","title":"Generic Types","text":""},{"location":"examples/custom-types/#generic-containers","title":"Generic Containers","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Generic, TypeVar, List, Dict, Optional\n\n# Define type variables\nT = TypeVar('T')\nK = TypeVar('K')\nV = TypeVar('V')\n\n@dataclass\nclass Container(Generic[T]):\n    data: T\n    metadata: Dict[str, str]\n\n@dataclass\nclass KeyValuePair(Generic[K, V]):\n    key: K\n    value: V\n    description: Optional[str] = None\n\n@dataclass\nclass DataCollection(Generic[T]):\n    items: List[T]\n    total_count: int\n    page: int\n\n# Create generic containers\nstring_container = Container(\"Hello World\", {\"type\": \"string\", \"length\": \"11\"})\nint_container = Container(42, {\"type\": \"integer\", \"range\": \"positive\"})\n\n# Create key-value pairs\nkv1 = KeyValuePair(\"name\", \"John\", \"User's full name\")\nkv2 = KeyValuePair(1, True, \"Boolean flag\")\n\n# Create data collection\ncollection = DataCollection([1, 2, 3, 4, 5], 5, 1)\n\n# Serialize\nstring_data = dump(string_container)\nint_data = dump(int_container)\nkv_data = dump([kv1, kv2])\ncollection_data = dump(collection)\n\nprint(string_data)\n# Output:\n# {\n#   \"data\": \"Hello World\",\n#   \"metadata\": {\n#     \"type\": \"string\",\n#     \"length\": \"11\"\n#   }\n# }\n\nprint(kv_data)\n# Output:\n# [\n#   {\n#     \"key\": \"name\",\n#     \"value\": \"John\",\n#     \"description\": \"User's full name\"\n#   },\n#   {\n#     \"key\": 1,\n#     \"value\": true,\n#     \"description\": \"Boolean flag\"\n#   }\n# ]\n\n# Deserialize\nrestored_string = load(string_data, Container[str])\nrestored_kvs = load(kv_data, List[KeyValuePair])\nrestored_collection = load(collection_data, DataCollection[int])\n\nprint(restored_string.data)  # \"Hello World\"\nprint(restored_kvs[0].key)  # \"name\"\nprint(restored_collection.total_count)  # 5\n</code></pre>"},{"location":"examples/custom-types/#custom-classes-with-type-hints","title":"Custom Classes with Type Hints","text":""},{"location":"examples/custom-types/#domain-objects","title":"Domain Objects","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Optional\nfrom datetime import datetime\n\nclass Email:\n    def __init__(self, value: str):\n        if \"@\" not in value:\n            raise ValueError(\"Invalid email format\")\n        self.value = value\n\n    def __str__(self):\n        return self.value\n\n    def __repr__(self):\n        return f\"Email('{self.value}')\"\n\nclass PhoneNumber:\n    def __init__(self, value: str):\n        # Simple validation\n        if not value.replace(\"-\", \"\").replace(\" \", \"\").isdigit():\n            raise ValueError(\"Invalid phone number format\")\n        self.value = value\n\n    def __str__(self):\n        return self.value\n\n    def __repr__(self):\n        return f\"PhoneNumber('{self.value}')\"\n\n@dataclass\nclass Contact:\n    name: str\n    email: Email\n    phone: PhoneNumber\n    created_at: datetime\n\n# Create contact with custom types\ncontact = Contact(\n    name=\"John Doe\",\n    email=Email(\"john@example.com\"),\n    phone=PhoneNumber(\"+1-555-0123\"),\n    created_at=datetime.now()\n)\n\n# Serialize\ndata = dump(contact)\nprint(data)\n# Output:\n# {\n#   \"name\": \"John Doe\",\n#   \"email\": \"john@example.com\",\n#   \"phone\": \"+1-555-0123\",\n#   \"created_at\": \"2025-01-14T10:30:00\"\n# }\n\n# Deserialize\nrestored_contact = load(data, Contact)\nprint(restored_contact.email)  # \"john@example.com\"\nprint(restored_contact.phone)  # \"+1-555-0123\"\n</code></pre>"},{"location":"examples/custom-types/#custom-collections","title":"Custom Collections","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Dict, Any\n\nclass TaggedList:\n    def __init__(self, items: List[Any], tag: str):\n        self.items = items\n        self.tag = tag\n\n    def __len__(self):\n        return len(self.items)\n\n    def __getitem__(self, index):\n        return self.items[index]\n\n    def __iter__(self):\n        return iter(self.items)\n\nclass MetadataDict:\n    def __init__(self, data: Dict[str, Any], metadata: Dict[str, str]):\n        self.data = data\n        self.metadata = metadata\n\n    def __getitem__(self, key):\n        return self.data[key]\n\n    def __setitem__(self, key, value):\n        self.data[key] = value\n\n    def keys(self):\n        return self.data.keys()\n\n@dataclass\nclass CustomData:\n    items: TaggedList\n    settings: MetadataDict\n    version: str\n\n# Create custom data\ncustom_data = CustomData(\n    items=TaggedList([1, 2, 3, 4, 5], \"numbers\"),\n    settings=MetadataDict(\n        {\"host\": \"localhost\", \"port\": 8080},\n        {\"type\": \"configuration\", \"source\": \"file\"}\n    ),\n    version=\"1.0\"\n)\n\n# Serialize\ndata = dump(custom_data)\nprint(data)\n# Output:\n# {\n#   \"items\": [1, 2, 3, 4, 5],\n#   \"settings\": {\n#     \"host\": \"localhost\",\n#     \"port\": 8080\n#   },\n#   \"version\": \"1.0\"\n# }\n\n# Deserialize\nrestored_data = load(data, CustomData)\nprint(len(restored_data.items))  # 5\nprint(restored_data.settings[\"host\"])  # \"localhost\"\n</code></pre>"},{"location":"examples/custom-types/#type-aliases","title":"Type Aliases","text":""},{"location":"examples/custom-types/#complex-type-aliases","title":"Complex Type Aliases","text":"<pre><code>from dataclasses import dataclass\nfrom typing import TypeAlias, List, Dict, Optional\nfrom datetime import datetime\n\n# Define complex type aliases\nUserId = TypeAlias = int\nEmail = TypeAlias = str\nTimestamp = TypeAlias = datetime\n\n# Nested type aliases\nUserData = TypeAlias = Dict[str, str]\nUserList = TypeAlias = List[UserData]\nApiResponse = TypeAlias = Dict[str, any]\n\n@dataclass\nclass User:\n    id: UserId\n    email: Email\n    data: UserData\n    created_at: Timestamp\n\n@dataclass\nclass UserCollection:\n    users: UserList\n    total: int\n    response: ApiResponse\n\n# Create user collection\nuser_collection = UserCollection(\n    users=[\n        {\"name\": \"John\", \"role\": \"admin\"},\n        {\"name\": \"Jane\", \"role\": \"user\"}\n    ],\n    total=2,\n    response={\"status\": \"success\", \"message\": \"Users retrieved\"}\n)\n\n# Serialize\ndata = dump(user_collection)\nprint(data)\n# Output:\n# {\n#   \"users\": [\n#     {\"name\": \"John\", \"role\": \"admin\"},\n#     {\"name\": \"Jane\", \"role\": \"user\"}\n#   ],\n#   \"total\": 2,\n#   \"response\": {\n#     \"status\": \"success\",\n#     \"message\": \"Users retrieved\"\n#   }\n# }\n\n# Deserialize\nrestored_collection = load(data, UserCollection)\nprint(len(restored_collection.users))  # 2\nprint(restored_collection.response[\"status\"])  # \"success\"\n</code></pre>"},{"location":"examples/custom-types/#performance-considerations","title":"Performance Considerations","text":""},{"location":"examples/custom-types/#type-resolution-performance","title":"Type Resolution Performance","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Union, List, Optional\nimport time\n\n# Complex union types\nComplexType = Union[str, int, float, bool, List[str], Dict[str, any], None]\n\n@dataclass\nclass PerformanceTest:\n    simple_field: str\n    union_field: ComplexType\n    optional_field: Optional[ComplexType]\n\n# Create test data\ntest_data = PerformanceTest(\n    simple_field=\"test\",\n    union_field={\"key\": \"value\", \"number\": 42},\n    optional_field=[\"item1\", \"item2\", \"item3\"]\n)\n\n# Measure serialization performance\nstart_time = time.time()\nfor _ in range(1000):\n    data = dump(test_data)\nserialization_time = time.time() - start_time\n\n# Measure deserialization performance\nstart_time = time.time()\nfor _ in range(1000):\n    restored = load(data, PerformanceTest)\ndeserialization_time = time.time() - start_time\n\nprint(f\"Serialization time: {serialization_time:.3f}s\")\nprint(f\"Deserialization time: {deserialization_time:.3f}s\")\n</code></pre> <p>This comprehensive guide demonstrates how to work with custom types in JsonPort, including NewType aliases, literal types, union types, generic types, and custom classes with type hints. </p>"},{"location":"examples/dataclasses/","title":"Dataclasses","text":"<p>Learn how to work with Python dataclasses using JsonPort.</p>"},{"location":"examples/dataclasses/#basic-dataclass-serialization","title":"Basic Dataclass Serialization","text":"<pre><code>from dataclasses import dataclass\nfrom jsonport import dump, load\n\n@dataclass\nclass User:\n    name: str\n    age: int\n    email: str\n\n# Create a user\nuser = User(\"John Doe\", 30, \"john@example.com\")\n\n# Serialize to dictionary\ndata = dump(user)\nprint(data)\n# Output: {\"name\": \"John Doe\", \"age\": 30, \"email\": \"john@example.com\"}\n\n# Deserialize back to object\nrestored_user = load(data, User)\nprint(restored_user.name)  # \"John Doe\"\n</code></pre>"},{"location":"examples/dataclasses/#dataclass-with-default-values","title":"Dataclass with Default Values","text":"<pre><code>@dataclass\nclass Product:\n    id: int\n    name: str\n    price: float\n    description: str = \"\"\n    in_stock: bool = True\n    tags: list[str] = None\n\n# Create with minimal data\nproduct1 = Product(1, \"Laptop\", 999.99)\nprint(product1.description)  # \"\"\nprint(product1.in_stock)     # True\n\n# Create with full data\nproduct2 = Product(\n    id=2,\n    name=\"Mouse\",\n    price=29.99,\n    description=\"Wireless mouse\",\n    in_stock=False,\n    tags=[\"electronics\", \"wireless\"]\n)\n\n# Serialize both\ndata1 = dump(product1)\ndata2 = dump(product2)\n</code></pre>"},{"location":"examples/dataclasses/#nested-dataclasses","title":"Nested Dataclasses","text":"<pre><code>@dataclass\nclass Address:\n    street: str\n    city: str\n    country: str\n    postal_code: str\n\n@dataclass\nclass Customer:\n    id: int\n    name: str\n    email: str\n    address: Address\n    phone: str = None\n\n# Create nested structure\ncustomer = Customer(\n    id=1,\n    name=\"Jane Smith\",\n    email=\"jane@example.com\",\n    address=Address(\n        street=\"123 Main St\",\n        city=\"New York\",\n        country=\"USA\",\n        postal_code=\"10001\"\n    ),\n    phone=\"+1-555-0123\"\n)\n\n# Serialize nested structure\ndata = dump(customer)\nprint(data)\n# Output: {\n#   \"id\": 1,\n#   \"name\": \"Jane Smith\",\n#   \"email\": \"jane@example.com\",\n#   \"address\": {\n#     \"street\": \"123 Main St\",\n#     \"city\": \"New York\",\n#     \"country\": \"USA\",\n#     \"postal_code\": \"10001\"\n#   },\n#   \"phone\": \"+1-555-0123\"\n# }\n\n# Deserialize nested structure\nrestored_customer = load(data, Customer)\nprint(restored_customer.address.city)  # \"New York\"\n</code></pre>"},{"location":"examples/dataclasses/#dataclass-with-collections","title":"Dataclass with Collections","text":"<pre><code>@dataclass\nclass Order:\n    id: int\n    customer_id: int\n    items: list[str]\n    quantities: dict[str, int]\n    tags: set[str]\n    total: float\n\norder = Order(\n    id=1001,\n    customer_id=1,\n    items=[\"laptop\", \"mouse\", \"keyboard\"],\n    quantities={\"laptop\": 1, \"mouse\": 2, \"keyboard\": 1},\n    tags={\"electronics\", \"office\", \"urgent\"},\n    total=1299.97\n)\n\n# Serialize with collections\ndata = dump(order)\nprint(data[\"items\"])      # [\"laptop\", \"mouse\", \"keyboard\"]\nprint(data[\"quantities\"]) # {\"laptop\": 1, \"mouse\": 2, \"keyboard\": 1}\nprint(data[\"tags\"])       # [\"electronics\", \"office\", \"urgent\"]\n\n# Deserialize with proper type restoration\nrestored_order = load(data, Order)\nprint(type(restored_order.items))      # &lt;class 'list'&gt;\nprint(type(restored_order.quantities)) # &lt;class 'dict'&gt;\nprint(type(restored_order.tags))       # &lt;class 'set'&gt;\n</code></pre>"},{"location":"examples/dataclasses/#dataclass-with-inheritance","title":"Dataclass with Inheritance","text":"<pre><code>@dataclass\nclass Animal:\n    name: str\n    age: int\n\n@dataclass\nclass Dog(Animal):\n    breed: str\n    is_vaccinated: bool\n\n@dataclass\nclass Cat(Animal):\n    color: str\n    is_indoor: bool\n\n# Create instances\ndog = Dog(\"Buddy\", 3, \"Golden Retriever\", True)\ncat = Cat(\"Whiskers\", 2, \"Orange\", True)\n\n# Serialize different types\ndog_data = dump(dog)\ncat_data = dump(cat)\n\n# Deserialize with proper type\nrestored_dog = load(dog_data, Dog)\nrestored_cat = load(cat_data, Cat)\n\nprint(restored_dog.breed)  # \"Golden Retriever\"\nprint(restored_cat.color)  # \"Orange\"\n</code></pre>"},{"location":"examples/dataclasses/#dataclass-with-custom-methods","title":"Dataclass with Custom Methods","text":"<pre><code>@dataclass\nclass Rectangle:\n    width: float\n    height: float\n\n    def area(self) -&gt; float:\n        return self.width * self.height\n\n    def perimeter(self) -&gt; float:\n        return 2 * (self.width + self.height)\n\nrect = Rectangle(5.0, 3.0)\n\n# Serialize (methods are not serialized)\ndata = dump(rect)\nprint(data)  # {\"width\": 5.0, \"height\": 3.0}\n\n# Deserialize and use methods\nrestored_rect = load(data, Rectangle)\nprint(restored_rect.area())      # 15.0\nprint(restored_rect.perimeter()) # 16.0\n</code></pre>"},{"location":"examples/dataclasses/#dataclass-with-validation","title":"Dataclass with Validation","text":"<pre><code>@dataclass\nclass ValidatedUser:\n    name: str\n    age: int\n    email: str\n\n    def __post_init__(self):\n        if self.age &lt; 0:\n            raise ValueError(\"Age cannot be negative\")\n        if \"@\" not in self.email:\n            raise ValueError(\"Invalid email format\")\n        if len(self.name.strip()) == 0:\n            raise ValueError(\"Name cannot be empty\")\n\n# Valid user\ntry:\n    user = ValidatedUser(\"John\", 30, \"john@example.com\")\n    data = dump(user)\n    print(\"User created successfully\")\nexcept ValueError as e:\n    print(f\"Validation error: {e}\")\n\n# Invalid user\ntry:\n    user = ValidatedUser(\"\", -5, \"invalid-email\")\nexcept ValueError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"examples/dataclasses/#dataclass-with-optional-fields","title":"Dataclass with Optional Fields","text":"<pre><code>from typing import Optional\n\n@dataclass\nclass Profile:\n    user_id: int\n    username: str\n    bio: Optional[str] = None\n    avatar_url: Optional[str] = None\n    website: Optional[str] = None\n\n# Minimal profile\nprofile1 = Profile(1, \"john_doe\")\n\n# Full profile\nprofile2 = Profile(\n    user_id=2,\n    username=\"jane_smith\",\n    bio=\"Software developer and coffee enthusiast\",\n    avatar_url=\"https://example.com/avatar.jpg\",\n    website=\"https://janesmith.dev\"\n)\n\n# Serialize both\ndata1 = dump(profile1)\ndata2 = dump(profile2)\n\nprint(data1)  # {\"user_id\": 1, \"username\": \"john_doe\", \"bio\": null, \"avatar_url\": null, \"website\": null}\nprint(data2)  # {\"user_id\": 2, \"username\": \"jane_smith\", \"bio\": \"...\", \"avatar_url\": \"...\", \"website\": \"...\"}\n</code></pre>"},{"location":"examples/dataclasses/#dataclass-with-complex-types","title":"Dataclass with Complex Types","text":"<pre><code>from typing import List, Dict, Tuple, Union\nfrom datetime import datetime, date\n\n@dataclass\nclass Event:\n    id: int\n    title: str\n    date: date\n    start_time: datetime\n    attendees: List[str]\n    metadata: Dict[str, Union[str, int, float]]\n    coordinates: Tuple[float, float]\n\nevent = Event(\n    id=1,\n    title=\"Team Meeting\",\n    date=date(2024, 1, 15),\n    start_time=datetime(2024, 1, 15, 14, 30),\n    attendees=[\"alice\", \"bob\", \"charlie\"],\n    metadata={\"room\": \"Conference A\", \"duration\": 60, \"priority\": 1.0},\n    coordinates=(40.7128, -74.0060)\n)\n\n# Serialize complex types\ndata = dump(event)\nprint(data[\"date\"])        # \"2024-01-15\"\nprint(data[\"start_time\"])  # \"2024-01-15T14:30:00\"\nprint(data[\"coordinates\"]) # [40.7128, -74.0060]\n\n# Deserialize with type preservation\nrestored_event = load(data, Event)\nprint(type(restored_event.date))        # &lt;class 'datetime.date'&gt;\nprint(type(restored_event.start_time))  # &lt;class 'datetime.datetime'&gt;\nprint(type(restored_event.coordinates)) # &lt;class 'tuple'&gt;\n</code></pre>"},{"location":"examples/dataclasses/#best-practices","title":"Best Practices","text":"<ol> <li>Use type hints: Always define proper type hints for optimal performance</li> <li>Handle optional fields: Use <code>Optional[T]</code> for fields that might be None</li> <li>Add validation: Use <code>__post_init__</code> for custom validation</li> <li>Use meaningful defaults: Provide sensible default values</li> <li>Keep it simple: Avoid complex nested structures when possible</li> </ol>"},{"location":"examples/dataclasses/#next-steps","title":"Next Steps","text":"<ul> <li>Enums - Working with enumerations</li> <li>Collections - List, dict, set, and tuple handling</li> <li>DateTime - Date and time serialization</li> <li>Complex Structures - Advanced nested objects </li> </ul>"},{"location":"examples/datetime/","title":"DateTime","text":"<p>JsonPort provides seamless handling of Python datetime objects with automatic ISO format conversion and timezone support.</p>"},{"location":"examples/datetime/#basic-datetime-usage","title":"Basic DateTime Usage","text":""},{"location":"examples/datetime/#simple-datetime","title":"Simple DateTime","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nfrom jsonport import dump, load\n\n@dataclass\nclass Event:\n    name: str\n    start_time: datetime\n    end_time: datetime\n\n# Create event\nevent = Event(\n    name=\"Team Meeting\",\n    start_time=datetime(2025, 1, 14, 10, 30, 0),\n    end_time=datetime(2025, 1, 14, 11, 30, 0)\n)\n\n# Serialize\ndata = dump(event)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Team Meeting\",\n#   \"start_time\": \"2025-01-14T10:30:00\",\n#   \"end_time\": \"2025-01-14T11:30:00\"\n# }\n\n# Deserialize\nrestored_event = load(data, Event)\nprint(restored_event.start_time)  # 2025-01-14 10:30:00\nprint(restored_event.end_time)  # 2025-01-14 11:30:00\n</code></pre>"},{"location":"examples/datetime/#date-objects","title":"Date Objects","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import date\nfrom jsonport import dump, load\n\n@dataclass\nclass User:\n    name: str\n    birth_date: date\n    registration_date: date\n\n# Create user\nuser = User(\n    name=\"John Doe\",\n    birth_date=date(1990, 5, 15),\n    registration_date=date(2024, 1, 1)\n)\n\n# Serialize\ndata = dump(user)\nprint(data)\n# Output:\n# {\n#   \"name\": \"John Doe\",\n#   \"birth_date\": \"1990-05-15\",\n#   \"registration_date\": \"2024-01-01\"\n# }\n\n# Deserialize\nrestored_user = load(data, User)\nprint(restored_user.birth_date)  # 1990-05-15\nprint(restored_user.registration_date)  # 2024-01-01\n</code></pre>"},{"location":"examples/datetime/#time-objects","title":"Time Objects","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import time\nfrom jsonport import dump, load\n\n@dataclass\nclass Schedule:\n    name: str\n    start_time: time\n    end_time: time\n\n# Create schedule\nschedule = Schedule(\n    name=\"Work Hours\",\n    start_time=time(9, 0, 0),\n    end_time=time(17, 30, 0)\n)\n\n# Serialize\ndata = dump(schedule)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Work Hours\",\n#   \"start_time\": \"09:00:00\",\n#   \"end_time\": \"17:30:00\"\n# }\n\n# Deserialize\nrestored_schedule = load(data, Schedule)\nprint(restored_schedule.start_time)  # 09:00:00\nprint(restored_schedule.end_time)  # 17:30:00\n</code></pre>"},{"location":"examples/datetime/#timezone-aware-datetime","title":"Timezone-Aware DateTime","text":""},{"location":"examples/datetime/#with-timezone-information","title":"With Timezone Information","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nimport pytz\nfrom jsonport import dump, load\n\n@dataclass\nclass Meeting:\n    title: str\n    scheduled_time: datetime\n    timezone: str\n\n# Create timezone-aware datetime\nutc_tz = pytz.UTC\nny_tz = pytz.timezone('America/New_York')\n\nmeeting = Meeting(\n    title=\"Global Team Sync\",\n    scheduled_time=datetime(2025, 1, 14, 15, 0, 0, tzinfo=utc_tz),\n    timezone=\"UTC\"\n)\n\n# Serialize\ndata = dump(meeting)\nprint(data)\n# Output:\n# {\n#   \"title\": \"Global Team Sync\",\n#   \"scheduled_time\": \"2025-01-14T15:00:00+00:00\",\n#   \"timezone\": \"UTC\"\n# }\n\n# Deserialize\nrestored_meeting = load(data, Meeting)\nprint(restored_meeting.scheduled_time)  # 2025-01-14 15:00:00+00:00\nprint(restored_meeting.scheduled_time.tzinfo)  # UTC\n</code></pre>"},{"location":"examples/datetime/#converting-between-timezones","title":"Converting Between Timezones","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nimport pytz\nfrom jsonport import dump, load\n\n@dataclass\nclass Appointment:\n    description: str\n    local_time: datetime\n    utc_time: datetime\n\n# Create appointment in local timezone\nlocal_tz = pytz.timezone('America/New_York')\nutc_tz = pytz.UTC\n\nlocal_time = local_tz.localize(datetime(2025, 1, 14, 10, 0, 0))\nutc_time = local_time.astimezone(utc_tz)\n\nappointment = Appointment(\n    description=\"Doctor Visit\",\n    local_time=local_time,\n    utc_time=utc_time\n)\n\n# Serialize\ndata = dump(appointment)\nprint(data)\n# Output:\n# {\n#   \"description\": \"Doctor Visit\",\n#   \"local_time\": \"2025-01-14T10:00:00-05:00\",\n#   \"utc_time\": \"2025-01-14T15:00:00+00:00\"\n# }\n\n# Deserialize\nrestored_appointment = load(data, Appointment)\nprint(restored_appointment.local_time)  # 2025-01-14 10:00:00-05:00\nprint(restored_appointment.utc_time)  # 2025-01-14 15:00:00+00:00\n</code></pre>"},{"location":"examples/datetime/#complex-datetime-structures","title":"Complex DateTime Structures","text":""},{"location":"examples/datetime/#nested-datetime-objects","title":"Nested DateTime Objects","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime, date\nfrom typing import List, Optional\n\n@dataclass\nclass LogEntry:\n    message: str\n    timestamp: datetime\n    level: str\n\n@dataclass\nclass SystemLog:\n    system_name: str\n    start_date: date\n    entries: List[LogEntry]\n    last_updated: Optional[datetime] = None\n\n# Create system log\nlog = SystemLog(\n    system_name=\"Web Server\",\n    start_date=date(2024, 1, 1),\n    entries=[\n        LogEntry(\"Server started\", datetime(2024, 1, 1, 8, 0, 0), \"INFO\"),\n        LogEntry(\"Database connected\", datetime(2024, 1, 1, 8, 1, 0), \"INFO\"),\n        LogEntry(\"Error in request\", datetime(2024, 1, 1, 8, 5, 0), \"ERROR\")\n    ],\n    last_updated=datetime(2024, 1, 1, 8, 5, 0)\n)\n\n# Serialize\ndata = dump(log)\nprint(data)\n# Output:\n# {\n#   \"system_name\": \"Web Server\",\n#   \"start_date\": \"2024-01-01\",\n#   \"entries\": [\n#     {\n#       \"message\": \"Server started\",\n#       \"timestamp\": \"2024-01-01T08:00:00\",\n#       \"level\": \"INFO\"\n#     },\n#     {\n#       \"message\": \"Database connected\",\n#       \"timestamp\": \"2024-01-01T08:01:00\",\n#       \"level\": \"INFO\"\n#     },\n#     {\n#       \"message\": \"Error in request\",\n#       \"timestamp\": \"2024-01-01T08:05:00\",\n#       \"level\": \"ERROR\"\n#     }\n#   ],\n#   \"last_updated\": \"2024-01-01T08:05:00\"\n# }\n\n# Deserialize\nrestored_log = load(data, SystemLog)\nprint(len(restored_log.entries))  # 3\nprint(restored_log.entries[0].timestamp)  # 2024-01-01 08:00:00\n</code></pre>"},{"location":"examples/datetime/#datetime-in-collections","title":"DateTime in Collections","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime, date\nfrom typing import Dict, List, Set\n\n@dataclass\nclass TimeSeries:\n    name: str\n    dates: List[date]\n    timestamps: List[datetime]\n    date_counts: Dict[date, int]\n    unique_times: Set[datetime]\n\n# Create time series data\ntime_series = TimeSeries(\n    name=\"Temperature Data\",\n    dates=[date(2024, 1, 1), date(2024, 1, 2), date(2024, 1, 3)],\n    timestamps=[\n        datetime(2024, 1, 1, 12, 0, 0),\n        datetime(2024, 1, 1, 18, 0, 0),\n        datetime(2024, 1, 2, 12, 0, 0)\n    ],\n    date_counts={\n        date(2024, 1, 1): 2,\n        date(2024, 1, 2): 1,\n        date(2024, 1, 3): 0\n    },\n    unique_times={\n        datetime(2024, 1, 1, 12, 0, 0),\n        datetime(2024, 1, 1, 18, 0, 0),\n        datetime(2024, 1, 2, 12, 0, 0)\n    }\n)\n\n# Serialize\ndata = dump(time_series)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Temperature Data\",\n#   \"dates\": [\"2024-01-01\", \"2024-01-02\", \"2024-01-03\"],\n#   \"timestamps\": [\n#     \"2024-01-01T12:00:00\",\n#     \"2024-01-01T18:00:00\",\n#     \"2024-01-02T12:00:00\"\n#   ],\n#   \"date_counts\": {\n#     \"2024-01-01\": 2,\n#     \"2024-01-02\": 1,\n#     \"2024-01-03\": 0\n#   },\n#   \"unique_times\": [\n#     \"2024-01-01T12:00:00\",\n#     \"2024-01-01T18:00:00\",\n#     \"2024-01-02T12:00:00\"\n#   ]\n# }\n\n# Deserialize\nrestored_series = load(data, TimeSeries)\nprint(len(restored_series.dates))  # 3\nprint(restored_series.date_counts[date(2024, 1, 1)])  # 2\n</code></pre>"},{"location":"examples/datetime/#datetime-operations","title":"DateTime Operations","text":""},{"location":"examples/datetime/#date-arithmetic","title":"Date Arithmetic","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime, timedelta\nfrom jsonport import dump, load\n\n@dataclass\nclass Task:\n    name: str\n    created_at: datetime\n    due_date: datetime\n    completed_at: datetime = None\n\n# Create task\ntask = Task(\n    name=\"Complete project\",\n    created_at=datetime.now(),\n    due_date=datetime.now() + timedelta(days=7)\n)\n\n# Serialize\ndata = dump(task)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Complete project\",\n#   \"created_at\": \"2025-01-14T10:30:00\",\n#   \"due_date\": \"2025-01-21T10:30:00\",\n#   \"completed_at\": null\n# }\n\n# Deserialize and perform operations\nrestored_task = load(data, Task)\n\n# Calculate time remaining\nif restored_task.completed_at is None:\n    time_remaining = restored_task.due_date - datetime.now()\n    print(f\"Time remaining: {time_remaining.days} days\")\n\n# Mark as completed\nrestored_task.completed_at = datetime.now()\n\n# Re-serialize\nupdated_data = dump(restored_task)\n</code></pre>"},{"location":"examples/datetime/#date-comparison","title":"Date Comparison","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime, date\nfrom jsonport import dump, load\n\n@dataclass\nclass Event:\n    name: str\n    start_date: date\n    end_date: date\n    created_at: datetime\n\n# Create event\nevent = Event(\n    name=\"Conference\",\n    start_date=date(2025, 3, 15),\n    end_date=date(2025, 3, 17),\n    created_at=datetime.now()\n)\n\n# Serialize\ndata = dump(event)\n\n# Deserialize and compare dates\nrestored_event = load(data, Event)\n\ntoday = date.today()\nif restored_event.start_date &gt; today:\n    print(f\"Event '{restored_event.name}' is in the future\")\nelif restored_event.end_date &lt; today:\n    print(f\"Event '{restored_event.name}' has ended\")\nelse:\n    print(f\"Event '{restored_event.name}' is ongoing\")\n\n# Check if event is within a week\nweek_from_now = today + timedelta(days=7)\nif restored_event.start_date &lt;= week_from_now:\n    print(f\"Event '{restored_event.name}' is within a week\")\n</code></pre>"},{"location":"examples/datetime/#datetime-formatting","title":"DateTime Formatting","text":""},{"location":"examples/datetime/#custom-formatting","title":"Custom Formatting","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nfrom jsonport import dump, load\n\n@dataclass\nclass FormattedEvent:\n    name: str\n    timestamp: datetime\n\n    def get_formatted_time(self):\n        return self.timestamp.strftime(\"%B %d, %Y at %I:%M %p\")\n\n    def get_iso_format(self):\n        return self.timestamp.isoformat()\n\n# Create event\nevent = FormattedEvent(\n    name=\"Team Meeting\",\n    timestamp=datetime(2025, 1, 14, 14, 30, 0)\n)\n\n# Serialize\ndata = dump(event)\n\n# Deserialize and format\nrestored_event = load(data, FormattedEvent)\nprint(restored_event.get_formatted_time())  # \"January 14, 2025 at 02:30 PM\"\nprint(restored_event.get_iso_format())  # \"2025-01-14T14:30:00\"\n</code></pre>"},{"location":"examples/datetime/#timezone-conversion","title":"Timezone Conversion","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nimport pytz\nfrom jsonport import dump, load\n\n@dataclass\nclass GlobalEvent:\n    name: str\n    utc_time: datetime\n\n    def get_local_time(self, timezone_name):\n        local_tz = pytz.timezone(timezone_name)\n        return self.utc_time.astimezone(local_tz)\n\n    def get_all_times(self):\n        timezones = ['UTC', 'America/New_York', 'Europe/London', 'Asia/Tokyo']\n        return {tz: self.get_local_time(tz) for tz in timezones}\n\n# Create global event\nevent = GlobalEvent(\n    name=\"Product Launch\",\n    utc_time=datetime(2025, 1, 14, 15, 0, 0, tzinfo=pytz.UTC)\n)\n\n# Serialize\ndata = dump(event)\n\n# Deserialize and get times in different timezones\nrestored_event = load(data, GlobalEvent)\nall_times = restored_event.get_all_times()\n\nfor tz, time in all_times.items():\n    print(f\"{tz}: {time.strftime('%Y-%m-%d %H:%M:%S %Z')}\")\n</code></pre>"},{"location":"examples/datetime/#error-handling-with-datetime","title":"Error Handling with DateTime","text":""},{"location":"examples/datetime/#invalid-date-formats","title":"Invalid Date Formats","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nfrom jsonport import load, DeserializationError\n\n@dataclass\nclass Event:\n    name: str\n    date: datetime\n\n# This will raise DeserializationError\ntry:\n    event = load({\"name\": \"Meeting\", \"date\": \"invalid-date\"}, Event)\nexcept DeserializationError as e:\n    print(f\"Error: {e}\")\n    # Output: Error: Cannot deserialize 'invalid-date' to datetime\n</code></pre>"},{"location":"examples/datetime/#handling-missing-timezone-information","title":"Handling Missing Timezone Information","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nimport pytz\nfrom jsonport import dump, load\n\n@dataclass\nclass TimezoneEvent:\n    name: str\n    local_time: datetime\n    timezone: str\n\n    def get_utc_time(self):\n        if self.local_time.tzinfo is None:\n            # Assume local timezone if not specified\n            local_tz = pytz.timezone(self.timezone)\n            return local_tz.localize(self.local_time).astimezone(pytz.UTC)\n        return self.local_time.astimezone(pytz.UTC)\n\n# Create event with naive datetime\nevent = TimezoneEvent(\n    name=\"Local Meeting\",\n    local_time=datetime(2025, 1, 14, 10, 0, 0),  # No timezone info\n    timezone=\"America/New_York\"\n)\n\n# Serialize\ndata = dump(event)\n\n# Deserialize and handle timezone\nrestored_event = load(data, TimezoneEvent)\nutc_time = restored_event.get_utc_time()\nprint(f\"UTC time: {utc_time}\")\n</code></pre>"},{"location":"examples/datetime/#performance-considerations","title":"Performance Considerations","text":""},{"location":"examples/datetime/#large-datetime-collections","title":"Large DateTime Collections","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime, timedelta\nfrom typing import List\nimport time\n\n@dataclass\nclass TimeSeriesData:\n    timestamps: List[datetime]\n    values: List[float]\n\n# Create large time series\nbase_time = datetime(2024, 1, 1)\ntimestamps = [base_time + timedelta(hours=i) for i in range(10000)]\nvalues = [i * 0.1 for i in range(10000)]\n\ntime_series = TimeSeriesData(timestamps, values)\n\n# Measure serialization performance\nstart_time = time.time()\ndata = dump(time_series)\nserialization_time = time.time() - start_time\n\n# Measure deserialization performance\nstart_time = time.time()\nrestored_series = load(data, TimeSeriesData)\ndeserialization_time = time.time() - start_time\n\nprint(f\"Serialization time: {serialization_time:.3f}s\")\nprint(f\"Deserialization time: {deserialization_time:.3f}s\")\nprint(f\"Data points: {len(restored_series.timestamps)}\")\n</code></pre>"},{"location":"examples/datetime/#memory-usage-with-datetime","title":"Memory Usage with DateTime","text":"<pre><code>import sys\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import List\n\n@dataclass\nclass DateTimeTest:\n    timestamps: List[datetime]\n\n# Test memory usage\noriginal_data = DateTimeTest([datetime.now() for _ in range(1000)])\nprint(f\"Original size: {sys.getsizeof(original_data)} bytes\")\n\nserialized = dump(original_data)\nprint(f\"Serialized size: {sys.getsizeof(serialized)} bytes\")\n\nrestored = load(serialized, DateTimeTest)\nprint(f\"Restored size: {sys.getsizeof(restored)} bytes\")\n</code></pre> <p>This comprehensive guide demonstrates how to effectively work with datetime objects in JsonPort, including timezone handling, complex structures, operations, and performance considerations. </p>"},{"location":"examples/enums/","title":"Enums","text":"<p>JsonPort provides seamless serialization and deserialization of Python enums with automatic value conversion and type safety.</p>"},{"location":"examples/enums/#basic-enum-usage","title":"Basic Enum Usage","text":""},{"location":"examples/enums/#simple-enum","title":"Simple Enum","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\nfrom jsonport import dump, load\n\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n    MODERATOR = \"moderator\"\n\n@dataclass\nclass User:\n    name: str\n    role: UserRole\n\n# Create user with enum\nuser = User(\"John Doe\", UserRole.ADMIN)\n\n# Serialize\ndata = dump(user)\nprint(data)\n# Output:\n# {\n#   \"name\": \"John Doe\",\n#   \"role\": \"admin\"\n# }\n\n# Deserialize\nrestored_user = load(data, User)\nprint(restored_user.role)  # UserRole.ADMIN\nprint(restored_user.role.value)  # \"admin\"\n</code></pre>"},{"location":"examples/enums/#enum-with-integer-values","title":"Enum with Integer Values","text":"<pre><code>from enum import IntEnum\nfrom dataclasses import dataclass\n\nclass StatusCode(IntEnum):\n    OK = 200\n    CREATED = 201\n    BAD_REQUEST = 400\n    NOT_FOUND = 404\n    INTERNAL_ERROR = 500\n\n@dataclass\nclass APIResponse:\n    status: StatusCode\n    message: str\n\n# Create response\nresponse = APIResponse(StatusCode.OK, \"Success\")\n\n# Serialize\ndata = dump(response)\nprint(data)\n# Output:\n# {\n#   \"status\": 200,\n#   \"message\": \"Success\"\n# }\n\n# Deserialize\nrestored_response = load(data, APIResponse)\nprint(restored_response.status)  # StatusCode.OK\nprint(restored_response.status.value)  # 200\n</code></pre>"},{"location":"examples/enums/#advanced-enum-patterns","title":"Advanced Enum Patterns","text":""},{"location":"examples/enums/#enum-with-custom-values","title":"Enum with Custom Values","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\n\nclass Color(Enum):\n    RED = \"#FF0000\"\n    GREEN = \"#00FF00\"\n    BLUE = \"#0000FF\"\n    BLACK = \"#000000\"\n    WHITE = \"#FFFFFF\"\n\n@dataclass\nclass Theme:\n    primary_color: Color\n    secondary_color: Color\n    background_color: Color\n\n# Create theme\ntheme = Theme(Color.BLUE, Color.WHITE, Color.BLACK)\n\n# Serialize\ndata = dump(theme)\nprint(data)\n# Output:\n# {\n#   \"primary_color\": \"#0000FF\",\n#   \"secondary_color\": \"#FFFFFF\",\n#   \"background_color\": \"#000000\"\n# }\n\n# Deserialize\nrestored_theme = load(data, Theme)\nprint(restored_theme.primary_color)  # Color.BLUE\n</code></pre>"},{"location":"examples/enums/#enum-with-methods","title":"Enum with Methods","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\n\nclass FileType(Enum):\n    TEXT = \"txt\"\n    JSON = \"json\"\n    CSV = \"csv\"\n    XML = \"xml\"\n\n    def get_mime_type(self):\n        mime_types = {\n            FileType.TEXT: \"text/plain\",\n            FileType.JSON: \"application/json\",\n            FileType.CSV: \"text/csv\",\n            FileType.XML: \"application/xml\"\n        }\n        return mime_types[self]\n\n    def is_text_based(self):\n        return self in [FileType.TEXT, FileType.JSON, FileType.CSV, FileType.XML]\n\n@dataclass\nclass FileInfo:\n    name: str\n    file_type: FileType\n    size: int\n\n# Create file info\nfile_info = FileInfo(\"data.json\", FileType.JSON, 1024)\n\n# Serialize\ndata = dump(file_info)\nprint(data)\n# Output:\n# {\n#   \"name\": \"data.json\",\n#   \"file_type\": \"json\",\n#   \"size\": 1024\n# }\n\n# Deserialize\nrestored_file = load(data, FileInfo)\nprint(restored_file.file_type.get_mime_type())  # \"application/json\"\nprint(restored_file.file_type.is_text_based())  # True\n</code></pre>"},{"location":"examples/enums/#enum-collections","title":"Enum Collections","text":""},{"location":"examples/enums/#lists-of-enums","title":"Lists of Enums","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\nfrom typing import List\n\nclass Permission(Enum):\n    READ = \"read\"\n    WRITE = \"write\"\n    DELETE = \"delete\"\n    ADMIN = \"admin\"\n\n@dataclass\nclass User:\n    name: str\n    permissions: List[Permission]\n\n# Create user with multiple permissions\nuser = User(\"Admin User\", [Permission.READ, Permission.WRITE, Permission.ADMIN])\n\n# Serialize\ndata = dump(user)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Admin User\",\n#   \"permissions\": [\"read\", \"write\", \"admin\"]\n# }\n\n# Deserialize\nrestored_user = load(data, User)\nprint(restored_user.permissions)  # [Permission.READ, Permission.WRITE, Permission.ADMIN]\n</code></pre>"},{"location":"examples/enums/#sets-of-enums","title":"Sets of Enums","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\nfrom typing import Set\n\nclass Tag(Enum):\n    PYTHON = \"python\"\n    JSON = \"json\"\n    API = \"api\"\n    DATABASE = \"database\"\n    TESTING = \"testing\"\n\n@dataclass\nclass Article:\n    title: str\n    tags: Set[Tag]\n\n# Create article with tags\narticle = Article(\"JsonPort Tutorial\", {Tag.PYTHON, Tag.JSON, Tag.API})\n\n# Serialize\ndata = dump(article)\nprint(data)\n# Output:\n# {\n#   \"title\": \"JsonPort Tutorial\",\n#   \"tags\": [\"python\", \"json\", \"api\"]\n# }\n\n# Deserialize\nrestored_article = load(data, Article)\nprint(restored_article.tags)  # {Tag.PYTHON, Tag.JSON, Tag.API}\n</code></pre>"},{"location":"examples/enums/#dictionaries-with-enum-keys","title":"Dictionaries with Enum Keys","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\nfrom typing import Dict\n\nclass ConfigKey(Enum):\n    HOST = \"host\"\n    PORT = \"port\"\n    TIMEOUT = \"timeout\"\n    DEBUG = \"debug\"\n\n@dataclass\nclass Configuration:\n    settings: Dict[ConfigKey, str]\n\n# Create configuration\nconfig = Configuration({\n    ConfigKey.HOST: \"localhost\",\n    ConfigKey.PORT: \"8080\",\n    ConfigKey.TIMEOUT: \"30\",\n    ConfigKey.DEBUG: \"true\"\n})\n\n# Serialize\ndata = dump(config)\nprint(data)\n# Output:\n# {\n#   \"settings\": {\n#     \"host\": \"localhost\",\n#     \"port\": \"8080\",\n#     \"timeout\": \"30\",\n#     \"debug\": \"true\"\n#   }\n# }\n\n# Deserialize\nrestored_config = load(data, Configuration)\nprint(restored_config.settings[ConfigKey.HOST])  # \"localhost\"\n</code></pre>"},{"location":"examples/enums/#complex-enum-structures","title":"Complex Enum Structures","text":""},{"location":"examples/enums/#nested-enums","title":"Nested Enums","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\nfrom typing import Optional\n\nclass UserStatus(Enum):\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n    SUSPENDED = \"suspended\"\n\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n    MODERATOR = \"moderator\"\n\n@dataclass\nclass UserProfile:\n    name: str\n    status: UserStatus\n    role: UserRole\n    previous_role: Optional[UserRole] = None\n\n# Create user profile\nprofile = UserProfile(\n    name=\"Jane Doe\",\n    status=UserStatus.ACTIVE,\n    role=UserRole.ADMIN,\n    previous_role=UserRole.USER\n)\n\n# Serialize\ndata = dump(profile)\nprint(data)\n# Output:\n# {\n#   \"name\": \"Jane Doe\",\n#   \"status\": \"active\",\n#   \"role\": \"admin\",\n#   \"previous_role\": \"user\"\n# }\n\n# Deserialize\nrestored_profile = load(data, UserProfile)\nprint(restored_profile.status)  # UserStatus.ACTIVE\nprint(restored_profile.role)  # UserRole.ADMIN\n</code></pre>"},{"location":"examples/enums/#enum-with-optional-fields","title":"Enum with Optional Fields","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\nfrom typing import Optional\n\nclass Priority(Enum):\n    LOW = \"low\"\n    MEDIUM = \"medium\"\n    HIGH = \"high\"\n    URGENT = \"urgent\"\n\n@dataclass\nclass Task:\n    title: str\n    priority: Priority\n    assigned_priority: Optional[Priority] = None\n\n# Create tasks\ntask1 = Task(\"Fix bug\", Priority.HIGH)\ntask2 = Task(\"Update docs\", Priority.MEDIUM, Priority.LOW)\n\n# Serialize\ndata1 = dump(task1)\ndata2 = dump(task2)\nprint(data1)\n# Output:\n# {\n#   \"title\": \"Fix bug\",\n#   \"priority\": \"high\",\n#   \"assigned_priority\": null\n# }\n\nprint(data2)\n# Output:\n# {\n#   \"title\": \"Update docs\",\n#   \"priority\": \"medium\",\n#   \"assigned_priority\": \"low\"\n# }\n\n# Deserialize\nrestored_task1 = load(data1, Task)\nrestored_task2 = load(data2, Task)\n</code></pre>"},{"location":"examples/enums/#error-handling-with-enums","title":"Error Handling with Enums","text":""},{"location":"examples/enums/#invalid-enum-values","title":"Invalid Enum Values","text":"<pre><code>from enum import Enum\nfrom jsonport import load, DeserializationError\n\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n\n@dataclass\nclass User:\n    name: str\n    role: UserRole\n\n# This will raise DeserializationError\ntry:\n    user = load({\"name\": \"John\", \"role\": \"moderator\"}, User)\nexcept DeserializationError as e:\n    print(f\"Error: {e}\")\n    # Output: Error: Cannot deserialize 'moderator' to UserRole\n</code></pre>"},{"location":"examples/enums/#handling-unknown-enum-values","title":"Handling Unknown Enum Values","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\nfrom typing import Optional\n\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n    MODERATOR = \"moderator\"\n\n@dataclass\nclass User:\n    name: str\n    role: UserRole\n    fallback_role: Optional[UserRole] = None\n\ndef safe_load_user(data):\n    try:\n        return load(data, User)\n    except DeserializationError as e:\n        if \"role\" in str(e):\n            # Try with fallback role\n            data[\"role\"] = \"user\"  # Default to user role\n            return load(data, User)\n        raise\n\n# Test with invalid role\nuser_data = {\"name\": \"John\", \"role\": \"unknown\"}\nuser = safe_load_user(user_data)\nprint(user.role)  # UserRole.USER (fallback)\n</code></pre>"},{"location":"examples/enums/#performance-considerations","title":"Performance Considerations","text":""},{"location":"examples/enums/#enum-caching","title":"Enum Caching","text":"<p>JsonPort caches enum value mappings for better performance:</p> <pre><code>from enum import Enum\nfrom jsonport import dump, load\nimport time\n\nclass LargeEnum(Enum):\n    # Many enum values...\n    pass\n\n# First serialization (slower due to cache population)\nstart_time = time.time()\ndata = dump(large_enum_object)\nfirst_time = time.time() - start_time\n\n# Subsequent serializations (faster due to caching)\nstart_time = time.time()\ndata = dump(large_enum_object)\nsecond_time = time.time() - start_time\n\nprint(f\"First serialization: {first_time:.4f}s\")\nprint(f\"Second serialization: {second_time:.4f}s\")\n</code></pre>"},{"location":"examples/enums/#enum-comparison","title":"Enum Comparison","text":"<pre><code>from enum import Enum\nfrom jsonport import dump, load\n\nclass Status(Enum):\n    PENDING = \"pending\"\n    ACTIVE = \"active\"\n    COMPLETED = \"completed\"\n\n@dataclass\nclass Task:\n    name: str\n    status: Status\n\n# Create and serialize\ntask = Task(\"Test task\", Status.PENDING)\ndata = dump(task)\n\n# Deserialize and compare\nrestored_task = load(data, Task)\n\n# Enum comparison works correctly\nprint(restored_task.status == Status.PENDING)  # True\nprint(restored_task.status is Status.PENDING)  # True\nprint(restored_task.status.value == \"pending\")  # True\n</code></pre> <p>This comprehensive guide shows how to effectively use enums with JsonPort, including advanced patterns, error handling, and performance considerations. </p>"},{"location":"user-guide/advanced-usage/","title":"Advanced Usage","text":"<p>Explore advanced features and patterns for complex use cases with JsonPort.</p>"},{"location":"user-guide/advanced-usage/#nested-structures","title":"Nested Structures","text":"<p>JsonPort handles complex nested objects seamlessly:</p> <pre><code>from dataclasses import dataclass\nfrom typing import List, Dict, Optional\nfrom datetime import datetime\n\n@dataclass\nclass Address:\n    street: str\n    city: str\n    country: str\n    postal_code: str\n\n@dataclass\nclass Contact:\n    email: str\n    phone: Optional[str] = None\n\n@dataclass\nclass Company:\n    name: str\n    founded: datetime\n    employees: int\n    address: Address\n    contacts: List[Contact]\n    departments: Dict[str, List[str]]\n\n# Create complex nested structure\ncompany = Company(\n    name=\"TechCorp\",\n    founded=datetime(2020, 1, 1),\n    employees=150,\n    address=Address(\n        street=\"123 Tech Street\",\n        city=\"San Francisco\",\n        country=\"USA\",\n        postal_code=\"94105\"\n    ),\n    contacts=[\n        Contact(\"info@techcorp.com\"),\n        Contact(\"support@techcorp.com\", \"+1-555-0123\")\n    ],\n    departments={\n        \"Engineering\": [\"Backend\", \"Frontend\", \"DevOps\"],\n        \"Sales\": [\"Enterprise\", \"SMB\"],\n        \"Marketing\": [\"Digital\", \"Content\"]\n    }\n)\n\n# Serialize complex structure\ndata = dump(company)\n\n# Deserialize with full type preservation\nrestored_company = load(data, Company)\n</code></pre>"},{"location":"user-guide/advanced-usage/#generic-types","title":"Generic Types","text":"<p>JsonPort supports generic types and complex type hints:</p> <pre><code>from typing import Generic, TypeVar, Union, Any\n\nT = TypeVar('T')\n\n@dataclass\nclass Result(Generic[T]):\n    success: bool\n    data: Optional[T]\n    error: Optional[str]\n\n@dataclass\nclass User:\n    name: str\n    age: int\n\n# Use with generic types\nresult = Result[User](\n    success=True,\n    data=User(\"John\", 30),\n    error=None\n)\n\ndata = dump(result)\nrestored_result = load(data, Result[User])\n</code></pre>"},{"location":"user-guide/advanced-usage/#union-types","title":"Union Types","text":"<p>Handle multiple possible types:</p> <pre><code>from typing import Union\n\n@dataclass\nclass Config:\n    value: Union[str, int, float, bool]\n    metadata: Dict[str, Any]\n\nconfig = Config(\n    value=42,  # int\n    metadata={\"type\": \"integer\", \"description\": \"Sample value\"}\n)\n\ndata = dump(config)\nrestored_config = load(data, Config)\n</code></pre>"},{"location":"user-guide/advanced-usage/#optional-fields","title":"Optional Fields","text":"<p>Handle optional fields with default values:</p> <pre><code>@dataclass\nclass Product:\n    id: int\n    name: str\n    description: Optional[str] = None\n    price: Optional[float] = None\n    tags: List[str] = None\n\n# Create with minimal data\nproduct1 = Product(id=1, name=\"Laptop\")\n\n# Create with full data\nproduct2 = Product(\n    id=2,\n    name=\"Mouse\",\n    description=\"Wireless mouse\",\n    price=29.99,\n    tags=[\"electronics\", \"wireless\"]\n)\n\ndata1 = dump(product1)\ndata2 = dump(product2)\n</code></pre>"},{"location":"user-guide/advanced-usage/#custom-type-handling","title":"Custom Type Handling","text":"<p>For types not natively supported, you can extend JsonPort:</p> <pre><code>from decimal import Decimal\nfrom jsonport import JsonPortEncoder\n\n# Custom encoder for Decimal\nclass CustomEncoder(JsonPortEncoder):\n    def default(self, obj):\n        if isinstance(obj, Decimal):\n            return str(obj)\n        return super().default(obj)\n\n# Use custom encoder\ndata = dump(product, encoder=CustomEncoder)\n</code></pre>"},{"location":"user-guide/advanced-usage/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/advanced-usage/#caching-benefits","title":"Caching Benefits","text":"<p>JsonPort automatically caches type information:</p> <pre><code>import time\nfrom dataclasses import dataclass\n\n@dataclass\nclass PerformanceTest:\n    id: int\n    name: str\n    values: List[float]\n\n# First call - slower (type analysis)\nstart = time.time()\ndata1 = dump(PerformanceTest(1, \"test\", [1.1, 2.2, 3.3]))\nfirst_call = time.time() - start\n\n# Subsequent calls - faster (cached)\nstart = time.time()\nfor i in range(1000):\n    data = dump(PerformanceTest(i, f\"test{i}\", [1.1, 2.2, 3.3]))\nsubsequent_calls = time.time() - start\n\nprint(f\"First call: {first_call:.4f}s\")\nprint(f\"1000 calls: {subsequent_calls:.4f}s\")\n</code></pre>"},{"location":"user-guide/advanced-usage/#batch-processing","title":"Batch Processing","text":"<p>Process multiple objects efficiently:</p> <pre><code># Efficient batch processing\nusers = [\n    User(f\"user{i}\", 20 + i) \n    for i in range(1000)\n]\n\n# Serialize all at once\ndata_list = [dump(user) for user in users]\n\n# Deserialize all at once\nrestored_users = [load(data, User) for data in data_list]\n</code></pre>"},{"location":"user-guide/advanced-usage/#error-recovery","title":"Error Recovery","text":"<p>Implement robust error handling for production:</p> <pre><code>from jsonport import JsonPortError\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef safe_load(data, target_class, fallback=None):\n    \"\"\"Safely load data with fallback on error.\"\"\"\n    try:\n        return load(data, target_class)\n    except JsonPortError as e:\n        logger.error(f\"Failed to load {target_class.__name__}: {e}\")\n        return fallback\n    except Exception as e:\n        logger.error(f\"Unexpected error loading {target_class.__name__}: {e}\")\n        return fallback\n\n# Usage\nuser = safe_load(invalid_data, User, User(\"Unknown\", 0))\n</code></pre>"},{"location":"user-guide/advanced-usage/#validation-patterns","title":"Validation Patterns","text":"<p>Add custom validation to your dataclasses:</p> <pre><code>from dataclasses import dataclass, field\nfrom typing import List\n\n@dataclass\nclass ValidatedUser:\n    name: str\n    age: int\n    email: str\n\n    def __post_init__(self):\n        if self.age &lt; 0:\n            raise ValueError(\"Age cannot be negative\")\n        if \"@\" not in self.email:\n            raise ValueError(\"Invalid email format\")\n\n# This will raise ValueError\ntry:\n    user = ValidatedUser(\"John\", -5, \"invalid-email\")\nexcept ValueError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"user-guide/advanced-usage/#integration-patterns","title":"Integration Patterns","text":""},{"location":"user-guide/advanced-usage/#with-web-frameworks","title":"With Web Frameworks","text":"<pre><code>from flask import Flask, request, jsonify\nfrom jsonport import dump, load\n\napp = Flask(__name__)\n\n@app.route('/api/users', methods=['POST'])\ndef create_user():\n    try:\n        data = request.get_json()\n        user = load(data, User)\n        # Process user...\n        return jsonify(dump(user)), 201\n    except JsonPortError as e:\n        return jsonify({\"error\": str(e)}), 400\n\n@app.route('/api/users/&lt;int:user_id&gt;')\ndef get_user(user_id):\n    user = get_user_from_db(user_id)\n    return jsonify(dump(user))\n</code></pre>"},{"location":"user-guide/advanced-usage/#with-databases","title":"With Databases","text":"<pre><code>import sqlite3\nfrom jsonport import dump, load\n\ndef save_user_to_db(user):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n\n    # Serialize user data\n    user_data = dump(user)\n\n    cursor.execute(\n        \"INSERT INTO users (data) VALUES (?)\",\n        (json.dumps(user_data),)\n    )\n    conn.commit()\n    conn.close()\n\ndef load_user_from_db(user_id):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n\n    cursor.execute(\"SELECT data FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    conn.close()\n\n    if result:\n        user_data = json.loads(result[0])\n        return load(user_data, User)\n    return None\n</code></pre>"},{"location":"user-guide/advanced-usage/#next-steps","title":"Next Steps","text":"<ul> <li>File Operations - Working with files</li> <li>Error Handling - Error handling patterns</li> <li>Examples - More practical examples</li> <li>API Reference - Complete API documentation </li> </ul>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>Learn the fundamental functions and patterns for using JsonPort effectively.</p>"},{"location":"user-guide/basic-usage/#core-functions","title":"Core Functions","text":"<p>JsonPort provides four main functions for serialization and deserialization:</p>"},{"location":"user-guide/basic-usage/#dump-serialize-objects","title":"<code>dump()</code> - Serialize Objects","text":"<p>Convert Python objects to JSON-serializable data:</p> <pre><code>from jsonport import dump\nfrom dataclasses import dataclass\n\n@dataclass\nclass User:\n    name: str\n    age: int\n\nuser = User(\"John\", 30)\ndata = dump(user)\nprint(data)\n# Output: {\"name\": \"John\", \"age\": 30}\n</code></pre>"},{"location":"user-guide/basic-usage/#load-deserialize-objects","title":"<code>load()</code> - Deserialize Objects","text":"<p>Convert JSON data back to Python objects:</p> <pre><code>from jsonport import load\n\ndata = {\"name\": \"John\", \"age\": 30}\nuser = load(data, User)\nprint(user.name)  # \"John\"\nprint(user.age)   # 30\n</code></pre>"},{"location":"user-guide/basic-usage/#dump_file-save-to-file","title":"<code>dump_file()</code> - Save to File","text":"<p>Serialize and save objects directly to files:</p> <pre><code>from jsonport import dump_file\n\nuser = User(\"John\", 30)\ndump_file(user, \"user.json\")\n# Creates user.json with the serialized data\n</code></pre>"},{"location":"user-guide/basic-usage/#load_file-load-from-file","title":"<code>load_file()</code> - Load from File","text":"<p>Load and deserialize objects from files:</p> <pre><code>from jsonport import load_file\n\nuser = load_file(\"user.json\", User)\nprint(user.name)  # \"John\"\n</code></pre>"},{"location":"user-guide/basic-usage/#supported-types","title":"Supported Types","text":""},{"location":"user-guide/basic-usage/#primitive-types","title":"Primitive Types","text":"<pre><code># All basic Python types work automatically\ndata = dump({\n    \"string\": \"hello\",\n    \"integer\": 42,\n    \"float\": 3.14,\n    \"boolean\": True,\n    \"none\": None\n})\n</code></pre>"},{"location":"user-guide/basic-usage/#dataclasses","title":"Dataclasses","text":"<pre><code>from dataclasses import dataclass\n\n@dataclass\nclass Product:\n    id: int\n    name: str\n    price: float\n    in_stock: bool\n\nproduct = Product(1, \"Laptop\", 999.99, True)\ndata = dump(product)\n# Output: {\"id\": 1, \"name\": \"Laptop\", \"price\": 999.99, \"in_stock\": true}\n</code></pre>"},{"location":"user-guide/basic-usage/#enums","title":"Enums","text":"<pre><code>from enum import Enum\n\nclass Status(Enum):\n    PENDING = \"pending\"\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n\n@dataclass\nclass Task:\n    title: str\n    status: Status\n\ntask = Task(\"Complete docs\", Status.PENDING)\ndata = dump(task)\n# Output: {\"title\": \"Complete docs\", \"status\": \"pending\"}\n</code></pre>"},{"location":"user-guide/basic-usage/#datetime-objects","title":"DateTime Objects","text":"<pre><code>from datetime import datetime, date, time\n\n@dataclass\nclass Event:\n    name: str\n    date: date\n    time: time\n    created_at: datetime\n\nevent = Event(\n    \"Meeting\",\n    date(2024, 1, 15),\n    time(14, 30),\n    datetime.now()\n)\n\ndata = dump(event)\n# Output: {\n#   \"name\": \"Meeting\",\n#   \"date\": \"2024-01-15\",\n#   \"time\": \"14:30:00\",\n#   \"created_at\": \"2024-01-15T14:30:00\"\n# }\n</code></pre>"},{"location":"user-guide/basic-usage/#collections","title":"Collections","text":"<pre><code>@dataclass\nclass ShoppingCart:\n    items: list[str]\n    quantities: dict[str, int]\n    tags: set[str]\n\ncart = ShoppingCart(\n    items=[\"apple\", \"banana\"],\n    quantities={\"apple\": 3, \"banana\": 2},\n    tags={\"fruits\", \"organic\"}\n)\n\ndata = dump(cart)\n# Output: {\n#   \"items\": [\"apple\", \"banana\"],\n#   \"quantities\": {\"apple\": 3, \"banana\": 2},\n#   \"tags\": [\"fruits\", \"organic\"]\n# }\n</code></pre>"},{"location":"user-guide/basic-usage/#type-safety","title":"Type Safety","text":"<p>JsonPort provides automatic type validation:</p> <pre><code># This will work\ndata = {\"name\": \"John\", \"age\": 30}\nuser = load(data, User)\n\n# This will raise JsonPortError\ntry:\n    data = {\"name\": \"John\", \"age\": \"thirty\"}  # age should be int\n    user = load(data, User)\nexcept JsonPortError as e:\n    print(f\"Type error: {e}\")\n</code></pre>"},{"location":"user-guide/basic-usage/#error-handling","title":"Error Handling","text":"<p>Always handle potential errors in production code:</p> <pre><code>from jsonport import JsonPortError\n\ntry:\n    data = dump(complex_object)\nexcept JsonPortError as e:\n    print(f\"Serialization failed: {e}\")\n\ntry:\n    user = load_file(\"user.json\", User)\nexcept FileNotFoundError:\n    print(\"File not found\")\nexcept JsonPortError as e:\n    print(f\"Deserialization failed: {e}\")\n</code></pre>"},{"location":"user-guide/basic-usage/#performance-tips","title":"Performance Tips","text":"<ol> <li>Reuse types: JsonPort caches type information for better performance</li> <li>Use type hints: Always define proper type hints for optimal performance</li> <li>Batch operations: Process multiple objects together when possible</li> </ol> <pre><code># Good - types are cached\nusers = [User(\"John\", 30), User(\"Jane\", 25)]\nfor user in users:\n    data = dump(user)  # Fast after first call\n\n# Better - batch processing\ndata_list = [dump(user) for user in users]\n</code></pre>"},{"location":"user-guide/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Usage - Explore advanced features</li> <li>Examples - Practical examples</li> <li>API Reference - Complete API documentation </li> </ul>"},{"location":"user-guide/best-practices/","title":"Best Practices","text":"<p>This guide covers best practices for using JsonPort effectively in your applications, including design patterns, performance optimization, and common pitfalls to avoid.</p>"},{"location":"user-guide/best-practices/#data-structure-design","title":"Data Structure Design","text":""},{"location":"user-guide/best-practices/#1-use-dataclasses-for-complex-objects","title":"1. Use Dataclasses for Complex Objects","text":"<pre><code>from dataclasses import dataclass, field\nfrom typing import List, Dict, Optional\nfrom datetime import datetime\n\n# Good: Well-structured dataclass\n@dataclass\nclass User:\n    id: int\n    name: str\n    email: str\n    created_at: datetime\n    tags: List[str] = field(default_factory=list)\n    metadata: Optional[Dict[str, str]] = None\n\n# Avoid: Using plain dictionaries\nuser_dict = {\n    \"id\": 1,\n    \"name\": \"John\",\n    \"email\": \"john@example.com\",\n    # ... more fields\n}\n</code></pre>"},{"location":"user-guide/best-practices/#2-define-clear-type-hints","title":"2. Define Clear Type Hints","text":"<pre><code>from typing import Union, Literal, NewType\nfrom dataclasses import dataclass\n\n# Good: Specific type hints\n@dataclass\nclass Configuration:\n    host: str\n    port: int\n    timeout: float\n    mode: Literal[\"development\", \"production\", \"testing\"]\n    retries: Union[int, None] = None\n\n# Use NewType for domain-specific types\nUserId = NewType('UserId', int)\nEmail = NewType('Email', str)\n\n@dataclass\nclass User:\n    id: UserId\n    email: Email\n    name: str\n</code></pre>"},{"location":"user-guide/best-practices/#3-use-enums-for-constants","title":"3. Use Enums for Constants","text":"<pre><code>from enum import Enum\nfrom dataclasses import dataclass\n\nclass UserStatus(Enum):\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n    SUSPENDED = \"suspended\"\n\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n    MODERATOR = \"moderator\"\n\n@dataclass\nclass User:\n    name: str\n    status: UserStatus\n    role: UserRole\n</code></pre>"},{"location":"user-guide/best-practices/#serialization-patterns","title":"Serialization Patterns","text":""},{"location":"user-guide/best-practices/#1-consistent-naming-conventions","title":"1. Consistent Naming Conventions","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\n\n# Good: Consistent field naming\n@dataclass\nclass Product:\n    product_id: int\n    product_name: str\n    created_at: datetime\n    updated_at: datetime\n    is_active: bool\n\n# Avoid: Inconsistent naming\n@dataclass\nclass Product:\n    id: int\n    name: str\n    created: datetime\n    last_updated: datetime\n    active: bool\n</code></pre>"},{"location":"user-guide/best-practices/#2-handle-optional-fields","title":"2. Handle Optional Fields","text":"<pre><code>from dataclasses import dataclass, field\nfrom typing import Optional, List\n\n@dataclass\nclass Article:\n    title: str\n    content: str\n    author: str\n    tags: List[str] = field(default_factory=list)\n    published_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n    view_count: int = 0\n</code></pre>"},{"location":"user-guide/best-practices/#3-use-default-values-appropriately","title":"3. Use Default Values Appropriately","text":"<pre><code>from dataclasses import dataclass, field\nfrom typing import List, Dict\n\n@dataclass\nclass Settings:\n    # Use field() for mutable defaults\n    allowed_domains: List[str] = field(default_factory=list)\n    cache_settings: Dict[str, str] = field(default_factory=dict)\n\n    # Use simple defaults for immutable types\n    max_retries: int = 3\n    timeout: float = 30.0\n    debug_mode: bool = False\n</code></pre>"},{"location":"user-guide/best-practices/#error-handling","title":"Error Handling","text":""},{"location":"user-guide/best-practices/#1-validate-input-data","title":"1. Validate Input Data","text":"<pre><code>from jsonport import load, DeserializationError\nfrom dataclasses import dataclass\n\n@dataclass\nclass User:\n    name: str\n    age: int\n    email: str\n\ndef safe_load_user(data):\n    # Validate data structure\n    if not isinstance(data, dict):\n        raise ValueError(\"Data must be a dictionary\")\n\n    required_fields = [\"name\", \"age\", \"email\"]\n    for field in required_fields:\n        if field not in data:\n            raise ValueError(f\"Missing required field: {field}\")\n\n    # Validate age\n    if not isinstance(data[\"age\"], int) or data[\"age\"] &lt; 0:\n        raise ValueError(\"Age must be a positive integer\")\n\n    try:\n        return load(data, User)\n    except DeserializationError as e:\n        raise ValueError(f\"Invalid user data: {e}\")\n</code></pre>"},{"location":"user-guide/best-practices/#2-handle-partial-failures","title":"2. Handle Partial Failures","text":"<pre><code>from jsonport import load, DeserializationError\nfrom typing import List, Tuple\n\ndef load_users_with_errors(users_data: List[dict]) -&gt; Tuple[List[User], List[str]]:\n    \"\"\"Load users and collect errors for failed ones\"\"\"\n    users = []\n    errors = []\n\n    for i, user_data in enumerate(users_data):\n        try:\n            user = load(user_data, User)\n            users.append(user)\n        except DeserializationError as e:\n            errors.append(f\"User {i}: {e}\")\n\n    return users, errors\n</code></pre>"},{"location":"user-guide/best-practices/#3-provide-meaningful-error-messages","title":"3. Provide Meaningful Error Messages","text":"<pre><code>from jsonport import load, DeserializationError\n\ndef load_with_context(data, target_class, context=\"\"):\n    try:\n        return load(data, target_class)\n    except DeserializationError as e:\n        raise DeserializationError(\n            f\"{context}: {e.message}\",\n            expected_type=e.expected_type,\n            value=e.value,\n            field=e.field\n        )\n\n# Usage\ntry:\n    user = load_with_context(user_data, User, \"Loading user from API\")\nexcept DeserializationError as e:\n    print(f\"Failed to load user: {e}\")\n</code></pre>"},{"location":"user-guide/best-practices/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/best-practices/#1-reuse-classes-and-objects","title":"1. Reuse Classes and Objects","text":"<pre><code>from jsonport import dump, load\nfrom dataclasses import dataclass\n\n@dataclass\nclass Config:\n    host: str\n    port: int\n    timeout: float\n\n# Good: Reuse the same class\nconfig_class = Config\nconfigs = []\n\nfor config_data in configs_data:\n    config = load(config_data, config_class)\n    configs.append(config)\n\n# Avoid: Creating new classes\nfor config_data in configs_data:\n    @dataclass\n    class Config:  # This bypasses caching\n        host: str\n        port: int\n        timeout: float\n    config = load(config_data, Config)\n</code></pre>"},{"location":"user-guide/best-practices/#2-batch-operations","title":"2. Batch Operations","text":"<pre><code>from jsonport import dump, load\nfrom typing import List\n\ndef batch_serialize(objects: List[object]) -&gt; List[dict]:\n    \"\"\"Serialize multiple objects efficiently\"\"\"\n    return [dump(obj) for obj in objects]\n\ndef batch_deserialize(data_list: List[dict], target_class) -&gt; List[object]:\n    \"\"\"Deserialize multiple objects efficiently\"\"\"\n    return [load(data, target_class) for data in data_list]\n\n# Usage\nusers = [User(\"John\", 30), User(\"Jane\", 25)]\nuser_data = batch_serialize(users)\nrestored_users = batch_deserialize(user_data, User)\n</code></pre>"},{"location":"user-guide/best-practices/#3-use-efficient-data-structures","title":"3. Use Efficient Data Structures","text":"<pre><code>from typing import Set, Dict, List\nfrom dataclasses import dataclass\n\n@dataclass\nclass UserProfile:\n    # Use Set for unique collections\n    permissions: Set[str]\n\n    # Use Dict for key-value lookups\n    settings: Dict[str, str]\n\n    # Use List for ordered collections\n    recent_activities: List[str]\n</code></pre>"},{"location":"user-guide/best-practices/#file-operations","title":"File Operations","text":""},{"location":"user-guide/best-practices/#1-handle-file-paths-safely","title":"1. Handle File Paths Safely","text":"<pre><code>import os\nfrom pathlib import Path\nfrom jsonport import dump_to_file, load_from_file\n\ndef safe_save_config(config, filepath):\n    # Ensure directory exists\n    Path(filepath).parent.mkdir(parents=True, exist_ok=True)\n\n    # Use temporary file for atomic writes\n    temp_path = f\"{filepath}.tmp\"\n    try:\n        dump_to_file(config, temp_path)\n        os.replace(temp_path, filepath)\n    except Exception:\n        if os.path.exists(temp_path):\n            os.remove(temp_path)\n        raise\n\ndef safe_load_config(filepath, config_class):\n    if not os.path.exists(filepath):\n        raise FileNotFoundError(f\"Config file not found: {filepath}\")\n\n    try:\n        return load_from_file(filepath, config_class)\n    except Exception as e:\n        raise ValueError(f\"Failed to load config from {filepath}: {e}\")\n</code></pre>"},{"location":"user-guide/best-practices/#2-use-compression-for-large-files","title":"2. Use Compression for Large Files","text":"<pre><code>from jsonport import dump_to_file, load_from_file\n\n# For large datasets, use compression\ndef save_large_dataset(data, filepath):\n    dump_to_file(data, filepath, compress=True)\n\ndef load_large_dataset(filepath, target_class):\n    return load_from_file(filepath, target_class, decompress=True)\n</code></pre>"},{"location":"user-guide/best-practices/#api-design","title":"API Design","text":""},{"location":"user-guide/best-practices/#1-version-your-data-structures","title":"1. Version Your Data Structures","text":"<pre><code>from dataclasses import dataclass, field\nfrom typing import Optional\n\n@dataclass\nclass UserV1:\n    name: str\n    age: int\n\n@dataclass\nclass UserV2:\n    name: str\n    age: int\n    email: Optional[str] = None\n    version: str = field(default=\"v2\", init=False)\n\ndef migrate_user_v1_to_v2(user_v1_data):\n    user_v1 = load(user_v1_data, UserV1)\n    return UserV2(\n        name=user_v1.name,\n        age=user_v1.age,\n        email=None\n    )\n</code></pre>"},{"location":"user-guide/best-practices/#2-use-schema-validation","title":"2. Use Schema Validation","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Dict, Any\n\n@dataclass\nclass APIResponse:\n    success: bool\n    data: Dict[str, Any]\n    message: str\n    timestamp: datetime\n\ndef validate_api_response(response_data):\n    try:\n        response = load(response_data, APIResponse)\n        return response\n    except DeserializationError as e:\n        raise ValueError(f\"Invalid API response format: {e}\")\n</code></pre>"},{"location":"user-guide/best-practices/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"user-guide/best-practices/#1-test-serialization-round-trip","title":"1. Test Serialization Round-trip","text":"<pre><code>import pytest\nfrom jsonport import dump, load\n\ndef test_serialization_roundtrip():\n    original_user = User(\"John\", 30, \"john@example.com\")\n\n    # Serialize\n    user_data = dump(original_user)\n\n    # Deserialize\n    restored_user = load(user_data, User)\n\n    # Verify equality\n    assert restored_user == original_user\n    assert restored_user.name == original_user.name\n    assert restored_user.age == original_user.age\n    assert restored_user.email == original_user.email\n</code></pre>"},{"location":"user-guide/best-practices/#2-test-error-cases","title":"2. Test Error Cases","text":"<pre><code>import pytest\nfrom jsonport import load, DeserializationError\n\ndef test_invalid_data():\n    invalid_data = {\n        \"name\": \"John\",\n        \"age\": \"not_a_number\",  # Invalid type\n        \"email\": \"john@example.com\"\n    }\n\n    with pytest.raises(DeserializationError) as exc_info:\n        load(invalid_data, User)\n\n    assert \"Cannot deserialize\" in str(exc_info.value)\n</code></pre>"},{"location":"user-guide/best-practices/#3-test-edge-cases","title":"3. Test Edge Cases","text":"<pre><code>def test_empty_collections():\n    user = User(\n        name=\"John\",\n        age=30,\n        email=\"john@example.com\",\n        tags=[],  # Empty list\n        metadata={}  # Empty dict\n    )\n\n    user_data = dump(user)\n    restored_user = load(user_data, User)\n\n    assert restored_user.tags == []\n    assert restored_user.metadata == {}\n</code></pre>"},{"location":"user-guide/best-practices/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"user-guide/best-practices/#1-avoid-circular-references","title":"1. Avoid Circular References","text":"<pre><code># Bad: Circular references\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nnode1 = Node(1)\nnode2 = Node(2)\nnode1.next = node2\nnode2.next = node1  # Circular reference!\n\n# This will raise SerializationError\n# data = dump(node1)\n\n# Good: Break circular references\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next_id = None  # Store ID instead of reference\n</code></pre>"},{"location":"user-guide/best-practices/#2-dont-overuse-optional-types","title":"2. Don't Overuse Optional Types","text":"<pre><code># Bad: Too many optional fields\n@dataclass\nclass User:\n    name: Optional[str] = None\n    age: Optional[int] = None\n    email: Optional[str] = None\n    phone: Optional[str] = None\n    address: Optional[str] = None\n\n# Good: Use separate classes for different contexts\n@dataclass\nclass UserBasic:\n    name: str\n    email: str\n\n@dataclass\nclass UserExtended(UserBasic):\n    age: Optional[int] = None\n    phone: Optional[str] = None\n    address: Optional[str] = None\n</code></pre>"},{"location":"user-guide/best-practices/#3-avoid-deep-nesting","title":"3. Avoid Deep Nesting","text":"<pre><code># Bad: Deep nesting\n@dataclass\nclass DeeplyNested:\n    level1: Dict[str, Dict[str, Dict[str, Dict[str, str]]]]\n\n# Good: Flatten structure\n@dataclass\nclass FlatStructure:\n    settings: Dict[str, str]\n    metadata: Dict[str, str]\n</code></pre> <p>Following these best practices will help you create robust, maintainable, and performant applications with JsonPort. </p>"},{"location":"user-guide/error-handling/","title":"Error Handling","text":"<p>JsonPort provides comprehensive error handling with detailed error messages to help you debug serialization and deserialization issues.</p>"},{"location":"user-guide/error-handling/#error-types","title":"Error Types","text":""},{"location":"user-guide/error-handling/#jsonporterror","title":"JsonPortError","text":"<p>The base exception class for all JsonPort errors:</p> <pre><code>from jsonport import JsonPortError\n\ntry:\n    # Your serialization/deserialization code\n    pass\nexcept JsonPortError as e:\n    print(f\"JsonPort error: {e}\")\n</code></pre>"},{"location":"user-guide/error-handling/#serializationerror","title":"SerializationError","text":"<p>Raised when serialization fails:</p> <pre><code>from jsonport import SerializationError\n\ntry:\n    data = dump(complex_object)\nexcept SerializationError as e:\n    print(f\"Serialization failed: {e}\")\n    print(f\"Object type: {e.object_type}\")\n    print(f\"Field: {e.field}\")\n</code></pre>"},{"location":"user-guide/error-handling/#deserializationerror","title":"DeserializationError","text":"<p>Raised when deserialization fails:</p> <pre><code>from jsonport import DeserializationError\n\ntry:\n    obj = load(data, TargetClass)\nexcept DeserializationError as e:\n    print(f\"Deserialization failed: {e}\")\n    print(f\"Expected type: {e.expected_type}\")\n    print(f\"Received value: {e.value}\")\n</code></pre>"},{"location":"user-guide/error-handling/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"user-guide/error-handling/#type-mismatch","title":"Type Mismatch","text":"<pre><code>from jsonport import load, DeserializationError\n\n@dataclass\nclass User:\n    name: str\n    age: int\n\n# This will raise DeserializationError\ntry:\n    user = load({\"name\": \"John\", \"age\": \"thirty\"}, User)\nexcept DeserializationError as e:\n    print(f\"Type error: {e}\")\n    # Output: Type error: Cannot deserialize 'thirty' to int\n</code></pre>"},{"location":"user-guide/error-handling/#missing-required-fields","title":"Missing Required Fields","text":"<pre><code>from jsonport import load, DeserializationError\n\n@dataclass\nclass User:\n    name: str\n    age: int\n\n# This will raise DeserializationError\ntry:\n    user = load({\"name\": \"John\"}, User)\nexcept DeserializationError as e:\n    print(f\"Missing field: {e}\")\n    # Output: Missing field: Required field 'age' not found\n</code></pre>"},{"location":"user-guide/error-handling/#invalid-enum-values","title":"Invalid Enum Values","text":"<pre><code>from enum import Enum\nfrom jsonport import load, DeserializationError\n\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n\n@dataclass\nclass User:\n    name: str\n    role: UserRole\n\n# This will raise DeserializationError\ntry:\n    user = load({\"name\": \"John\", \"role\": \"moderator\"}, User)\nexcept DeserializationError as e:\n    print(f\"Invalid enum: {e}\")\n    # Output: Invalid enum: 'moderator' is not a valid UserRole\n</code></pre>"},{"location":"user-guide/error-handling/#circular-references","title":"Circular References","text":"<pre><code>from jsonport import dump, SerializationError\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n# Create circular reference\nnode1 = Node(1)\nnode2 = Node(2)\nnode1.next = node2\nnode2.next = node1\n\n# This will raise SerializationError\ntry:\n    data = dump(node1)\nexcept SerializationError as e:\n    print(f\"Circular reference: {e}\")\n    # Output: Circular reference: Cannot serialize object with circular references\n</code></pre>"},{"location":"user-guide/error-handling/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"user-guide/error-handling/#1-use-specific-exception-types","title":"1. Use Specific Exception Types","text":"<pre><code>from jsonport import JsonPortError, SerializationError, DeserializationError\n\ndef safe_serialize(obj):\n    try:\n        return dump(obj)\n    except SerializationError as e:\n        logger.error(f\"Serialization failed: {e}\")\n        return None\n    except JsonPortError as e:\n        logger.error(f\"Unexpected JsonPort error: {e}\")\n        return None\n</code></pre>"},{"location":"user-guide/error-handling/#2-validate-data-before-deserialization","title":"2. Validate Data Before Deserialization","text":"<pre><code>from jsonport import load, DeserializationError\n\ndef safe_load_user(data):\n    # Validate required fields\n    if not isinstance(data, dict):\n        raise ValueError(\"Data must be a dictionary\")\n\n    if \"name\" not in data:\n        raise ValueError(\"User must have a name\")\n\n    if \"age\" not in data:\n        raise ValueError(\"User must have an age\")\n\n    try:\n        return load(data, User)\n    except DeserializationError as e:\n        logger.error(f\"Failed to load user: {e}\")\n        raise\n</code></pre>"},{"location":"user-guide/error-handling/#3-handle-partial-failures","title":"3. Handle Partial Failures","text":"<pre><code>from jsonport import load, DeserializationError\nfrom typing import List\n\ndef load_users_safely(users_data: List[dict]) -&gt; List[User]:\n    valid_users = []\n    errors = []\n\n    for i, user_data in enumerate(users_data):\n        try:\n            user = load(user_data, User)\n            valid_users.append(user)\n        except DeserializationError as e:\n            errors.append(f\"User {i}: {e}\")\n\n    if errors:\n        logger.warning(f\"Failed to load {len(errors)} users: {errors}\")\n\n    return valid_users\n</code></pre>"},{"location":"user-guide/error-handling/#4-custom-error-messages","title":"4. Custom Error Messages","text":"<pre><code>from jsonport import load, DeserializationError\n\ndef load_with_context(data, target_class, context=\"\"):\n    try:\n        return load(data, target_class)\n    except DeserializationError as e:\n        raise DeserializationError(\n            f\"{context}: {e.message}\",\n            expected_type=e.expected_type,\n            value=e.value,\n            field=e.field\n        )\n</code></pre>"},{"location":"user-guide/error-handling/#debugging-tips","title":"Debugging Tips","text":""},{"location":"user-guide/error-handling/#1-enable-debug-logging","title":"1. Enable Debug Logging","text":"<pre><code>import logging\n\n# Enable debug logging for JsonPort\nlogging.getLogger('jsonport').setLevel(logging.DEBUG)\n</code></pre>"},{"location":"user-guide/error-handling/#2-inspect-object-structure","title":"2. Inspect Object Structure","text":"<pre><code>from jsonport import dump\n\ndef debug_object(obj):\n    try:\n        data = dump(obj)\n        print(\"Serialization successful\")\n        print(f\"Result: {data}\")\n    except Exception as e:\n        print(f\"Serialization failed: {e}\")\n        print(f\"Object type: {type(obj)}\")\n        print(f\"Object attributes: {dir(obj)}\")\n</code></pre>"},{"location":"user-guide/error-handling/#3-validate-type-hints","title":"3. Validate Type Hints","text":"<pre><code>from typing import get_type_hints\n\ndef validate_dataclass(cls):\n    hints = get_type_hints(cls)\n    print(f\"Type hints for {cls.__name__}:\")\n    for field, hint in hints.items():\n        print(f\"  {field}: {hint}\")\n</code></pre>"},{"location":"user-guide/error-handling/#error-recovery","title":"Error Recovery","text":""},{"location":"user-guide/error-handling/#1-fallback-values","title":"1. Fallback Values","text":"<pre><code>from jsonport import load, DeserializationError\n\ndef load_with_fallback(data, target_class, fallback_value=None):\n    try:\n        return load(data, target_class)\n    except DeserializationError:\n        return fallback_value\n</code></pre>"},{"location":"user-guide/error-handling/#2-partial-deserialization","title":"2. Partial Deserialization","text":"<pre><code>from jsonport import load, DeserializationError\nfrom dataclasses import fields\n\ndef load_partial(data, target_class):\n    \"\"\"Load object with only valid fields\"\"\"\n    result = {}\n\n    for field in fields(target_class):\n        if field.name in data:\n            try:\n                result[field.name] = load(data[field.name], field.type)\n            except DeserializationError:\n                # Skip invalid field\n                continue\n\n    return target_class(**result)\n</code></pre> <p>This comprehensive error handling approach ensures your applications can gracefully handle serialization and deserialization issues while providing useful debugging information. </p>"},{"location":"user-guide/file-operations/","title":"File Operations","text":"<p>Learn how to work with files using JsonPort's built-in file I/O capabilities.</p>"},{"location":"user-guide/file-operations/#basic-file-operations","title":"Basic File Operations","text":""},{"location":"user-guide/file-operations/#saving-objects-to-files","title":"Saving Objects to Files","text":"<pre><code>from jsonport import dump_file, load_file\nfrom dataclasses import dataclass\n\n@dataclass\nclass User:\n    name: str\n    age: int\n    email: str\n\nuser = User(\"John Doe\", 30, \"john@example.com\")\n\n# Save to JSON file\ndump_file(user, \"user.json\")\n\n# Load from JSON file\nloaded_user = load_file(\"user.json\", User)\nprint(loaded_user.name)  # \"John Doe\"\n</code></pre>"},{"location":"user-guide/file-operations/#overwriting-files","title":"Overwriting Files","text":"<p>By default, <code>dump_file</code> overwrites existing files:</p> <pre><code># This will overwrite user.json if it exists\ndump_file(user, \"user.json\")\n\n# To prevent overwriting, set overwrite=False\ntry:\n    dump_file(user, \"user.json\", overwrite=False)\nexcept FileExistsError:\n    print(\"File already exists!\")\n</code></pre>"},{"location":"user-guide/file-operations/#compression-support","title":"Compression Support","text":"<p>JsonPort automatically handles gzip compression for files with <code>.gz</code> extension:</p>"},{"location":"user-guide/file-operations/#saving-compressed-files","title":"Saving Compressed Files","text":"<pre><code># Save with automatic gzip compression\ndump_file(user, \"user.json.gz\")\n\n# The file will be compressed automatically\n# File size will be smaller than the original JSON\n</code></pre>"},{"location":"user-guide/file-operations/#loading-compressed-files","title":"Loading Compressed Files","text":"<pre><code># Load compressed file (automatic decompression)\ncompressed_user = load_file(\"user.json.gz\", User)\nprint(compressed_user.name)  # \"John Doe\"\n</code></pre>"},{"location":"user-guide/file-operations/#compression-benefits","title":"Compression Benefits","text":"<pre><code>import os\n\n# Save uncompressed\ndump_file(large_object, \"data.json\")\nuncompressed_size = os.path.getsize(\"data.json\")\n\n# Save compressed\ndump_file(large_object, \"data.json.gz\")\ncompressed_size = os.path.getsize(\"data.json.gz\")\n\nprint(f\"Uncompressed: {uncompressed_size} bytes\")\nprint(f\"Compressed: {compressed_size} bytes\")\nprint(f\"Compression ratio: {compressed_size/uncompressed_size:.2%}\")\n</code></pre>"},{"location":"user-guide/file-operations/#batch-file-operations","title":"Batch File Operations","text":""},{"location":"user-guide/file-operations/#saving-multiple-objects","title":"Saving Multiple Objects","text":"<pre><code>users = [\n    User(\"Alice\", 25, \"alice@example.com\"),\n    User(\"Bob\", 30, \"bob@example.com\"),\n    User(\"Charlie\", 35, \"charlie@example.com\")\n]\n\n# Save each user to separate files\nfor i, user in enumerate(users):\n    dump_file(user, f\"user_{i}.json\")\n\n# Or save all to a single file\nimport json\nall_users_data = [dump(user) for user in users]\nwith open(\"all_users.json\", \"w\") as f:\n    json.dump(all_users_data, f, indent=2)\n</code></pre>"},{"location":"user-guide/file-operations/#loading-multiple-objects","title":"Loading Multiple Objects","text":"<pre><code># Load multiple files\nloaded_users = []\nfor i in range(len(users)):\n    user = load_file(f\"user_{i}.json\", User)\n    loaded_users.append(user)\n\n# Or load from single file\nwith open(\"all_users.json\", \"r\") as f:\n    all_users_data = json.load(f)\n\nloaded_users = [load(user_data, User) for user_data in all_users_data]\n</code></pre>"},{"location":"user-guide/file-operations/#error-handling","title":"Error Handling","text":""},{"location":"user-guide/file-operations/#file-not-found","title":"File Not Found","text":"<pre><code>from jsonport import JsonPortError\n\ntry:\n    user = load_file(\"nonexistent.json\", User)\nexcept FileNotFoundError:\n    print(\"File not found\")\n    # Create default user\n    user = User(\"Unknown\", 0, \"unknown@example.com\")\n</code></pre>"},{"location":"user-guide/file-operations/#invalid-json","title":"Invalid JSON","text":"<pre><code>try:\n    user = load_file(\"corrupted.json\", User)\nexcept JsonPortError as e:\n    print(f\"Invalid JSON data: {e}\")\n    # Handle corrupted file\n</code></pre>"},{"location":"user-guide/file-operations/#permission-errors","title":"Permission Errors","text":"<pre><code>try:\n    dump_file(user, \"/root/restricted.json\")\nexcept PermissionError:\n    print(\"Permission denied\")\n    # Try alternative location\n    dump_file(user, \"./user.json\")\n</code></pre>"},{"location":"user-guide/file-operations/#file-path-handling","title":"File Path Handling","text":""},{"location":"user-guide/file-operations/#relative-and-absolute-paths","title":"Relative and Absolute Paths","text":"<pre><code>import os\n\n# Relative path (relative to current working directory)\ndump_file(user, \"data/user.json\")\n\n# Absolute path\ndump_file(user, \"/home/user/data/user.json\")\n\n# Using os.path for cross-platform compatibility\ndata_dir = os.path.join(\"data\", \"users\")\nos.makedirs(data_dir, exist_ok=True)\ndump_file(user, os.path.join(data_dir, \"user.json\"))\n</code></pre>"},{"location":"user-guide/file-operations/#creating-directories","title":"Creating Directories","text":"<pre><code>import os\n\n# Create directory if it doesn't exist\nos.makedirs(\"data/users\", exist_ok=True)\ndump_file(user, \"data/users/user.json\")\n</code></pre>"},{"location":"user-guide/file-operations/#performance-considerations","title":"Performance Considerations","text":""},{"location":"user-guide/file-operations/#large-files","title":"Large Files","text":"<p>For very large objects, consider streaming or chunking:</p> <pre><code># For large datasets, save in chunks\nchunk_size = 1000\nfor i in range(0, len(large_dataset), chunk_size):\n    chunk = large_dataset[i:i + chunk_size]\n    dump_file(chunk, f\"data_chunk_{i//chunk_size}.json\")\n</code></pre>"},{"location":"user-guide/file-operations/#compression-trade-offs","title":"Compression Trade-offs","text":"<pre><code>import time\n\n# Test compression vs speed\nstart = time.time()\ndump_file(large_object, \"data.json\")\nuncompressed_time = time.time() - start\n\nstart = time.time()\ndump_file(large_object, \"data.json.gz\")\ncompressed_time = time.time() - start\n\nprint(f\"Uncompressed save time: {uncompressed_time:.4f}s\")\nprint(f\"Compressed save time: {compressed_time:.4f}s\")\n</code></pre>"},{"location":"user-guide/file-operations/#integration-examples","title":"Integration Examples","text":""},{"location":"user-guide/file-operations/#configuration-files","title":"Configuration Files","text":"<pre><code>@dataclass\nclass AppConfig:\n    debug: bool\n    port: int\n    database_url: str\n    api_keys: dict[str, str]\n\n# Load configuration\nconfig = load_file(\"config.json\", AppConfig)\n\n# Save updated configuration\nconfig.debug = True\ndump_file(config, \"config.json\")\n</code></pre>"},{"location":"user-guide/file-operations/#data-backup","title":"Data Backup","text":"<pre><code>import shutil\nfrom datetime import datetime\n\n# Create backup with timestamp\ntimestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\nbackup_file = f\"backup_{timestamp}.json.gz\"\n\n# Save compressed backup\ndump_file(data, backup_file)\n\n# Verify backup\ntry:\n    backup_data = load_file(backup_file, DataType)\n    print(\"Backup verified successfully\")\nexcept Exception as e:\n    print(f\"Backup verification failed: {e}\")\n</code></pre>"},{"location":"user-guide/file-operations/#logging-data","title":"Logging Data","text":"<pre><code>import logging\nfrom jsonport import JsonPortError\n\nlogger = logging.getLogger(__name__)\n\ndef save_log_data(log_entry):\n    try:\n        dump_file(log_entry, \"logs/application.json.gz\")\n    except JsonPortError as e:\n        logger.error(f\"Failed to save log: {e}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error saving log: {e}\")\n</code></pre>"},{"location":"user-guide/file-operations/#best-practices","title":"Best Practices","text":"<ol> <li>Use compression for large files: <code>.gz</code> extension for automatic compression</li> <li>Handle errors gracefully: Always catch <code>FileNotFoundError</code> and <code>JsonPortError</code></li> <li>Use meaningful file names: Include timestamps or version numbers</li> <li>Create directories: Use <code>os.makedirs()</code> with <code>exist_ok=True</code></li> <li>Verify file operations: Check if files were created successfully</li> <li>Use absolute paths: For critical operations, use absolute paths</li> </ol>"},{"location":"user-guide/file-operations/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Usage - Explore advanced features</li> <li>Examples - More practical examples</li> <li>API Reference - Complete API documentation </li> </ul>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>Learn how to install JsonPort and set up your development environment.</p>"},{"location":"user-guide/installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.7 or higher</li> <li>pip: Latest version recommended</li> </ul>"},{"location":"user-guide/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"user-guide/installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<pre><code>pip install jsonport\n</code></pre>"},{"location":"user-guide/installation/#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/Luan1Schons/JsonPort.git\ncd JsonPort\npip install -e .\n</code></pre>"},{"location":"user-guide/installation/#development-installation","title":"Development Installation","text":"<p>For development and contributing:</p> <pre><code>git clone https://github.com/Luan1Schons/JsonPort.git\ncd JsonPort\npip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"user-guide/installation/#verify-installation","title":"Verify Installation","text":"<pre><code>import jsonport\nprint(jsonport.__version__)\n</code></pre>"},{"location":"user-guide/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"user-guide/installation/#for-testing","title":"For Testing","text":"<pre><code>pip install -e \".[test]\"\n</code></pre>"},{"location":"user-guide/installation/#for-development","title":"For Development","text":"<pre><code>pip install -e \".[dev]\"\n</code></pre>"},{"location":"user-guide/installation/#for-documentation","title":"For Documentation","text":"<pre><code>pip install -e \".[docs]\"\n</code></pre>"},{"location":"user-guide/installation/#python-version-support","title":"Python Version Support","text":"Version Status Notes Python 3.7 \u2705 Supported EOL - End of Life Python 3.8 \u2705 Supported Recommended minimum Python 3.9 \u2705 Supported Full features Python 3.10 \u2705 Supported Full features Python 3.11 \u2705 Supported Full features Python 3.12 \u2705 Supported Full features Python 3.13 \u2705 Supported Full features"},{"location":"user-guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/installation/#common-issues","title":"Common Issues","text":"<p>Import Error: Make sure you're using Python 3.7+ <pre><code>python --version\n</code></pre></p> <p>Permission Error: Use virtual environment <pre><code>python -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# or\nvenv\\Scripts\\activate     # Windows\n</code></pre></p> <p>Build Error: Update pip and setuptools <pre><code>pip install --upgrade pip setuptools wheel\n</code></pre></p>"},{"location":"user-guide/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start - Get started with JsonPort</li> <li>Examples - See practical examples</li> <li>API Reference - Complete API documentation </li> </ul>"},{"location":"user-guide/performance/","title":"Performance","text":"<p>JsonPort is designed for high performance with intelligent caching and optimizations. This guide covers performance characteristics, optimization techniques, and benchmarking.</p>"},{"location":"user-guide/performance/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"user-guide/performance/#caching-system","title":"Caching System","text":"<p>JsonPort uses intelligent caching to improve performance:</p> <ul> <li>Type hints cache: Stores resolved type hints (max 1024 entries)</li> <li>Optional type cache: Caches resolved Optional types (max 512 entries)</li> <li>Enum cache: Caches enum value mappings</li> <li>Dataclass field cache: Caches dataclass field information</li> </ul>"},{"location":"user-guide/performance/#memory-usage","title":"Memory Usage","text":"<pre><code>from jsonport import dump, load\nimport sys\n\n# Memory usage example\n@dataclass\nclass User:\n    name: str\n    age: int\n    email: str\n\nuser = User(\"John\", 30, \"john@example.com\")\n\n# Serialize\ndata = dump(user)\nprint(f\"Serialized size: {sys.getsizeof(data)} bytes\")\n\n# Deserialize\nrestored_user = load(data, User)\nprint(f\"Object size: {sys.getsizeof(restored_user)} bytes\")\n</code></pre>"},{"location":"user-guide/performance/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/performance/#1-reuse-objects","title":"1. Reuse Objects","text":"<pre><code>from jsonport import dump, load\nfrom dataclasses import dataclass\n\n@dataclass\nclass Config:\n    host: str\n    port: int\n    timeout: float\n\n# Good: Reuse the same class\nconfig = Config(\"localhost\", 8080, 30.0)\ndata = dump(config)\nrestored_config = load(data, Config)\n\n# Avoid: Creating new classes frequently\n# This bypasses caching benefits\n</code></pre>"},{"location":"user-guide/performance/#2-use-type-hints-consistently","title":"2. Use Type Hints Consistently","text":"<pre><code>from typing import List, Dict, Optional\nfrom dataclasses import dataclass\n\n# Good: Consistent type hints\n@dataclass\nclass User:\n    name: str\n    age: int\n    tags: List[str]\n    metadata: Optional[Dict[str, str]] = None\n\n# Avoid: Inconsistent or missing type hints\n# This reduces caching effectiveness\n</code></pre>"},{"location":"user-guide/performance/#3-optimize-large-collections","title":"3. Optimize Large Collections","text":"<pre><code>from jsonport import dump, load\nfrom typing import List\n\n@dataclass\nclass Item:\n    id: int\n    name: str\n    value: float\n\n# For large collections, consider chunking\ndef process_large_list(items: List[Item], chunk_size: int = 1000):\n    results = []\n\n    for i in range(0, len(items), chunk_size):\n        chunk = items[i:i + chunk_size]\n        chunk_data = dump(chunk)\n        # Process chunk_data\n        results.extend(load(chunk_data, List[Item]))\n\n    return results\n</code></pre>"},{"location":"user-guide/performance/#4-use-efficient-data-structures","title":"4. Use Efficient Data Structures","text":"<pre><code>from jsonport import dump, load\nfrom typing import Dict, Set\n\n# Good: Use appropriate collections\n@dataclass\nclass UserProfile:\n    name: str\n    permissions: Set[str]  # Fast lookups\n    settings: Dict[str, str]  # Key-value pairs\n\n# Avoid: Using lists for set operations\n# user.permissions: List[str]  # Slower lookups\n</code></pre>"},{"location":"user-guide/performance/#benchmarking","title":"Benchmarking","text":""},{"location":"user-guide/performance/#basic-benchmark","title":"Basic Benchmark","text":"<pre><code>import time\nfrom jsonport import dump, load\nfrom dataclasses import dataclass\n\n@dataclass\nclass BenchmarkData:\n    id: int\n    name: str\n    values: list[float]\n    metadata: dict[str, str]\n\ndef benchmark_serialization(data, iterations=1000):\n    start_time = time.time()\n\n    for _ in range(iterations):\n        result = dump(data)\n\n    end_time = time.time()\n    avg_time = (end_time - start_time) / iterations\n    print(f\"Average serialization time: {avg_time * 1000:.2f} ms\")\n\ndef benchmark_deserialization(data_dict, target_class, iterations=1000):\n    start_time = time.time()\n\n    for _ in range(iterations):\n        result = load(data_dict, target_class)\n\n    end_time = time.time()\n    avg_time = (end_time - start_time) / iterations\n    print(f\"Average deserialization time: {avg_time * 1000:.2f} ms\")\n\n# Run benchmark\ntest_data = BenchmarkData(\n    id=1,\n    name=\"Test Object\",\n    values=[1.1, 2.2, 3.3, 4.4, 5.5],\n    metadata={\"key1\": \"value1\", \"key2\": \"value2\"}\n)\n\nbenchmark_serialization(test_data)\ndata_dict = dump(test_data)\nbenchmark_deserialization(data_dict, BenchmarkData)\n</code></pre>"},{"location":"user-guide/performance/#comparison-with-standard-json","title":"Comparison with Standard JSON","text":"<pre><code>import json\nimport time\nfrom jsonport import dump, load\nfrom dataclasses import dataclass\n\n@dataclass\nclass ComplexObject:\n    name: str\n    age: int\n    scores: list[float]\n    metadata: dict[str, str]\n\ndef compare_performance():\n    obj = ComplexObject(\n        name=\"Test User\",\n        age=25,\n        scores=[95.5, 87.2, 92.1, 88.9],\n        metadata={\"department\": \"engineering\", \"level\": \"senior\"}\n    )\n\n    iterations = 10000\n\n    # JsonPort\n    start_time = time.time()\n    for _ in range(iterations):\n        data = dump(obj)\n        restored = load(data, ComplexObject)\n    jsonport_time = time.time() - start_time\n\n    # Standard JSON (manual conversion)\n    def to_dict(obj):\n        return {\n            \"name\": obj.name,\n            \"age\": obj.age,\n            \"scores\": obj.scores,\n            \"metadata\": obj.metadata\n        }\n\n    def from_dict(data):\n        return ComplexObject(\n            name=data[\"name\"],\n            age=data[\"age\"],\n            scores=data[\"scores\"],\n            metadata=data[\"metadata\"]\n        )\n\n    start_time = time.time()\n    for _ in range(iterations):\n        data = json.dumps(to_dict(obj))\n        restored = from_dict(json.loads(data))\n    std_json_time = time.time() - start_time\n\n    print(f\"JsonPort time: {jsonport_time:.3f}s\")\n    print(f\"Standard JSON time: {std_json_time:.3f}s\")\n    print(f\"JsonPort is {std_json_time/jsonport_time:.1f}x faster\")\n\ncompare_performance()\n</code></pre>"},{"location":"user-guide/performance/#memory-benchmark","title":"Memory Benchmark","text":"<pre><code>import sys\nimport psutil\nimport os\nfrom jsonport import dump, load\nfrom dataclasses import dataclass\n\n@dataclass\nclass MemoryTest:\n    data: list[str]\n    metadata: dict[str, int]\n\ndef memory_benchmark():\n    # Create large test data\n    large_data = MemoryTest(\n        data=[\"item_\" + str(i) for i in range(10000)],\n        metadata={f\"key_{i}\": i for i in range(1000)}\n    )\n\n    # Measure memory before\n    process = psutil.Process(os.getpid())\n    memory_before = process.memory_info().rss\n\n    # Serialize\n    serialized = dump(large_data)\n\n    # Measure memory after serialization\n    memory_after_serialize = process.memory_info().rss\n\n    # Deserialize\n    deserialized = load(serialized, MemoryTest)\n\n    # Measure memory after deserialization\n    memory_after_deserialize = process.memory_info().rss\n\n    print(f\"Memory before: {memory_before / 1024 / 1024:.1f} MB\")\n    print(f\"Memory after serialization: {memory_after_serialize / 1024 / 1024:.1f} MB\")\n    print(f\"Memory after deserialization: {memory_after_deserialize / 1024 / 1024:.1f} MB\")\n    print(f\"Serialization overhead: {(memory_after_serialize - memory_before) / 1024 / 1024:.1f} MB\")\n    print(f\"Total overhead: {(memory_after_deserialize - memory_before) / 1024 / 1024:.1f} MB\")\n\nmemory_benchmark()\n</code></pre>"},{"location":"user-guide/performance/#performance-tips","title":"Performance Tips","text":""},{"location":"user-guide/performance/#1-profile-your-code","title":"1. Profile Your Code","text":"<pre><code>import cProfile\nimport pstats\nfrom jsonport import dump, load\n\ndef profile_serialization():\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    # Your serialization code here\n    for i in range(1000):\n        data = dump(complex_object)\n\n    profiler.disable()\n    stats = pstats.Stats(profiler)\n    stats.sort_stats('cumulative')\n    stats.print_stats(10)\n</code></pre>"},{"location":"user-guide/performance/#2-monitor-cache-hit-rates","title":"2. Monitor Cache Hit Rates","text":"<pre><code>from jsonport.core import _type_hints_cache, _optional_cache\n\ndef print_cache_stats():\n    print(f\"Type hints cache size: {len(_type_hints_cache)}\")\n    print(f\"Optional cache size: {len(_optional_cache)}\")\n\n    # Clear caches if needed\n    _type_hints_cache.clear()\n    _optional_cache.clear()\n</code></pre>"},{"location":"user-guide/performance/#3-use-appropriate-data-types","title":"3. Use Appropriate Data Types","text":"<pre><code>from typing import Union, Literal\nfrom dataclasses import dataclass\n\n# Good: Use specific types\n@dataclass\nclass Config:\n    mode: Literal[\"development\", \"production\", \"testing\"]\n    timeout: Union[int, float]\n    enabled: bool\n\n# Avoid: Using Any or object\n# mode: Any\n# timeout: object\n</code></pre>"},{"location":"user-guide/performance/#4-batch-operations","title":"4. Batch Operations","text":"<pre><code>from jsonport import dump, load\nfrom typing import List\n\ndef batch_serialize(objects: List[object]) -&gt; List[dict]:\n    \"\"\"Serialize multiple objects efficiently\"\"\"\n    return [dump(obj) for obj in objects]\n\ndef batch_deserialize(data_list: List[dict], target_class) -&gt; List[object]:\n    \"\"\"Deserialize multiple objects efficiently\"\"\"\n    return [load(data, target_class) for data in data_list]\n</code></pre>"},{"location":"user-guide/performance/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"user-guide/performance/#1-timing-decorator","title":"1. Timing Decorator","text":"<pre><code>import time\nimport functools\n\ndef timing_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"{func.__name__} took {end_time - start_time:.4f} seconds\")\n        return result\n    return wrapper\n\n@timing_decorator\ndef serialize_large_dataset(data):\n    return dump(data)\n</code></pre>"},{"location":"user-guide/performance/#2-memory-monitoring","title":"2. Memory Monitoring","text":"<pre><code>import tracemalloc\n\ndef monitor_memory():\n    tracemalloc.start()\n\n    # Your code here\n    result = dump(large_object)\n\n    current, peak = tracemalloc.get_traced_memory()\n    print(f\"Current memory usage: {current / 1024 / 1024:.1f} MB\")\n    print(f\"Peak memory usage: {peak / 1024 / 1024:.1f} MB\")\n\n    tracemalloc.stop()\n</code></pre> <p>This comprehensive performance guide helps you optimize JsonPort usage and monitor performance characteristics in your applications. </p>"},{"location":"user-guide/quick-start/","title":"Quick Start","text":"<p>Get up and running with JsonPort in minutes! This guide will show you the basics of serializing and deserializing Python objects.</p>"},{"location":"user-guide/quick-start/#installation","title":"Installation","text":"<p>Install JsonPort using pip:</p> <pre><code>pip install jsonport\n</code></pre>"},{"location":"user-guide/quick-start/#basic-example","title":"Basic Example","text":"<p>Here's a simple example to get you started:</p> <pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nfrom enum import Enum\nfrom jsonport import dump, load\n\n# Define your data structures\nclass UserRole(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n\n@dataclass\nclass User:\n    name: str\n    age: int\n    role: UserRole\n    created_at: datetime\n    tags: list[str]\n\n# Create an instance\nuser = User(\n    name=\"John Doe\",\n    age=30,\n    role=UserRole.ADMIN,\n    created_at=datetime.now(),\n    tags=[\"developer\", \"python\"]\n)\n\n# Serialize to dictionary\ndata = dump(user)\nprint(data)\n# Output:\n# {\n#   \"name\": \"John Doe\",\n#   \"age\": 30,\n#   \"role\": \"admin\",\n#   \"created_at\": \"2025-07-14T10:30:00\",\n#   \"tags\": [\"developer\", \"python\"]\n# }\n\n# Deserialize back to object\nrestored_user = load(data, User)\nprint(restored_user.name)  # \"John Doe\"\n</code></pre>"},{"location":"user-guide/quick-start/#file-operations","title":"File Operations","text":"<p>Save and load objects directly to/from files:</p> <pre><code>from jsonport import dump_file, load_file\n\n# Save to JSON file\ndump_file(user, \"user.json\")\n\n# Load from JSON file\nloaded_user = load_file(\"user.json\", User)\n\n# Save with compression\ndump_file(user, \"user.json.gz\")\n\n# Load compressed file\ncompressed_user = load_file(\"user.json.gz\", User)\n</code></pre>"},{"location":"user-guide/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Basic Usage - Learn core functionality</li> <li>Examples - See more examples</li> <li>API Reference - Complete API documentation </li> </ul>"}]}